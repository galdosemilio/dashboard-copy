{
  "Account": {
    "Account-Avatar": {
      "Get": {
        "description": "Retrieves a profile picture for specified account. Allows anonymous access",
        "src": "web-gateway/app/account/avatar/route.ts",
        "api": {
          "method": "GET",
          "url": "/account/:id/avatar"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          }
        },
        "apiSuccess": {
          "success": {
            "description": "Raw buffer image content.",
            "type": "String",
            "code": "200"
          }
        }
      },
      "Submit": {
        "description": "Creates or updates profile picture for specified account",
        "src": "web-gateway/app/account/avatar/route.ts",
        "api": {
          "method": "PUT",
          "url": "/account/:id/avatar"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          },
          "avatar": {
            "type": "String",
            "description": "Avatar image encoded in base64 string"
          }
        }
      },
      "Delete": {
        "description": "Removes profile picture for specified account",
        "src": "web-gateway/app/account/avatar/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/account/:id/avatar"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          }
        }
      }
    },
    "Account-Password": {
      "Reset": {
        "description": "Request password reset email.  On success, an email will be sent to this user's account with a reset password link and instructions.",
        "src": "web-gateway/app/account/password/route.ts",
        "api": {
          "method": "POST",
          "url": "/account/password-reset"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "email": {
            "type": "String",
            "description": "Email of user account to request reset for"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization ID"
          }
        }
      },
      "Update": {
        "description": "Update the user's password, using the activation code sent in the reset password email",
        "src": "web-gateway/app/account/password/route.ts",
        "api": {
          "method": "POST",
          "url": "/account/password-reset/update"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "email": {
            "type": "String",
            "description": "Email of user account to request reset for"
          },
          "code": {
            "type": "String",
            "description": "The activation code sent to this user"
          },
          "password": {
            "type": "String",
            "description": "The new password"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization ID"
          },
          "consent": {
            "type": "Boolean",
            "optional": true,
            "description": "A flag indicating that the user consented to Terms of Service. Passing `false` will cancel the password reset process."
          },
          "retry": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating if we should send password reset request once again when the link is expired"
          }
        }
      }
    },
    "Account-Preference": {
      "GetSingle": {
        "description": "Retrieves an account preference.",
        "src": "web-gateway/app/account/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/account/:id/preference"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          }
        },
        "apiSuccess": {
          "calendarView": {
            "type": "CalendarViewType",
            "optional": true,
            "description": "Calendar view preference",
            "values": "'list' | 'calendar:month' | 'calendar:day'"
          },
          "defaultOrganization": {
            "type": "Bigint",
            "optional": true,
            "description": "Default organization ID"
          },
          "healthyBadgeStation": {
            "type": "String",
            "optional": true,
            "description": "Healthy badge station text"
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates preference entry for specified account",
        "src": "web-gateway/app/account/preference/route.ts",
        "api": {
          "method": "POST",
          "url": "/account/:id/preference"
        },
        "version": "2.0",
        "permissions": [
          "OrgAdmin",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          },
          "calendarView": {
            "type": "CalendarViewType",
            "optional": true,
            "description": "calendar view preference for the account",
            "values": "'list' | 'calendar:month' | 'calendar:day'"
          },
          "defaultOrganization": {
            "type": "Bigint",
            "optional": true,
            "description": "default organization preference for the account"
          },
          "healthyBadgeStation": {
            "type": "String",
            "optional": true,
            "description": "Healthy badge station text"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of a preference entry, which is also an account ID."
          }
        }
      },
      "Update": {
        "description": "Updates preference entry for specified account",
        "src": "web-gateway/app/account/preference/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/account/:id/preference"
        },
        "version": "2.0",
        "permissions": [
          "OrgAdmin",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the account"
          },
          "calendarView": {
            "type": "CalendarViewType",
            "optional": true,
            "description": "Calendar view preference for the account"
          },
          "defaultOrganization": {
            "type": "Bigint",
            "optional": true,
            "description": "Default organization preference for the account"
          },
          "healthyBadgeStation": {
            "type": "String",
            "optional": true,
            "description": "Healthy badge station text"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Account": {
      "Check": {
        "description": "Checks if an account for specified e-mail address exists. Returns 404 if no accounts match the e-mail address",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "HEAD",
          "url": "/account"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "email": {
            "type": "String",
            "description": "Email address to check the account for"
          }
        }
      },
      "SetActive": {
        "description": "Set an account to active/inactive. Deactivates all associations and assignments along with account deactivation. Only admin users have permission to this endpoint.",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/account/:id/activity"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The user account to update.  This is passed as URI parameter"
          },
          "isActive": {
            "type": "Boolean",
            "description": "The status of account.  This is passed as body param"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Creates a new account. Password for the account is generated automatically.",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "POST",
          "url": "/account"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "title": {
            "type": "AccountTitleId",
            "optional": true,
            "description": "Account title ID"
          },
          "firstName": {
            "type": "String",
            "description": "First name"
          },
          "lastName": {
            "type": "String",
            "description": "Last name"
          },
          "email": {
            "type": "String",
            "description": "Email address"
          },
          "accountType": {
            "type": "AccountTypeId",
            "description": "An ID of the account type",
            "values": "'1' | '2' | '3' | '4'"
          },
          "phone": {
            "type": "String",
            "description": "Phone number"
          },
          "phoneType": {
            "type": "PhoneType",
            "optional": true,
            "description": "Phone type",
            "values": "'ios' | 'android'"
          },
          "measurementPreference": {
            "type": "MeasurementPreferenceType",
            "optional": true,
            "default": "us",
            "description": "Measurement preference",
            "values": "'us' | 'uk' | 'metric'"
          },
          "timezone": {
            "type": "String",
            "optional": true,
            "default": "America/New_York",
            "description": "Account timezone"
          },
          "preferredLocales": {
            "type": "String[]",
            "optional": true,
            "default": "[]",
            "description": "List of preferred languages/locales. Should be provided in an appropriate order."
          },
          "client": {
            "type": "ClientData",
            "optional": true,
            "description": "Client profile data. Required for client profiles (accountType = '3')",
            "children": {
              "birthday": {
                "type": "String",
                "description": "Date of birth"
              },
              "height": {
                "type": "Integer",
                "description": "Height in centimeters"
              },
              "gender": {
                "type": "Gender",
                "description": "Client gender",
                "values": "'male' | 'female'"
              },
              "bmr": {
                "type": "Integer",
                "optional": true,
                "description": "The BMR number"
              }
            }
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the created account"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates account",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Account ID. Intended documentation rename of the URI parameter"
          },
          "title": {
            "type": "AccountTitleId",
            "optional": true,
            "description": "Account title ID"
          },
          "firstName": {
            "type": "String",
            "optional": true,
            "description": "First name"
          },
          "lastName": {
            "type": "String",
            "optional": true,
            "description": "Last name"
          },
          "email": {
            "type": "String",
            "optional": true,
            "description": "Email address"
          },
          "phone": {
            "type": "String",
            "optional": true,
            "description": "Phone number"
          },
          "phoneType": {
            "type": "PhoneType",
            "optional": true,
            "description": "Phone type",
            "values": "'ios' | 'android'"
          },
          "measurementPreference": {
            "type": "MeasurementPreferenceType",
            "optional": true,
            "description": "Measurement preference",
            "values": "'us' | 'uk' | 'metric'"
          },
          "timezone": {
            "type": "String",
            "optional": true,
            "description": "Account timezone"
          },
          "preferredLocales": {
            "type": "String[]",
            "optional": true,
            "default": "[]",
            "description": "List of preferred languages/locales. Should be provided in an appropriate order."
          },
          "client": {
            "type": "ClientData",
            "optional": true,
            "description": "Client profile data",
            "children": {
              "birthday": {
                "type": "String",
                "optional": true,
                "description": "Date of birth"
              },
              "height": {
                "type": "Integer",
                "optional": true,
                "description": "Height in centimeters"
              },
              "gender": {
                "type": "Gender",
                "optional": true,
                "description": "Client gender"
              },
              "bmr": {
                "type": "Integer",
                "optional": true,
                "description": "The BMR number"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetAll": {
        "description": "Fetch listing of user accounts. Restricted to admins",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/account"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "query": {
            "type": "String",
            "optional": true,
            "description": "Sets filter to include responses that match to first name, last name, email address"
          },
          "accountType": {
            "type": "AccountTypeId",
            "optional": true,
            "description": "Fetch only account type(s) that match this account_type."
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Return listing of clients associated with this organization, ignored for admin account types.  Required if requester is provider"
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Flag that indicates whether the result should include not active accounts"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          },
          "sort": {
            "type": "AccSort[]",
            "optional": true,
            "description": "A collection that determines how the result should be sorted",
            "children": {
              "property": {
                "type": "AccSortProperty",
                "description": "A property to sort by",
                "values": "'createdAt' | 'email' | 'firstName' | 'lastName'",
                "default": "firstName'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "AccountFullData[]",
            "description": "Array of accounts",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "title": {
                "type": "AccountTitle",
                "optional": true,
                "description": "Account title",
                "children": {
                  "id": {
                    "type": "AccountTitleId",
                    "description": "Account title ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Account title name"
                  }
                }
              },
              "firstName": {
                "type": "String",
                "description": "First name"
              },
              "lastName": {
                "type": "String",
                "description": "Last name"
              },
              "email": {
                "type": "String",
                "description": "Email"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Active flag"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Creation date"
              },
              "accountType": {
                "type": "AccountTypeInfo",
                "description": "AccountType info",
                "children": {
                  "id": {
                    "type": "String",
                    "description": "Account type ID"
                  },
                  "title": {
                    "type": "String",
                    "description": "Account type title"
                  }
                }
              },
              "measurementPreference": {
                "type": "MeasurementPreferenceType",
                "description": "Measurement system",
                "values": "'us' | 'uk' | 'metric'"
              },
              "timezone": {
                "type": "String",
                "description": "Timezone"
              },
              "preferredLocales": {
                "type": "String[]",
                "description": "List of languages/locales in preferred order."
              },
              "phone": {
                "type": "String",
                "optional": true,
                "description": "Phone number"
              },
              "phoneType": {
                "type": "PhoneType",
                "optional": true,
                "description": "Phone type"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single account data",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Requested account ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Account ID"
          },
          "title": {
            "type": "AccountTitle",
            "optional": true,
            "description": "Account title",
            "children": {
              "id": {
                "type": "AccountTitleId",
                "description": "Account title ID"
              },
              "name": {
                "type": "String",
                "description": "Account title name"
              }
            }
          },
          "firstName": {
            "type": "String",
            "description": "First name"
          },
          "lastName": {
            "type": "String",
            "description": "Last name"
          },
          "email": {
            "type": "String",
            "description": "Email"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Active flag"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Creation date"
          },
          "accountType": {
            "type": "AccountTypeInfo",
            "description": "AccountType info",
            "children": {
              "id": {
                "type": "String",
                "description": "Account type ID"
              },
              "title": {
                "type": "String",
                "description": "Account type title"
              }
            }
          },
          "measurementPreference": {
            "type": "MeasurementPreferenceType",
            "description": "Measurement system",
            "values": "'us' | 'uk' | 'metric'"
          },
          "timezone": {
            "type": "String",
            "description": "Timezone"
          },
          "preferredLocales": {
            "type": "String[]",
            "description": "List of languages/locales in preferred order."
          },
          "phone": {
            "type": "String",
            "optional": true,
            "description": "Phone number"
          },
          "phoneType": {
            "type": "PhoneType",
            "optional": true,
            "description": "Phone type"
          },
          "clientData": {
            "type": "ClientData",
            "optional": true,
            "description": "Client information",
            "children": {
              "birthday": {
                "type": "String",
                "description": "Birth day"
              },
              "height": {
                "type": "Integer",
                "description": "Client height"
              },
              "gender": {
                "type": "Gender",
                "description": "Client gender"
              },
              "bmr": {
                "type": "Integer",
                "optional": true,
                "description": "Activity level"
              }
            }
          },
          "preference": {
            "type": "AccountPreferenceSingle",
            "optional": true,
            "description": "Account preferences",
            "children": {
              "calendarView": {
                "type": "CalendarViewType",
                "optional": true,
                "description": "Calendar view preference"
              },
              "defaultOrganization": {
                "type": "Bigint",
                "optional": true,
                "description": "Default organization ID"
              },
              "healthyBadgeStation": {
                "type": "String",
                "optional": true,
                "description": "Healthy badge station text"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetTypes": {
        "description": "Get the listing of all user types in the system. Restricted to Admins and Providers",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/account-type"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiSuccess": {
          "data": {
            "type": "AccountTypeDesc[]",
            "description": "Account types object",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Id of this account type"
              },
              "title": {
                "type": "String",
                "description": "Name of the account type"
              },
              "description": {
                "type": "String",
                "description": "Human readable description of this account type"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetTitles": {
        "description": "Get the listing of all titles in the system. Restricted to Admins and Providers",
        "src": "web-gateway/app/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/account-title"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiSuccess": {
          "data": {
            "type": "AccountTitle[]",
            "description": "Account title objects",
            "children": {
              "id": {
                "type": "AccountTitleId",
                "description": "Id of this account title"
              },
              "name": {
                "type": "String",
                "description": "Name of the account title"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetList": {
        "description": "Get a listing of accessible accounts for an account",
        "src": "web-gateway/app/organization/access/route.ts",
        "api": {
          "method": "GET",
          "url": "/access/account"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "Client",
          "OrgAccess"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The ID of the account to look up the account access for. Defaults to current user if not provided."
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "The ID of the organization to narrow down the accessible accounts."
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "If false, result will include accounts for all child organizations for requested one. Otherwise - return entries strictly for requested organization. Defaulted to 'false'"
          },
          "accessType": {
            "type": "AccAccessType",
            "optional": true,
            "description": "The type of access relationship to include. If omitted, both associations and assignments are included.",
            "values": "'association' | 'assignment'"
          },
          "accountType": {
            "type": "AccountTypeId",
            "optional": true,
            "description": "The ID of the account type to filter the result set with"
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter query for account first or last name, or e-mail address."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          },
          "sort": {
            "type": "AccAccessSort[]",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by first name ascending.",
            "children": {
              "property": {
                "type": "AccAccessSortProperty",
                "description": "A property to sort by",
                "values": "'createdAt' | 'email' | 'firstName' | 'lastName' | 'associationDate'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "AccountAccessData[]",
            "description": "Result collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "title": {
                "type": "AccountTitle",
                "optional": true,
                "description": "Account title",
                "children": {
                  "id": {
                    "type": "AccountTitleId",
                    "description": "Account title ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Account title name"
                  }
                }
              },
              "firstName": {
                "type": "String",
                "description": "First name of the account"
              },
              "lastName": {
                "type": "String",
                "description": "Last name of the account"
              },
              "email": {
                "type": "String",
                "description": "Email address of the account"
              },
              "accountType": {
                "type": "AccountTypeInfo",
                "description": "Account type structure",
                "children": {
                  "id": {
                    "type": "String",
                    "description": "Account type ID"
                  },
                  "title": {
                    "type": "String",
                    "description": "Account type title"
                  }
                }
              },
              "organizations": {
                "type": "AccountAssociationData[]",
                "description": "Collection of related organizations",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization id"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  },
                  "accessType": {
                    "type": "AccAccessType",
                    "description": "The type of access relationship"
                  },
                  "createdAt": {
                    "type": "Timestamp",
                    "description": "Association/assignment creation date & time"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Register": {
    "Register": {
      "Client": {
        "description": "Register a new client account.  After the account is created, the user will be logged in.  This endpoint is accessible to a public or private user EXCEPT for an authenticated client.",
        "src": "web-gateway/app/account/self-register/route.ts",
        "api": {
          "method": "POST",
          "url": "/client/register"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization Id"
          },
          "title": {
            "type": "AccountTitleId",
            "optional": true,
            "description": "Account title ID"
          },
          "firstName": {
            "type": "String",
            "description": "First name"
          },
          "lastName": {
            "type": "String",
            "description": "Last name"
          },
          "email": {
            "type": "String",
            "description": "Email address"
          },
          "password": {
            "type": "String",
            "description": "The password for the user"
          },
          "phone": {
            "type": "String",
            "description": "Phone number"
          },
          "deviceType": {
            "type": "String",
            "description": "The device type of the logging-in user - must match a value in the device_type table.  If either iOS or Android, user token will be returned and no cookie will be set.  If Web, no token will be returned but a cookie will be set."
          },
          "phoneType": {
            "type": "String",
            "optional": true,
            "description": "Phone type",
            "values": "'ios' | 'android'"
          },
          "measurementPreference": {
            "type": "MeasurementPreferenceType",
            "optional": true,
            "default": "us",
            "description": "Measurement preference",
            "values": "'us' | 'uk' | 'metric'"
          },
          "timezone": {
            "type": "String",
            "optional": true,
            "default": "America/New_York",
            "description": "Account timezone"
          },
          "preferredLocales": {
            "type": "String[]",
            "optional": true,
            "default": "[]",
            "description": "List of preferred languages/locales. Should be provided in an appropriate order."
          },
          "client": {
            "type": "ClientData",
            "description": "Client profile data.",
            "children": {
              "birthday": {
                "type": "String",
                "description": "Date of birth"
              },
              "height": {
                "type": "Integer",
                "description": "Height in centimeters"
              },
              "gender": {
                "type": "Gender",
                "description": "Gender",
                "values": "'male' | 'female'"
              },
              "bmr": {
                "type": "Integer",
                "optional": true,
                "description": "The BMR number"
              }
            }
          },
          "healthyBadgeStation": {
            "type": "String",
            "optional": true,
            "description": "Healthy badge station"
          },
          "calendarView": {
            "type": "CalendarViewType",
            "optional": true,
            "description": "Calendar view"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of this user"
          },
          "token": {
            "type": "String",
            "optional": true,
            "description": "The authentication token for this user, returned for device types other than Web"
          }
        },
        "hasResponse": true
      },
      "Clinic": {
        "description": "Register new CCR organization and associated provider account and create stripe customer",
        "src": "web-gateway/app/ccr/register/route.ts",
        "api": {
          "method": "POST",
          "url": "/ccr/register"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "account": {
            "type": "Object",
            "description": "New account data",
            "children": {
              "title": {
                "type": "AccountTitleId",
                "optional": true,
                "description": "Account title ID"
              },
              "firstName": {
                "type": "String",
                "description": "The first name of the user"
              },
              "lastName": {
                "type": "String",
                "description": "The first name of the user"
              },
              "email": {
                "type": "String",
                "description": "The email address of the user. This must be unique, any existing user (active or inactive) with this email account will cause a conflict."
              },
              "phone": {
                "type": "String",
                "description": "The phone number of the user."
              },
              "password": {
                "type": "String",
                "description": "The password for the user"
              },
              "preferredLocales": {
                "type": "String[]",
                "optional": true,
                "default": "[]",
                "description": "A collection of preferred locales"
              },
              "isActive": {
                "type": "Boolean",
                "optional": true,
                "default": "true",
                "description": "Sets account active or inactive status. Inactive accounts cannot be logged in"
              },
              "timezone": {
                "type": "String",
                "optional": true,
                "default": "America/New_York",
                "description": "The user's timezone, must be a valid psql timezone name such as 'America/New_York' or 'America/Los_Angeles'."
              }
            }
          },
          "organization": {
            "type": "Object",
            "description": "Organization data",
            "children": {
              "name": {
                "type": "String",
                "description": "The name of the organization"
              },
              "parentOrganizationId": {
                "type": "Bigint",
                "optional": true,
                "description": "ID of the parent organization. Defaults to 'CoachCare' if not provided."
              },
              "shortcode": {
                "type": "String",
                "optional": true,
                "default": "ccr_{{timestamp}}",
                "description": "The internal code name of the organization, must be unique."
              },
              "contact": {
                "type": "Object",
                "description": "Organization contacts",
                "children": {
                  "firstName": {
                    "type": "String",
                    "description": "The first name of the organization contact"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "The last name of the organization contact"
                  },
                  "email": {
                    "type": "String",
                    "description": "The email of the organization contact"
                  },
                  "phone": {
                    "type": "String",
                    "optional": true,
                    "description": "The phone number of the organization contact"
                  }
                }
              },
              "isActive": {
                "type": "Boolean",
                "optional": true,
                "default": "true",
                "description": "Sets organization active status"
              },
              "address": {
                "type": "Object",
                "description": "Address information",
                "children": {
                  "street": {
                    "type": "String",
                    "description": "The street address of the organization"
                  },
                  "city": {
                    "type": "String",
                    "description": "The city of the organization"
                  },
                  "state": {
                    "type": "String",
                    "description": "The state of the organization"
                  },
                  "postalCode": {
                    "type": "String",
                    "description": "The postal code of the organization"
                  },
                  "country": {
                    "type": "String",
                    "description": "The country of the organization. Must be the two-letter ISO code"
                  }
                }
              }
            }
          },
          "paymentData": {
            "type": "Object",
            "optional": true,
            "description": "Data to create new Stripe customer.",
            "children": {
              "email": {
                "type": "String",
                "description": "Stripe account email"
              },
              "token": {
                "type": "String",
                "description": "Stripe token for account"
              }
            }
          }
        },
        "apiSuccess": {
          "accountId": {
            "type": "Bigint",
            "description": "Id of created provider account"
          },
          "organizationId": {
            "type": "Bigint",
            "description": "Id of created organization"
          },
          "isPaymentDataProcessed": {
            "type": "Boolean",
            "optional": true,
            "description": "Has value 'true' if passed payment data was successfully processed by web-stripe service and customer was created, otherwise 'false'. Is not included at all if payment data is not provided."
          }
        },
        "hasResponse": true
      }
    }
  },
  "Session": {
    "Session": {
      "Login": {
        "description": "Login a user and either retrieve token on success, or set cookie if requesting site is either admin, provider, or public site.\nFor cookie-based authentication, keep in mind that a single web-browser can be logged into multiple sites at the same time.\nAs such, cookie-based calls must also include a header 'x-selvera-account', which must be set to either (admin|provider|client).\nThe API will use the appropriate cookie based on the header value. Additionally, a 'x-selvera-cookie-domain' header allows user to define domain.\nOnce logged in, all requests are properly authenticated and user types verified as needed.\non which cookie is set, but domain must be in CORS_WHITELIST",
        "src": "web-gateway/app/account/session/route.ts",
        "api": {
          "method": "POST",
          "url": "/login"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "email": {
            "type": "String",
            "description": "The email address of the user to login"
          },
          "password": {
            "type": "String",
            "description": "The password for the email address"
          },
          "deviceType": {
            "type": "String",
            "description": "The device type of the logging-in user - must match a value in the device_type table.  If either iOS or Android, user token will be returned and no cookie will be set.  If Web, no token will be returned but a cookie will be set."
          },
          "allowedAccountTypes": {
            "type": "String[]",
            "description": "The account types of the user to login - must match the value of the user's account type. For clarity, this is simply used to prevent users from logging into the wrong section of the website."
          }
        },
        "apiSuccess": {
          "accountType": {
            "type": "AccountTypeId",
            "description": "Account type of the logged user."
          },
          "token": {
            "type": "String",
            "optional": true,
            "description": "Session token. If deviceType is Web the cookie is set and the token is not returned."
          }
        },
        "hasResponse": true
      },
      "LogoutAll": {
        "description": "Logout all user sessions.",
        "src": "web-gateway/app/account/session/route.ts",
        "api": {
          "method": "POST",
          "url": "/logout/all"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "User ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Logout": {
        "description": "Logout the authenticated user.",
        "src": "web-gateway/app/account/session/route.ts",
        "api": {
          "method": "POST",
          "url": "/logout"
        },
        "version": "2.0",
        "apiParam": {
          "token": {
            "type": "String",
            "optional": true,
            "description": "Session token, defaults to logged in user and can be overwritten only by administrators"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Check": {
        "description": "Retrieves the account ID of the user associated with session on the request",
        "src": "web-gateway/app/account/session/route.ts",
        "api": {
          "method": "GET",
          "url": "/session"
        },
        "version": "2.0",
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Account ID"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Mobile": {
    "Mobile-App": {
      "GetiOSRedirect": {
        "description": "Redirect to iOS application for given organization",
        "src": "web-gateway/app/application/route.ts",
        "api": {
          "method": "GET",
          "url": "/app/ios/:id"
        },
        "version": "1.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          }
        },
        "apiSuccess": {
          "redirect": {
            "type": "String",
            "description": "Redirect URL"
          }
        },
        "hasResponse": true
      },
      "GetAndroidRedirect": {
        "description": "Redirect to Android application for given organization",
        "src": "web-gateway/app/application/route.ts",
        "api": {
          "method": "GET",
          "url": "/app/android/:id"
        },
        "version": "1.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          }
        },
        "apiSuccess": {
          "redirect": {
            "type": "String",
            "description": "Redirect URL"
          }
        },
        "hasResponse": true
      }
    },
    "Mobile-Push-Client": {
      "Upsert": {
        "description": "Upsert client token. Idempotent if token already present.",
        "src": "web-gateway/app/notification/mobile-push/route.ts",
        "api": {
          "method": "PUT",
          "url": "/notification/mobile-push/client"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The organization for the app the client is using (which may be different than the child organization to which the client actually belongs)"
          },
          "projectId": {
            "type": "String",
            "description": "The Google project-id associated with the app"
          },
          "token": {
            "type": "String",
            "description": "The push token for the device"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of client"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Fetch clients",
        "src": "web-gateway/app/notification/mobile-push/route.ts",
        "api": {
          "method": "GET",
          "url": "/notification/mobile-push/client"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "Client"
        ],
        "apiParam": {
          "token": {
            "type": "String",
            "optional": true,
            "description": "Retrieve client for this token"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Retrieve clients for this account. Can only be passed when called as an administrator, defaults to current user otherwise."
          }
        },
        "apiSuccess": {
          "clients": {
            "type": "Array",
            "description": "Array of clients",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The client ID"
              },
              "organization": {
                "type": "Bigint",
                "description": "Organization to which the client is associated"
              },
              "account": {
                "type": "Bigint",
                "description": "The account ID"
              },
              "projectId": {
                "type": "String",
                "optional": true,
                "description": "The Google project-id associated with the app if admin"
              },
              "token": {
                "type": "String",
                "optional": true,
                "description": "The device token if admin"
              },
              "userAgent": {
                "type": "String",
                "optional": true,
                "description": "The user-agent passed in if exists and is admin"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch a single clients",
        "src": "web-gateway/app/notification/mobile-push/route.ts",
        "api": {
          "method": "GET",
          "url": "/notification/mobile-push/client/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Id to fetch, in URL"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "String",
            "description": "The client ID"
          },
          "account": {
            "type": "String",
            "description": "The account ID"
          },
          "organization": {
            "type": "String",
            "description": "Organization to which the client is associated"
          },
          "projectId": {
            "type": "String",
            "description": "The Google project-id associated with the app"
          },
          "token": {
            "type": "String",
            "description": "The device token"
          },
          "userAgent": {
            "type": "String",
            "optional": true,
            "description": "The user agent passed in by the client"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Remove a single client",
        "src": "web-gateway/app/notification/mobile-push/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/notification/mobile-push/client/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID to remove, in URL"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "External": {
    "External-Auth": {
      "AuthFitbit": {
        "description": "Returns fitbit OAuth2 authentication url",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "GET",
          "url": "/authentication/fitbit"
        },
        "version": "1.0",
        "apiSuccess": {
          "url": {
            "type": "String",
            "description": "Url for redirect to fitbit auth service"
          }
        },
        "hasResponse": true
      },
      "AuthGoogle": {
        "description": "Returns Google OAuth2 authentication url",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "GET",
          "url": "/authentication/google"
        },
        "version": "1.0",
        "apiSuccess": {
          "url": {
            "type": "String",
            "description": "Url for redirect to google auth service"
          }
        },
        "hasResponse": true
      },
      "AuthLevl": {
        "description": "Authenticates Levl user",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "POST",
          "url": "/authentication/levl"
        },
        "version": "1.0",
        "apiParam": {
          "email": {
            "type": "String",
            "description": "Email address of Levl account"
          },
          "password": {
            "type": "String",
            "description": "Password of the Levl account. This password is not stored but passed through to Levl. Only resulting auth token is stored."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "AuthHealthkit": {
        "description": "Creates an entry to indicate that Apple HealthKit is connected for authenticated account. Accessible only to clients",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "POST",
          "url": "/authentication/healthkit"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetAvailableTokens": {
        "description": "Gets a list of authentication tokens to 3rd party services for a specified account",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "GET",
          "url": "/authentication/:account"
        },
        "version": "1.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account ID"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "AuthSegment[]",
            "description": "Array of token objects for an account",
            "children": {
              "service": {
                "type": "AuthServiceName",
                "description": "Denotes the service for which authentication was delegated",
                "values": "'fitbit' | 'google' | 'levl' | 'healthkit'"
              },
              "token": {
                "type": "AuthToken",
                "optional": true,
                "description": "An object that is present if the user has a token for the service",
                "children": {
                  "createdAt": {
                    "type": "Timestamp",
                    "description": "Authentication token creation date"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Revoke": {
        "description": "Revokes access to a specific service for a given account",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/authentication/:account/:service"
        },
        "version": "1.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account ID"
          },
          "service": {
            "type": "String",
            "description": "A service to which the authentication should be revoked",
            "values": "'fitbit' | 'google' | 'levl' | 'healthkit'"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "RevokeAll": {
        "description": "Revokes access to all services for a given account",
        "src": "web-gateway/app/authentication/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/authentication/:account"
        },
        "version": "1.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "External-Device": {
      "GetAll": {
        "description": "Returns all available measurement devices",
        "src": "web-gateway/app/measurement/device/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/device"
        },
        "version": "2.0",
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of measurement devices objects.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The device id"
              },
              "title": {
                "type": "String",
                "description": "The title"
              },
              "description": {
                "type": "String",
                "description": "The device description"
              },
              "addedAt": {
                "type": "String",
                "description": "The device adding timestamp"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetLastActivity": {
        "description": "Returns all available, paired measurement devices with the last sync date for an account",
        "src": "web-gateway/app/measurement/device/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/device/sync"
        },
        "version": "2.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account ID to fetch the paired devices for"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of measurement devices objects.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The device id"
              },
              "title": {
                "type": "String",
                "description": "The title"
              },
              "service": {
                "type": "String",
                "description": "The service name from database"
              },
              "description": {
                "type": "String",
                "description": "The device description"
              },
              "lastAuthenticatedAt": {
                "type": "Timestamp",
                "optional": true,
                "description": "Indicates when the service was last authenticated to. Only available for devices that have third party integration set up at the given moment."
              },
              "lastSyncedAt": {
                "type": "Timestamp",
                "optional": true,
                "description": "Indicates when the last sync took place. Only available for third party data providers that are periodically synced."
              }
            }
          }
        },
        "hasResponse": true
      },
      "SyncHealthKit": {
        "description": "Update last sync date for healthkit device",
        "src": "web-gateway/app/measurement/device/route.ts",
        "api": {
          "method": "PUT",
          "url": "/measurement/device/sync/healthkit"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "syncDate": {
            "type": "String",
            "optional": true,
            "description": "Timestamp of last sync in ISO-8601 format. Defaulted to the current timestamp."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Sync": {
        "description": "Kick off the syncing process for a specified account & service/device for data in the provided date range",
        "src": "web-gateway/app/measurement/device/route.ts",
        "api": {
          "method": "PUT",
          "url": "/measurement/device/sync"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "service": {
            "type": "String",
            "description": "Service name to sync device for"
          },
          "range": {
            "type": "Object",
            "description": "Date range to sync device for",
            "children": {
              "start": {
                "type": "String",
                "description": "Sync services from start date (inclusive) [YYYY-MM-DD]"
              },
              "end": {
                "type": "String",
                "description": "Sync services till end date (inclusive) [YYYY-MM-DD]"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "External-GoogleAuth": {
      "GetAuthUrl": {
        "description": "Get an authentication URL for google calendar",
        "src": "web-gateway/app/schedule/google/route.ts",
        "api": {
          "method": "GET",
          "url": "/schedule/google/:id/auth"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The account ID to get authentication URL for"
          }
        }
      },
      "GetAuthStatus": {
        "description": "Get Google's authentication status",
        "src": "web-gateway/app/schedule/google/route.ts",
        "api": {
          "method": "GET",
          "url": "/schedule/google/:id/authStatus"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The account ID to get authentication URL for"
          },
          "code": {
            "type": "String",
            "description": "The OAuth code"
          }
        }
      }
    }
  },
  "Blacklist": {
    "Blacklist": {
      "GetAll": {
        "description": "Retrieves a list of providers that should not be viewed by clients",
        "src": "web-gateway/app/ccr/route.ts",
        "api": {
          "method": "GET",
          "url": "/ccr/blacklist"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ]
      }
    }
  },
  "Conference": {
    "Conference-Billing": {
      "GetSummary": {
        "description": "Retrieves billing summary for an organization and its hierarchy",
        "src": "web-gateway/app/conference/billing/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/billing"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "start": {
            "type": "Date",
            "optional": true,
            "description": "Start date"
          },
          "end": {
            "type": "Date",
            "optional": true,
            "description": "End date"
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether to retrieve billing only for the top-level organization in the hierarchy. By default retrieves billing for all child organizations."
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether to include inactive subaccounts in the billing summary"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "BillingSummaryItem[]",
            "description": "Collection of billing summary items",
            "children": {
              "organization": {
                "type": "Entity",
                "description": "Organization information",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  }
                }
              },
              "subaccount": {
                "type": "ConferenceSubaccountInfo",
                "description": "Subaccount information",
                "children": {
                  "sid": {
                    "type": "String",
                    "description": "Subaccount Twillio ID"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "A flag indicating if subaccount is active or not"
                  },
                  "startDate": {
                    "type": "Date",
                    "description": "Start date of the billing breakdown"
                  },
                  "endDate": {
                    "type": "Date",
                    "description": "End date of the billing breakdown"
                  },
                  "description": {
                    "type": "String",
                    "description": "Billing description"
                  },
                  "category": {
                    "type": "String",
                    "description": "Twilio's billing category"
                  }
                }
              },
              "count": {
                "type": "MeasuredValue",
                "description": "Count of events",
                "children": {
                  "value": {
                    "type": "Number",
                    "description": "Actual value"
                  },
                  "unit": {
                    "type": "String",
                    "description": "Unit of the value"
                  }
                }
              },
              "price": {
                "type": "MeasuredValue",
                "description": "Price for a specific category service",
                "children": {
                  "value": {
                    "type": "Number",
                    "description": "Actual value"
                  },
                  "unit": {
                    "type": "String",
                    "description": "Unit of the value"
                  }
                }
              },
              "usage": {
                "type": "MeasuredValue",
                "description": "Usage breakdown of specific category",
                "children": {
                  "value": {
                    "type": "Number",
                    "description": "Actual value"
                  },
                  "unit": {
                    "type": "String",
                    "description": "Unit of the value"
                  }
                }
              }
            }
          }
        }
      }
    },
    "Conference-Subaccount": {
      "CreateKey": {
        "description": "Change the API key for a subaccount by revoking the old one and generating a new key.",
        "src": "web-gateway/app/conference/subaccount/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/subaccount/:id/key"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Subaccount ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Add subaccount for specified organization.",
        "src": "web-gateway/app/conference/subaccount/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/subaccount/"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID the subaccount is created for"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of subaccount."
          }
        }
      },
      "GetAll": {
        "description": "Retrieves all subaccounts for a specified organization",
        "src": "web-gateway/app/conference/subaccount/route.ts",
        "api": {
          "method": "GET",
          "url": "/conference/subaccount"
        },
        "version": "1.0",
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID to fetch the subaccounts for"
          },
          "activeOnly": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "A flag indicating whether to only retrieve active subaccounts."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Collection of subaccounts",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Subaccount ID"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Subaccount creation timestamp"
              },
              "updatedAt": {
                "type": "Timestamp",
                "optional": true,
                "description": "Subaccount latest modification timestamp"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Activity flag"
              },
              "hasKeys": {
                "type": "Boolean",
                "description": "A flag indicating if the subaccount has access keys set up for it"
              }
            }
          }
        }
      },
      "GetSingle": {
        "description": "Retrieves details of a single subaccount",
        "src": "web-gateway/app/conference/subaccount/route.ts",
        "api": {
          "method": "GET",
          "url": "/conference/subaccount/:id"
        },
        "version": "1.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Subaccount ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Subaccount ID"
          },
          "organization": {
            "type": "Entity",
            "description": "Organization ref",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              }
            }
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Subaccount creation timestamp"
          },
          "updatedAt": {
            "type": "Timestamp",
            "optional": true,
            "description": "Subaccount latest modification timestamp"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Activity flag"
          },
          "hasKeys": {
            "type": "Boolean",
            "description": "A flag indicating if the subaccount has access keys set up for it"
          }
        }
      },
      "Delete": {
        "description": "Removes a subaccount",
        "src": "web-gateway/app/conference/subaccount/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/conference/subaccount/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Subaccount ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Conference-Call": {
      "CreateToken": {
        "description": "Creates an access token (JWT) to specified video conference call and adds the caller to the attending participants.",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/video/token"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "callId": {
            "type": "String",
            "description": "Call identifier"
          }
        },
        "apiSuccess": {
          "jwt": {
            "type": "String",
            "description": "Stringified JWT access token"
          }
        }
      },
      "EmitEvent": {
        "description": "Notifies of a specific event that happened during the call",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/video/call/event"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "callId": {
            "type": "Bigint",
            "description": "ID of the call"
          },
          "event": {
            "type": "String",
            "description": "Call event",
            "values": "'aborted' | 'declined'"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Creates a call metadata entry returning call id on success",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "POST",
          "url": "/conference/video/call"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "room": {
            "type": "String",
            "description": "Room identifier/name"
          },
          "participants": {
            "type": "Bigint[]",
            "description": "Array of accounts ids, requested to be a call participants"
          },
          "subaccountId": {
            "type": "Bigint",
            "description": "Id of twilio subaccount for organization"
          }
        },
        "apiSuccess": {
          "callId": {
            "type": "Bigint",
            "description": "Id of created call entry"
          }
        }
      },
      "Update": {
        "description": "Updates a call metadata entry. Only call initiator able to update call metadata.",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/conference/video/call/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Cliebt"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Id of started call. Passed as last URI param."
          },
          "participants": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Array of accounts ids, requested to be a call participants"
          },
          "callEnded": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Takes only 'true' value to indicate that call ended. Any other values will be ignored. Once call ended, it's metadata editing will unavailable"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetAvailability": {
        "description": "Get availability/on-call flag. If the flag is returned as `false`, it means the selected user is on another call. This endpoint has account permission checks disabled.",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "GET",
          "url": "/conference/video/call/availability"
        },
        "version": "2.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "ID of the account to look up the call for"
          }
        },
        "apiSuccess": {
          "isAvailable": {
            "type": "Boolean",
            "description": "A flag indicating whether the selected account is available on a call. If set to `false`, it means the account is on another call."
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves details of a single call",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "GET",
          "url": "/conference/video/call/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Call entry ID"
          }
        },
        "apiSuccess": {
          "callId": {
            "type": "Bigint",
            "description": "Call entry ID"
          },
          "initiatorId": {
            "type": "Bigint",
            "description": "Call initiator account ID"
          },
          "subaccountId": {
            "type": "Bigint",
            "description": "Twilio subaccount Id"
          },
          "organizationId": {
            "type": "Bigint",
            "description": "Organization Id"
          },
          "participants": {
            "type": "Object",
            "description": "Contains lists of requested and attended call participants",
            "children": {
              "requested": {
                "type": "ConferenceParticipant[]",
                "description": "Array of the requested participant data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "First name. Account data is eventually consistent and might not _always_ be available, although it should be available most of the time."
                  }
                }
              },
              "attended": {
                "type": "ConferenceParticipantAttended[]",
                "description": "Array of the attended participant data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "First name. Account data is eventually consistent and might not _always_ be available, although it should be available most of the time."
                  },
                  "callIdentity": {
                    "type": "String",
                    "description": "Identity of the participant that is sent to Twilio"
                  }
                }
              }
            }
          },
          "room": {
            "type": "String",
            "description": "Call room name"
          },
          "callEnded": {
            "type": "Boolean",
            "description": "Indicates whether call ended or in progress"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieve paged call entries",
        "src": "web-gateway/app/conference/video/route.ts",
        "api": {
          "method": "GET",
          "url": "/conference/video/call"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "ID of the account to look up the call for"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization ID"
          },
          "inProgress": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "If 'true' - return only calls that currently in progress. If 'false' - return ended calls"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Collection of calls",
            "children": {
              "callId": {
                "type": "Bigint",
                "description": "Call entry ID"
              },
              "initiatorId": {
                "type": "Bigint",
                "description": "Call initiator account ID"
              },
              "subaccountId": {
                "type": "Bigint",
                "description": "Twilio subaccount Id"
              },
              "organizationId": {
                "type": "Bigint",
                "description": "Organization Id"
              },
              "participants": {
                "type": "Object",
                "description": "Contains lists of requested and attended call participants",
                "children": {
                  "requested": {
                    "type": "ConferenceParticipant[]",
                    "description": "Array of the requested participant data",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Account ID"
                      },
                      "firstName": {
                        "type": "String",
                        "optional": true,
                        "description": "First name. Account data is eventually consistent and might not _always_ be available, although it should be available most of the time."
                      }
                    }
                  },
                  "attended": {
                    "type": "ConferenceParticipantAttended[]",
                    "description": "Array of the attended participant data",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Account ID"
                      },
                      "firstName": {
                        "type": "String",
                        "optional": true,
                        "description": "First name. Account data is eventually consistent and might not _always_ be available, although it should be available most of the time."
                      },
                      "callIdentity": {
                        "type": "String",
                        "description": "Identity of the participant that is sent to Twilio"
                      }
                    }
                  }
                }
              },
              "room": {
                "type": "String",
                "description": "Call room name"
              },
              "callEnded": {
                "type": "Boolean",
                "description": "Indicates whether call ended or in progress"
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Consent": {
    "Consent": {
      "GetAll": {
        "description": "Gets all defined consents using specified filters.",
        "src": "web-gateway/app/consent/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/consent"
        },
        "version": "1.0",
        "permissions": [
          "OrgAdmin",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the consent"
          },
          "tosVersionId": {
            "type": "Integer",
            "optional": true,
            "description": "ID of the ToS version"
          },
          "metaId": {
            "type": "String",
            "optional": true,
            "description": "ID of the ToS group"
          },
          "action": {
            "type": "String",
            "optional": true,
            "description": "Consent action"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account for which the consent was intended for"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization filter"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "ToS title"
          }
        },
        "apiSuccess": {
          "consents": {
            "type": "ConsentSegment[]",
            "description": "Collection of consents",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the consent"
              },
              "account": {
                "type": "Bigint",
                "description": "Account for which the consent is intended"
              },
              "createdBy": {
                "type": "Bigint",
                "description": "Account which has actually submitted the consent"
              },
              "tosVersionId": {
                "type": "Bigint",
                "description": "ID of the ToS version the action was taken upon"
              },
              "action": {
                "type": "ConsentAction",
                "description": "Action taken",
                "values": "'accepted' | 'rejected' | 'pending'"
              },
              "organization": {
                "type": "Bigint",
                "optional": true,
                "description": "Organization for which the action was taken. Can be null for personal account consents."
              },
              "timestamp": {
                "type": "DateTime",
                "description": "Creation date of the consent"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Gets a single consent by ID.",
        "src": "web-gateway/app/consent/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/consent/:id"
        },
        "version": "1.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the consent"
          }
        },
        "apiSuccess": {
          "consent": {
            "type": "Object",
            "description": "",
            "children": {
              "tosVersionId": {
                "type": "Bigint",
                "description": "ID of the ToS version the action was taken upon"
              },
              "action": {
                "type": "String",
                "description": "Action taken",
                "values": "'accepted' | 'rejected' | 'pending'"
              },
              "organization": {
                "type": "Bigint",
                "optional": true,
                "description": "Organization for which the action was taken. Can be null for personal account consents."
              },
              "timestamp": {
                "type": "DateTime",
                "description": "Creation date of the consent"
              }
            }
          },
          "consents": {
            "type": "Object",
            "description": "",
            "children": {
              "createdBy": {
                "type": "Bigint",
                "description": "Account which has actually submitted the consent"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates a consent.",
        "src": "web-gateway/app/consent/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/consent"
        },
        "version": "1.0",
        "permissions": [
          "OrgAdmin",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account of the user for which the consent is intended. Will default to current user if missing."
          },
          "action": {
            "type": "String",
            "description": "Action given",
            "values": "'accepted' | 'rejected' | 'pending'"
          },
          "tosVersionId": {
            "type": "Bigint",
            "description": "ToS version ID the consent is created for"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization name. Can be null for personal account consents."
          }
        },
        "apiSuccess": {
          "consentId": {
            "type": "Bigint",
            "description": "ID for the new ToS consent record"
          }
        },
        "hasResponse": true
      }
    },
    "Consent-Tos": {
      "GetAll": {
        "description": "Gets all defined terms of service using specified filters.",
        "src": "web-gateway/app/consent/tos/route.ts",
        "api": {
          "method": "GET",
          "url": "/consent/tos"
        },
        "version": "1.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the ToS version"
          },
          "metaId": {
            "type": "Integer",
            "optional": true,
            "description": "ID of the ToS group"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization filter"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "ToS title filter"
          },
          "allowAnonymousAccess": {
            "type": "Boolean",
            "optional": true,
            "description": "ToS anonymous access filter"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object",
            "description": "",
            "children": {
              "content": {
                "type": "String",
                "description": "Content for the particular version of ToS"
              },
              "organizations": {
                "type": "Bigint[]",
                "description": "String array of organizations"
              },
              "version": {
                "type": "Integer",
                "description": "Business-oriented version number of ToS"
              },
              "createdAt": {
                "type": "DateTime",
                "description": "Creation date of the ToS version"
              }
            }
          },
          "meta": {
            "type": "Object",
            "description": "",
            "children": {
              "allowAnonymousAccess": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating whether the ToS should be accessible to anonymous/unauthenticated users"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Gets specified terms of service version by ID.",
        "src": "web-gateway/app/consent/tos/route.ts",
        "api": {
          "method": "GET",
          "url": "/consent/tos/:id"
        },
        "version": "1.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the ToS version"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the ToS version"
          },
          "meta": {
            "type": "ConsentTosMeta",
            "description": "ToS metadata group object",
            "children": {
              "id": {
                "type": "Integer",
                "description": "ToS group ID"
              },
              "title": {
                "type": "String",
                "description": "ToS title"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "ToS meta-description"
              },
              "allowAnonymousAccess": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating whether the ToS should be accessible to anonymous/unauthenticated users"
              }
            }
          },
          "content": {
            "type": "String",
            "description": "ToS content"
          },
          "organizations": {
            "type": "Bigint[]",
            "description": "String array of organizations"
          },
          "version": {
            "type": "Integer",
            "description": "Business-oriented version number of ToS"
          },
          "createdAt": {
            "type": "DateTime",
            "description": "Creation date of the ToS version"
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates a new ToS version.",
        "src": "web-gateway/app/consent/tos/route.ts",
        "api": {
          "method": "POST",
          "url": "/consent/tos"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "meta": {
            "type": "Object",
            "description": "Terms of Service metadata object",
            "children": {
              "id": {
                "type": "Integer",
                "optional": true,
                "description": "ToS ID. Can be null if a new ToS should be created. If it's not null, a new ToS version will be attached to existing ToS."
              },
              "title": {
                "type": "String",
                "optional": true,
                "description": "ToS title. Required to create a new ToS object. Can be skipped if using existing ToS ID."
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Meta-description."
              },
              "allowAnonymousAccess": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating whether the ToS should be viewable by anonymous/unauthenticated users. Required to create a new ToS object."
              }
            }
          },
          "content": {
            "type": "String",
            "description": "Content for this version of Terms of Service. Cannot be empty."
          },
          "version": {
            "type": "Number",
            "description": "Business-oriented version number of ToS."
          },
          "organizations": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Array of strings determining organizations. Can be null if ToS version should apply to everyone, including private accounts."
          }
        },
        "apiSuccess": {
          "tosVersionId": {
            "type": "Bigint",
            "description": "ID for the new ToS version record"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Content": {
    "Content": {
      "GetList": {
        "description": "Retrieves a list of content items at a specified tree level, or at the root. Lists multiple organizations by default. Only public items or items that have specific package associations will be listed. The enrollments will be fetched automatically.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/view"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to retrieve the content items for"
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether the content should be only retrieved for the most specific organization, or the whole hierarchy."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Query to search for in the item names and description"
          },
          "type": {
            "type": "Integer",
            "optional": true,
            "description": "Item type ID to filter by"
          },
          "mimeType": {
            "type": "String[]",
            "optional": true,
            "description": "A collection of MIME types to filter by. Only used when 'type' parameter indicates a file."
          },
          "parentId": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the parent item"
          },
          "sort": {
            "type": "ContentSort[]",
            "optional": true,
            "description": "A collection that determines how the result should be sorted",
            "children": {
              "property": {
                "type": "ContentSortProperty",
                "optional": true,
                "default": "name",
                "description": "A property to sort by",
                "values": "'name' | 'createdAt'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "ContentSingle[]",
            "description": "An array of content items",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Identifier of the content item"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp indicating when the item was created"
              },
              "name": {
                "type": "String",
                "description": "Content item name"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Extended description of the item"
              },
              "metadata": {
                "type": "Any",
                "optional": true,
                "description": "Type-specific metadata. Usually should contain mime type and URL for files, and content for embedded content."
              },
              "organization": {
                "type": "OrgRef",
                "description": "Organization to which the content item belongs",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "optional": true,
                    "description": "Organization name. While it usually shouldn't be missing, it might be if there is a data consistency issue between the gateway and the service."
                  }
                }
              },
              "parentId": {
                "type": "Bigint",
                "optional": true,
                "description": "Parent item ID. Will be missing for root-level items."
              },
              "type": {
                "type": "ContentType",
                "description": "Content item type",
                "children": {
                  "id": {
                    "type": "Integer",
                    "description": "Item type ID"
                  },
                  "code": {
                    "type": "String",
                    "description": "Unique item type code"
                  },
                  "description": {
                    "type": "String",
                    "description": "Extended item type description"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieves a list of content items at a specified tree level, or at the root. Lists multiple organizations by default.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/content"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to retrieve the content items for"
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether the content should be only retrieved for the most specific organization, or the whole hierarchy."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Query to search for in the item names and description"
          },
          "type": {
            "type": "Integer",
            "optional": true,
            "description": "Item type ID to filter by"
          },
          "mimeType": {
            "type": "String[]",
            "optional": true,
            "description": "A collection of MIME types to filter by. Only used when 'type' parameter indicates a file."
          },
          "parentId": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the parent item"
          },
          "sort": {
            "type": "ContentSort[]",
            "optional": true,
            "description": "A collection that determines how the result should be sorted",
            "children": {
              "property": {
                "type": "ContentSortProperty",
                "optional": true,
                "default": "name",
                "description": "A property to sort by",
                "values": "'name' | 'createdAt'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "ContentSingle[]",
            "description": "An array of content items",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Identifier of the content item"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp indicating when the item was created"
              },
              "name": {
                "type": "String",
                "description": "Content item name"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Extended description of the item"
              },
              "metadata": {
                "type": "Any",
                "optional": true,
                "description": "Type-specific metadata. Usually should contain mime type and URL for files, and content for embedded content."
              },
              "organization": {
                "type": "OrgRefOpt",
                "description": "Organization to which the content item belongs",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "optional": true,
                    "description": "Organization name. While it usually shouldn't be missing, it might be if there is a data consistency issue between the gateway and the service."
                  }
                }
              },
              "parentId": {
                "type": "Bigint",
                "optional": true,
                "description": "Parent item ID. Will be missing for root-level items."
              },
              "type": {
                "type": "ContentType",
                "description": "Content item type",
                "children": {
                  "id": {
                    "type": "Integer",
                    "description": "Item type ID"
                  },
                  "code": {
                    "type": "String",
                    "description": "Unique item type code"
                  },
                  "description": {
                    "type": "String",
                    "description": "Extended item type description"
                  },
                  "hasPackageAssociations": {
                    "type": "Boolean",
                    "description": "True if the item has package associations"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves a single content item with a specific ID",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the item to retrieve"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Identifier of the content item"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Timestamp indicating when the item was created"
          },
          "name": {
            "type": "String",
            "description": "Content item name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Extended description of the item"
          },
          "metadata": {
            "type": "Any",
            "optional": true,
            "description": "Type-specific metadata. Usually should contain mime type and URL for files, and content for embedded content."
          },
          "organization": {
            "type": "OrgRefOpt",
            "description": "Organization to which the content item belongs",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              },
              "name": {
                "type": "String",
                "optional": true,
                "description": "Organization name. While it usually shouldn't be missing, it might be if there is a data consistency issue between the gateway and the service."
              }
            }
          },
          "parentId": {
            "type": "Bigint",
            "optional": true,
            "description": "Parent item ID. Will be missing for root-level items."
          },
          "type": {
            "type": "ContentType",
            "description": "Content item type",
            "children": {
              "id": {
                "type": "Integer",
                "description": "Item type ID"
              },
              "code": {
                "type": "String",
                "description": "Unique item type code"
              },
              "description": {
                "type": "String",
                "description": "Extended item type description"
              }
            }
          },
          "hasPackageAssociations": {
            "type": "Boolean",
            "description": "True if the item has package associations"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Deletes the content item with a specific ID. If the content item has child items, all of them will be recursively deleted too.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the item to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Creates a new content item for a specified organization at a given level in the content tree.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "parentId": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the parent content item"
          },
          "name": {
            "type": "String",
            "description": "Item name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Extended item description"
          },
          "type": {
            "type": "Integer",
            "description": "ID of the content type"
          },
          "isPublic": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether the content item is publicly available for viewing"
          },
          "metadata": {
            "type": "Any",
            "optional": true,
            "description": "Type-specific metadata"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the created content item"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates existing content item.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/content/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the content item to update"
          },
          "parentId": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the parent content item. Can be set to 'null' to move item to the root content tree level."
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Item name"
          },
          "isPublic": {
            "type": "Boolean",
            "optional": true,
            "description": "A flag indicating whether the content item is publicly available for viewing"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Extended item description"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetUploadUrl": {
        "description": "Generates a signed URL that is valid for 15 minutes to upload a file to S3 directly.",
        "src": "web-gateway/app/content/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/upload"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "filename": {
            "type": "String",
            "description": "Full filename, with extension, of the uploaded file"
          }
        },
        "apiSuccess": {
          "url": {
            "type": "String",
            "description": "URL to upload the file to"
          },
          "key": {
            "type": "String",
            "description": "Key of the item being uploaded."
          },
          "mimeType": {
            "type": "String",
            "description": "MIME type of the file to upload",
            "default": "application/octet-stream'"
          }
        }
      },
      "GetTypes": {
        "description": "Retrieves a list of content item types.",
        "src": "web-gateway/app/content/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/type"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiSuccess": {
          "data": {
            "type": "ContentType[]",
            "description": "An array of content item types",
            "children": {
              "id": {
                "type": "Integer",
                "description": "Item type ID"
              },
              "code": {
                "type": "String",
                "description": "Unique item type code"
              },
              "description": {
                "type": "String",
                "description": "Extended item type description"
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Content-Package": {
      "GetAll": {
        "description": "Retrieves a list of packages associated with a given content item.",
        "src": "web-gateway/app/content/package/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/:id/package"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Content item ID"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Entity[]",
            "description": "An array of packages",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the package"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Deletes the association between an item and a package.",
        "src": "web-gateway/app/content/package/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/:id/package/:package"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the item"
          },
          "package": {
            "type": "Bigint",
            "description": "ID of the package"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Creates a new association between a content item an a package.",
        "src": "web-gateway/app/content/package/route.ts",
        "api": {
          "method": "PUT",
          "url": "/content/:id/package/:package"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Content item ID"
          },
          "package": {
            "type": "Bigint",
            "description": "ID of the package"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Content-Preference": {
      "GetSingle": {
        "description": "Retrieves the most appropriate preference entry for specified hierarchy.",
        "src": "web-gateway/app/content/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/preference"
        },
        "version": "1.0",
        "permissions": [
          "Client",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to look hierarchy for"
          }
        },
        "apiSuccess": {
          "organization": {
            "type": "Entity",
            "description": "Organization entry",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              }
            }
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating if the preference entry is active or not."
          }
        },
        "hasResponse": true
      },
      "Upsert": {
        "description": "Creates or updates a preference entry for a specified organization",
        "src": "web-gateway/app/content/preference/route.ts",
        "api": {
          "method": "PUT",
          "url": "/content/preference/:organization"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating if the section should be enabled or disabled for an organization"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a preference entry for a specified organization",
        "src": "web-gateway/app/content/preference/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/preference/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Form": {
    "Form-Addendum": {
      "Create": {
        "description": "Creates a new addendum",
        "src": "web-gateway/app/content/form/addendum/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form/addendum"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAssociation"
        ],
        "apiParam": {
          "submission": {
            "type": "Bigint",
            "description": "submission id"
          },
          "content": {
            "type": "String",
            "description": "Addendum text content"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Addendum ID"
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves a single addendum with a specific ID",
        "src": "web-gateway/app/content/form/addendum/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/addendum/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the addendum to retrieve"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Addendum ID"
          },
          "form": {
            "type": "FormRefNamed",
            "description": "Form",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Form ID"
              },
              "name": {
                "type": "String",
                "description": "Form name"
              },
              "organization": {
                "type": "Bigint",
                "description": "Form ID"
              }
            }
          },
          "submission": {
            "type": "FormSubmissionRef",
            "description": "Submission",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Submission ID"
              },
              "account": {
                "type": "Entity",
                "description": "Submission account",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  }
                }
              }
            }
          },
          "account": {
            "type": "Entity",
            "description": "Account",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              }
            }
          },
          "content": {
            "type": "String",
            "description": "Addendum text content"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Timestamp indicating when the addendum was created"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieves paged addendums collection for a form",
        "src": "web-gateway/app/content/form/addendum/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/addendum"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAssociation"
        ],
        "apiParam": {
          "submission": {
            "type": "Bigint",
            "description": "ID of the submission that addendums should be taken for"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormAddendumSingle[]",
            "description": "An array of addendum",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Addendum ID"
              },
              "form": {
                "type": "FormRefNamed",
                "description": "Form",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Form ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Form name"
                  },
                  "organization": {
                    "type": "Bigint",
                    "description": "Form ID"
                  }
                }
              },
              "account": {
                "type": "Entity",
                "description": "Account",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  }
                }
              },
              "content": {
                "type": "String",
                "description": "Addendum text content"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp indicating when the addendum was created"
              },
              "submission": {
                "type": "FormSubmissionRef",
                "description": "Submission",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Submission ID"
                  },
                  "account": {
                    "type": "Entity",
                    "description": "Submission account",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Account ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Form": {
      "Create": {
        "description": "Creates a form",
        "src": "web-gateway/app/content/form/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "description": "Form name"
          },
          "organization": {
            "type": "Bigint",
            "description": "The organization ID for which the form is being created"
          },
          "allowAddendum": {
            "type": "Boolean",
            "description": "A flag indicating if the form allows adding addendums"
          },
          "maximumSubmissions": {
            "type": "Number",
            "optional": true,
            "description": "Maximum allowed submissions for a form."
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "A flag indicating if the form is active"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Form ID"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieves a list of available forms.",
        "src": "web-gateway/app/content/form/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form"
        },
        "version": "1.0",
        "permissions": [
          "OrgAssociation"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to retrieve the content items for"
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating if we should only check for the most specific organization, or the whole hierarchy. Defaults to `false` - whole hierarchy is checked."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "A form name filter"
          },
          "status": {
            "type": "ActiveStatus",
            "optional": true,
            "default": "active",
            "description": "A status of the form items to include",
            "values": "'all' | 'active' | 'inactive'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormSingle[]",
            "description": "An array of forms",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Form ID"
              },
              "name": {
                "type": "String",
                "description": "Form name"
              },
              "organization": {
                "type": "OrgRef",
                "description": "Organization to which the form belongs",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "optional": true,
                    "description": "Organization name. While it usually shouldn't be missing, it might be if there is a data consistency issue between the gateway and the service."
                  }
                }
              },
              "maximumSubmissions": {
                "type": "Number",
                "optional": true,
                "description": "Maximum allowed submissions for a form."
              },
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating if the form is active"
              },
              "allowAddendum": {
                "type": "Boolean",
                "description": "A flag indicating if the form allows adding addendums"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves a single form",
        "src": "web-gateway/app/content/form/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/:id"
        },
        "version": "1.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Form ID"
          },
          "full": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether to include full form data, including sections & questions."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Form ID"
          },
          "name": {
            "type": "String",
            "description": "Form name"
          },
          "organization": {
            "type": "OrgRef",
            "description": "Organization to which the form belongs",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              },
              "name": {
                "type": "String",
                "optional": true,
                "description": "Organization name. While it usually shouldn't be missing, it might be if there is a data consistency issue between the gateway and the service."
              }
            }
          },
          "maximumSubmissions": {
            "type": "Number",
            "optional": true,
            "description": "Maximum allowed submissions for a form."
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating if the form is active"
          },
          "allowAddendum": {
            "type": "Boolean",
            "description": "A flag indicating if the form allows adding addendums"
          },
          "sections": {
            "type": "FormSectionRef[]",
            "optional": true,
            "description": "Form sections. Only included if `full=true`. Inner collections, including this one, are already sorted by their sort order.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Section ID"
              },
              "title": {
                "type": "String",
                "description": "Section title"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Additional description"
              },
              "sortOrder": {
                "type": "Number",
                "description": "Sort order of the section on the form"
              },
              "questions": {
                "type": "FormQuestionData[]",
                "optional": true,
                "description": "Form questions.",
                "children": {
                  "questionType": {
                    "type": "FormQuestionTypeRef",
                    "description": "Question type",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Question type id"
                      },
                      "name": {
                        "type": "Bigint",
                        "description": "Question type name"
                      },
                      "description": {
                        "type": "Bigint",
                        "description": "Extra description"
                      }
                    }
                  },
                  "title": {
                    "type": "String",
                    "description": "Question title"
                  },
                  "description": {
                    "type": "String",
                    "optional": true,
                    "description": "Question description"
                  },
                  "sortOrder": {
                    "type": "Integer",
                    "description": "Order number of question within section"
                  },
                  "isRequired": {
                    "type": "Boolean",
                    "description": "Indicates wether question should be required to be answered or not"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates a form",
        "src": "web-gateway/app/content/form/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/content/form/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the form to retrieve"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Form name"
          },
          "allowAddendum": {
            "type": "Boolean",
            "optional": true,
            "description": "A flag indicating if the form allows adding addendums"
          },
          "maximumSubmissions": {
            "type": "Number",
            "optional": true,
            "description": "Maximum allowed submissions for a form. Can be set to `null` to clear the value."
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "A flag indicating if the form is active"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a form",
        "src": "web-gateway/app/content/form/core/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/form/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the form to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Form-QuestionType": {
      "Create": {
        "description": "Creates a question type",
        "src": "web-gateway/app/content/form/question-type/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form/question-type"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Question type id"
          },
          "name": {
            "type": "String",
            "description": "Question type name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Question type description"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "A flag indicating if the question type is active"
          },
          "requiresValueList": {
            "type": "Boolean",
            "description": "A flag indicating whether the question should require a list of values to be provided."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Question type ID"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates a question type",
        "src": "web-gateway/app/content/form/question-type/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/content/form/question-type/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the question type to retrieve"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Question type name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Question type description"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "A flag indicating if the question type is active"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetAll": {
        "description": "Retrieves a list of available question types.",
        "src": "web-gateway/app/content/form/question-type/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/question-type"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin"
        ],
        "apiParam": {
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter by question type name or description"
          },
          "status": {
            "type": "ActiveStatus",
            "optional": true,
            "default": "active",
            "description": "A status of the question type items to include",
            "values": "'all' | 'active' | 'inactive'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormQuestionTypeSingle[]",
            "description": "An array of question types",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Question type ID"
              },
              "name": {
                "type": "String",
                "description": "Question type name"
              },
              "description": {
                "type": "String",
                "description": "Question type description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating if the question type is active"
              },
              "requiresValueList": {
                "type": "Boolean",
                "description": "A flag indicating whether the question should require a list of values to be provided."
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves a single question type",
        "src": "web-gateway/app/content/form/question-type/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/question-type/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the question type to retrieve"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Question type ID"
          },
          "name": {
            "type": "String",
            "description": "Question type name"
          },
          "description": {
            "type": "String",
            "description": "Question type description"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating if the question type is active"
          },
          "requiresValueList": {
            "type": "Boolean",
            "description": "A flag indicating whether the question should require a list of values to be provided."
          }
        },
        "hasResponse": true
      }
    },
    "Form-Question": {
      "Create": {
        "description": "Creates a new question",
        "src": "web-gateway/app/content/form/question/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form/question"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "section": {
            "type": "Bigint",
            "description": "Section id"
          },
          "questionType": {
            "type": "Bigint",
            "description": "Question type id"
          },
          "title": {
            "type": "String",
            "description": "Question title"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Question description"
          },
          "sortOrder": {
            "type": "Integer",
            "description": "Order number of question within section. Questions with equal or greater order number than given are pushed down - order number is increased"
          },
          "isRequired": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "Indicates wether question should be answered or not"
          },
          "allowedValues": {
            "type": "String[]",
            "optional": true,
            "description": "A collection of allowed responses to the question"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Question ID"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieves all questions for form section as collection",
        "src": "web-gateway/app/content/form/question/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/question"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAssociation"
        ],
        "apiParam": {
          "section": {
            "type": "String",
            "description": "Id of form section"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormQuestionSingle[]",
            "description": "An array of questions",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Question ID"
              },
              "section": {
                "type": "Entity",
                "description": "Form section of question",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Section id"
                  }
                }
              },
              "questionType": {
                "type": "Entity",
                "description": "Type of a question",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Question type id"
                  }
                }
              },
              "title": {
                "type": "String",
                "description": "Question title"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Question description"
              },
              "sortOrder": {
                "type": "Integer",
                "description": "Order number of question within section"
              },
              "isRequired": {
                "type": "Boolean",
                "description": "Indicates wether question should be answered or not"
              },
              "allowedValues": {
                "type": "String[]",
                "optional": true,
                "description": "A collection of allowed responses to the question"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves a single question with a specific ID",
        "src": "web-gateway/app/content/form/question/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/question/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the question to retrieve"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Question ID"
          },
          "section": {
            "type": "Entity",
            "description": "Form section of question",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Section id"
              }
            }
          },
          "questionType": {
            "type": "Entity",
            "description": "Type of a question",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Question type id"
              }
            }
          },
          "form": {
            "type": "FormRef",
            "optional": true,
            "description": "A form that the question belongs to",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Form ID"
              },
              "organization": {
                "type": "Bigint",
                "description": "Organization ID to which the form is attached"
              }
            }
          },
          "title": {
            "type": "String",
            "description": "Question title"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Question description"
          },
          "sortOrder": {
            "type": "Integer",
            "description": "Order number of question within section"
          },
          "isRequired": {
            "type": "Boolean",
            "description": "Indicates wether question should be answered or not"
          },
          "allowedValues": {
            "type": "String[]",
            "optional": true,
            "description": "A collection of allowed responses to the question"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates a question with a specific ID",
        "src": "web-gateway/app/content/form/question/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/content/form/question/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Question id"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "Order number of question within section. Questions with equal or greater order number than given are pushed down - order number is increased"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a question with a specific ID",
        "src": "web-gateway/app/content/form/question/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/form/question/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the question to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Form-Section": {
      "GetAll": {
        "description": "Retrieves all sections related to the form",
        "src": "web-gateway/app/content/form/section/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/section"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAssociation"
        ],
        "apiParam": {
          "form": {
            "type": "Bigint",
            "description": "Form id"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormSectionSingle[]",
            "description": "An array of sections",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Section ID"
              },
              "title": {
                "type": "String",
                "description": "Section title"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Additional description"
              },
              "sortOrder": {
                "type": "Number",
                "description": "Sort order of the section on the form"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieves single section",
        "src": "web-gateway/app/content/form/section/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/section/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Section ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The section ID"
          },
          "title": {
            "type": "String",
            "description": "Section title"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Additional description"
          },
          "sortOrder": {
            "type": "Number",
            "description": "Sort order of the section on the form"
          },
          "form": {
            "type": "FormRef",
            "optional": true,
            "description": "A form that the section belongs to",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "A form ID"
              },
              "organization": {
                "type": "Bigint",
                "description": "An organization (ID) of the form this section is related to"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates a new section",
        "src": "web-gateway/app/content/form/section/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form/section"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "form": {
            "type": "Bigint",
            "description": "A form (ID) for which the section belongs to"
          },
          "title": {
            "type": "String",
            "description": "Section title"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Additional description"
          },
          "sortOrder": {
            "type": "Number",
            "description": "Sort order of the sections on the form (Sections with equal or greater order number are pushed down - order number is increased)"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Section ID"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates a section with a specific ID",
        "src": "web-gateway/app/content/form/section/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/content/form/section/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the section to update"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "Section title"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Additional description. Will clear the description if it's set to `null`."
          },
          "sortOrder": {
            "type": "Number",
            "optional": true,
            "description": "Sort order of the section on the form (Sections with equal or greater order number than given are pushed down - order number is increased)"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a section with a specific ID",
        "src": "web-gateway/app/content/form/section/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/content/form/section/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the section to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Form-Submission": {
      "GetAll": {
        "description": "Gets all form submissions for specified account & organization hierarchy.",
        "src": "web-gateway/app/content/form/submission/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/submission"
        },
        "version": "1.0",
        "permissions": [
          "Client",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "form": {
            "type": "Bigint",
            "optional": true,
            "description": "Form ID to filter by"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account ID"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FormSubmissionSegment[]",
            "description": "Submission data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Submission ID"
              },
              "form": {
                "type": "FormRefNamed",
                "description": "A form that the submission is related to",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Form ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Form name"
                  },
                  "organization": {
                    "type": "Bigint",
                    "description": "Organization ID to which the form is attached"
                  }
                }
              },
              "account": {
                "type": "AccountEntity",
                "description": "An account for which the submission is intended for",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "Account first name"
                  },
                  "lastName": {
                    "type": "String",
                    "optional": true,
                    "description": "Account last name"
                  }
                }
              },
              "submittedBy": {
                "type": "AccountEntity",
                "description": "An account which submitted the form",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "Account first name"
                  },
                  "lastName": {
                    "type": "String",
                    "optional": true,
                    "description": "Account last name"
                  }
                }
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Creation timestamp"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Gets a single form submission with all answers included in the response.",
        "src": "web-gateway/app/content/form/submission/route.ts",
        "api": {
          "method": "GET",
          "url": "/content/form/submission/:id"
        },
        "version": "1.0",
        "permissions": [
          "Client",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A submission id"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Submission ID"
          },
          "form": {
            "type": "FormRefNamed",
            "description": "A form that the submission is related to",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Form ID"
              },
              "name": {
                "type": "String",
                "description": "Form name"
              },
              "organization": {
                "type": "Bigint",
                "description": "Organization ID to which the form is attached"
              }
            }
          },
          "account": {
            "type": "AccountEntity",
            "description": "An account for which the submission is intended for",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "firstName": {
                "type": "String",
                "optional": true,
                "description": "Account first name"
              },
              "lastName": {
                "type": "String",
                "optional": true,
                "description": "Account last name"
              }
            }
          },
          "submittedBy": {
            "type": "AccountEntity",
            "description": "An account which submitted the form",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "firstName": {
                "type": "String",
                "optional": true,
                "description": "Account first name"
              },
              "lastName": {
                "type": "String",
                "optional": true,
                "description": "Account last name"
              }
            }
          },
          "answers": {
            "type": "FormAnswer[]",
            "description": "Answers to form questions",
            "children": {
              "question": {
                "type": "Bigint",
                "description": "Question ID"
              },
              "response": {
                "type": "Object",
                "description": "Response to the question",
                "children": {
                  "value": {
                    "type": "Any",
                    "description": "Response value"
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Creation timestamp"
          },
          "addendums": {
            "type": "FormAddendumRef[]",
            "description": "Addendum collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Addendum ID"
              },
              "account": {
                "type": "Entity",
                "description": "Account",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  }
                }
              },
              "content": {
                "type": "String",
                "description": "Addendum text content"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp indicating when the addendum was created"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates a new form submission",
        "src": "web-gateway/app/content/form/submission/route.ts",
        "api": {
          "method": "POST",
          "url": "/content/form/submission"
        },
        "version": "1.0",
        "permissions": [
          "Client",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "form": {
            "type": "Bigint",
            "description": "A form (ID) for which the submission is being created"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "An account for which the submission is intended for. Optional for Client requests, otherwise required"
          },
          "submittedBy": {
            "type": "Bigint",
            "description": "An account which is submitting the form"
          },
          "answers": {
            "type": "FormAnswer[]",
            "description": "Answers to form questions",
            "children": {
              "question": {
                "type": "Bigint",
                "description": "Question ID"
              },
              "response": {
                "type": "Object",
                "description": "Response to the question",
                "children": {
                  "value": {
                    "type": "Any",
                    "description": "Response value."
                  }
                }
              }
            }
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Submission ID"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Countries": {
    "Countries": {
      "GetAll": {
        "description": "Retrieves a paginated list of countries.",
        "src": "web-gateway/app/country/route.ts",
        "api": {
          "method": "GET",
          "url": "/country"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "query": {
            "type": "String",
            "optional": true,
            "description": "Query to filter by"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Country[]",
            "description": "Country collection",
            "children": {
              "id": {
                "type": "String",
                "description": "Country ID"
              },
              "name": {
                "type": "String",
                "description": "Country name"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        }
      }
    }
  },
  "Feedback": {
    "Feedback": {
      "Send": {
        "description": "Creates a feedback ticket from a client in Zendesk",
        "src": "web-gateway/app/feedback/route.ts",
        "api": {
          "method": "POST",
          "url": "/feedback"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "description": {
            "type": "String",
            "description": "Description of the ticket"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "Title of the ticket"
          },
          "images": {
            "type": "ImageAttachment[]",
            "optional": true,
            "description": "Image attachements",
            "children": {
              "name": {
                "type": "String",
                "description": "Name of the image"
              },
              "base64": {
                "type": "String",
                "description": "Base64 encoded value of the image"
              }
            }
          },
          "rating": {
            "type": "Integer",
            "optional": true,
            "description": "User rating"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "String",
            "description": "ID of the created Zendesk ticket"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Food": {
    "Food-Consumed": {
      "GetAll": {
        "description": "Fetch all consumed entries, ordered in consumedAt descending order. Clients are only able to retrieve consumed meals associated with their account.\nProviders can only fetch for their clients. This endpoint returns paginated results.",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/consumed"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "ID of the account being searched for"
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter by the name of the meal"
          },
          "type": {
            "type": "Integer",
            "optional": true,
            "description": "Fetch by consumed meal type id"
          },
          "start": {
            "type": "Timestamp",
            "optional": true,
            "description": "Filters the result by consumedAt started from this timestamp"
          },
          "end": {
            "type": "Timestamp",
            "optional": true,
            "description": "Filters the result by consumedAt finished before this timestamp"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of meals to offset from beginning of query"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FoodConsumedSingle[]",
            "description": "Array of consumed meal",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the consumed record"
              },
              "account": {
                "type": "Entity",
                "description": "The account that created this consumed record",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the account"
                  }
                }
              },
              "consumedAt": {
                "type": "Timestamp",
                "description": "The timestamp this meal was consumed"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp of when the consumed record was created"
              },
              "type": {
                "type": "NamedEntity",
                "description": "The type of the consumed meal",
                "children": {
                  "id": {
                    "type": "Integer",
                    "description": "The id of the type of the consumed meal"
                  },
                  "name": {
                    "type": "String",
                    "description": "Name of the type of the consumed meal"
                  }
                }
              },
              "serving": {
                "type": "Float",
                "description": "The number of servings of this meal that were consumed"
              },
              "note": {
                "type": "String",
                "optional": true,
                "description": "The note of the consumed meal"
              },
              "isFavorite": {
                "type": "Boolean",
                "description": "Shows if user has favorited this meal"
              },
              "meal": {
                "type": "FoodMealItem",
                "description": "The meal that was consumed",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the meal that was consumed"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of the meal record"
                  },
                  "imageUrl": {
                    "type": "String",
                    "optional": true,
                    "description": "The image url of the meal"
                  }
                }
              },
              "summary": {
                "type": "FoodConsumedSummary",
                "optional": true,
                "description": "The summary of nutrients of consumed meal",
                "children": {
                  "availableCarbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of available carbohydrates in a consumed entry (mg)"
                  },
                  "calcium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calcium in a consumed entry (mg)"
                  },
                  "calorie": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calories in a consumed entry (mg)"
                  },
                  "carbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of carbohydrates in a consumed entry (mg)"
                  },
                  "cholesterol": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of cholesterol in a consumed entry (mg)"
                  },
                  "fiber": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of fiber in a consumed entry (mg)"
                  },
                  "iron": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of iron in a consumed entry (mg)"
                  },
                  "monounsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of monounsaturated fat in a consumed entry (mg)"
                  },
                  "polyunsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of polyunsaturated fat in a consumed entry (mg)"
                  },
                  "potassium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of potassium in a consumed entry (mg)"
                  },
                  "protein": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of protein in a consumed entry (mg)"
                  },
                  "saturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of saturated fat in a consumed entry (mg)"
                  },
                  "sodium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sodium in a consumed entry (mg)"
                  },
                  "sugar": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sugar in a consumed entry (mg)"
                  },
                  "totalFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of total fat in a consumed entry (mg)"
                  },
                  "transFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of trans fat in a consumed entry (mg)"
                  },
                  "vitaminA": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin A in a consumed entry (mg)"
                  },
                  "vitaminB": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin B in a consumed entry (mg)"
                  },
                  "vitaminC": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin C in a consumed entry (mg)"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetFrequent": {
        "description": "Fetch all frequently consumed meals in their consumption count descending order. Clients are only able to retrieve consumed meals associated with their account.\nProviders can only fetch for their clients. This endpoint returns paginated results.",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/consumed/frequent"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "ID of the account being searched for"
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter by the name of the meal"
          },
          "start": {
            "type": "Timestamp",
            "optional": true,
            "description": "Filters the result by consumedAt started from this timestamp"
          },
          "end": {
            "type": "Timestamp",
            "optional": true,
            "description": "Filters the result by consumedAt finished before this timestamp"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of meals to offset from beginning of query"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FoodConsumedFrequently[]",
            "description": "Array of consumed meal",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the meal record"
              },
              "name": {
                "type": "String",
                "description": "The name of the meal record"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp of when the meal was created"
              },
              "imageUrl": {
                "type": "String",
                "optional": true,
                "description": "The image url of the meal"
              },
              "isPublic": {
                "type": "Boolean",
                "description": "Flag showing if meal is public (does not have associated account)"
              },
              "account": {
                "type": "Entity",
                "optional": true,
                "description": "Account associated with this meal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the account"
                  }
                }
              },
              "consumption": {
                "type": "FoodMealConsumption",
                "description": "Consumption information. This is calculated between specific start & end dates, if there are any bounds provided.",
                "children": {
                  "count": {
                    "type": "Number",
                    "description": "Number of times the meal was consumed."
                  },
                  "percentage": {
                    "type": "Number",
                    "description": "A percentage (rounded to 2 decimal places) which indicates what part of total meal consumption count this meal is."
                  }
                }
              },
              "summary": {
                "type": "FoodFrequentSummary",
                "description": "Aggregation of nutrition values for the whole meal",
                "children": {
                  "availableCarbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of available carbohydrates in a meal (mg)"
                  },
                  "calcium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calcium in a meal (mg)"
                  },
                  "calorie": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calories in a meal (mg)"
                  },
                  "carbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of carbohydrates in a meal (mg)"
                  },
                  "cholesterol": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of cholesterol in a meal (mg)"
                  },
                  "fiber": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of fiber in a meal (mg)"
                  },
                  "iron": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of iron in a meal (mg)"
                  },
                  "monounsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of monounsaturated fat in a meal (mg)"
                  },
                  "polyunsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of polyunsaturated fat in a meal (mg)"
                  },
                  "potassium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of potassium in a meal (mg)"
                  },
                  "protein": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of protein in a meal (mg)"
                  },
                  "saturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of saturated fat in a meal (mg)"
                  },
                  "sodium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sodium in a meal (mg)"
                  },
                  "sugar": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sugar in a meal (mg)"
                  },
                  "totalFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of total fat in a meal (mg)"
                  },
                  "transFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of trans fat in a meal (mg)"
                  },
                  "vitaminA": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin A in a meal (mg)"
                  },
                  "vitaminB": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin B in a meal (mg)"
                  },
                  "vitaminC": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin C in a meal (mg)"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch Single Consumed Meal. Clients can only fetch their own meals and providers can only fetch the meals of their clients",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/consumed/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The consumed id, Passed as last URI parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of the consumed record"
          },
          "account": {
            "type": "Entity",
            "description": "The account that created this consumed record",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the account"
              }
            }
          },
          "consumedAt": {
            "type": "Timestamp",
            "description": "The timestamp this meal was consumed"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "The timestamp of when the consumed record was created"
          },
          "type": {
            "type": "NamedEntity",
            "description": "The type of the consumed meal",
            "children": {
              "id": {
                "type": "Integer",
                "description": "ID of the type of the consumed meal"
              },
              "name": {
                "type": "String",
                "description": "Name of the type of the consumed meal"
              }
            }
          },
          "serving": {
            "type": "Float",
            "description": "The number of servings of this meal that were consumed"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "The note of the consumed meal"
          },
          "isFavorite": {
            "type": "Boolean",
            "description": "Shows if user has favorited this meal"
          },
          "meal": {
            "type": "FoodMealItem",
            "description": "The meal that was consumed",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the meal that was consumed"
              },
              "name": {
                "type": "String",
                "description": "The name of the meal record"
              },
              "imageUrl": {
                "type": "String",
                "optional": true,
                "description": "The image url of the meal"
              }
            }
          },
          "summary": {
            "type": "FoodConsumedSummary",
            "description": "The summary of nutrients of consumed meal",
            "children": {
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a consumed entry (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a consumed entry (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a consumed entry (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a consumed entry (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a consumed entry (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a consumed entry (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a consumed entry (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a consumed entry (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a consumed entry (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a consumed entry (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a consumed entry (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a consumed entry (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a consumed entry (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a consumed entry (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a consumed entry (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a consumed entry (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a consumed entry (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a consumed entry (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a consumed entry (mg)"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add Consumed Meal.",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/consumed"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The id of the account that is adding the meal. Clients accounts will be automatically passed and providers can only pass accounts that they have access to"
          },
          "type": {
            "type": "Integer",
            "description": "The id of the type of consumed meal"
          },
          "serving": {
            "type": "Float",
            "description": "The number of servings of this meal consumed"
          },
          "consumedAt": {
            "type": "Timestamp",
            "description": "Timestamp the meal was consumed"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "The note for the consumed meal"
          },
          "meal": {
            "type": "Bigint",
            "description": "The id of the meal that was consumed."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of the newly-created consumed meal record"
          }
        }
      },
      "Add": {
        "description": "Add a consumed meal with custom meal",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/consumed/new"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The id of the account that is adding the meal. Clients accounts will be automatically passed and providers can only pass accounts that they have access to"
          },
          "type": {
            "type": "Integer",
            "description": "The ID of the type of consumed meal"
          },
          "serving": {
            "type": "Float",
            "description": "The number of servings of this meal consumed"
          },
          "consumedAt": {
            "type": "Timestamp",
            "description": "Timestamp the meal was consumed"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "The note for the consumed meal"
          },
          "meal": {
            "type": "Object",
            "description": "The meal that was consumed.",
            "children": {
              "name": {
                "type": "String",
                "description": "The name of the meal that is being added"
              },
              "imageUrl": {
                "type": "String",
                "optional": true,
                "description": "The url of the image associated with this meal"
              },
              "servings": {
                "type": "Object[]",
                "optional": true,
                "description": "The array of meal serving",
                "children": {
                  "id": {
                    "type": "String",
                    "description": "Serving ID. If ingredient.isLocal is true, this must be the local serving ID. Otherwise it should be a remote serving ID."
                  },
                  "quantity": {
                    "type": "Integer",
                    "optional": true,
                    "default": "1",
                    "description": "A quantity of serving"
                  },
                  "ingredient": {
                    "type": "Object",
                    "description": "The ingredient that is being added to this meal.",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The id of the ingredient being added."
                      },
                      "isLocal": {
                        "type": "Boolean",
                        "description": "Flag saying if ingredient is local or remote"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "apiSuccess": {
          "consumed": {
            "type": "Entity",
            "description": "The newly created consumed meal record",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the consumed meal record"
              }
            }
          },
          "meal": {
            "type": "Entity",
            "description": "The newly created meal record",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the meal record"
              }
            }
          }
        }
      },
      "Delete": {
        "description": "Delete Consumed. Clients can only delete meals they consumed and providers can only delete meals consumed by one of their clients",
        "src": "web-gateway/app/food/consumed/core/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/consumed/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meal that is being deleted. Passed as the last URI parameter"
          }
        }
      },
      "GetTypes": {
        "description": "Fetch all consumed Types.",
        "src": "web-gateway/app/food/consumed/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/consumed/type"
        },
        "version": "1.0",
        "apiSuccess": {
          "data": {
            "type": "DescribedEntity[]",
            "description": "The type of consumed meal",
            "children": {
              "id": {
                "type": "Integer",
                "description": "ID of the type of consumed meal"
              },
              "description": {
                "type": "String",
                "description": "Description of the type of consumed meal"
              }
            }
          }
        }
      }
    },
    "Food": {
      "GetAll": {
        "description": "Fetch all food items from remote source.",
        "src": "web-gateway/app/food/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food"
        },
        "version": "2.0",
        "apiParam": {
          "query": {
            "type": "String",
            "description": "The search query for the ingredient being searched for"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of records to offset"
          },
          "limit": {
            "type": "Integer",
            "optional": true,
            "default": "25",
            "description": "Number of records per page. Cannot exceed 50. 'all' is not supported, since it exceeds 50."
          },
          "region": {
            "type": "FoodRegion",
            "optional": true,
            "description": "Region to search the products in. A list of all supported regions is also available via GET /food/region.",
            "values": "'US' | 'CA' | 'IL' | 'AU' | 'SA'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FoodItem[]",
            "description": "Data collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Remote food item (ingredient) ID"
              },
              "name": {
                "type": "String",
                "description": "Food item name"
              },
              "description": {
                "type": "String",
                "description": "Food item description"
              },
              "brand": {
                "type": "String",
                "optional": true,
                "description": "Brand name"
              },
              "url": {
                "type": "String",
                "optional": true,
                "description": "URL of the food item"
              },
              "type": {
                "type": "FoodType",
                "description": "Type of the food item",
                "values": "'branded' | 'common'"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        }
      },
      "GetRegions": {
        "description": "Fetch all regions that the remote food & ingredient lookup supports",
        "src": "web-gateway/app/food/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/region"
        },
        "version": "2.0",
        "apiSuccess": {
          "data": {
            "type": "String[]",
            "description": "Region name collection"
          }
        }
      }
    },
    "Food-Favorite": {
      "GetAll": {
        "description": "Fetch Favorite Meal. Clients account is added automatically. Providers can only fetch favorite meals for their own clients.",
        "src": "web-gateway/app/food/favorite/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/favorite"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account of the user who has favorite meals to search for. Optional for Client requests, otherwise required"
          },
          "filter": {
            "type": "String",
            "optional": true,
            "description": "Filter by the name of the meal"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of records to offset"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Number of records per page. Can either be \"all\" (a string) or a number"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FoodFavoriteItem[]",
            "description": "Favorite items",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the favorite record"
              },
              "meal": {
                "type": "Object",
                "description": "The meal object record",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the meal record"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of the meal record"
                  },
                  "isPublic": {
                    "type": "Boolean",
                    "description": "The boolean value if the meal is a public meal or not"
                  },
                  "imageUrl": {
                    "type": "String",
                    "description": "The url of the image associated with this meal"
                  }
                }
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp when the favorite entry was created"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single favorite meal",
        "src": "web-gateway/app/food/favorite/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/favorite/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Favorite entry ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Favorite entry ID"
          },
          "meal": {
            "type": "Object",
            "description": "Meal entry",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Meal ID"
              },
              "name": {
                "type": "String",
                "description": "Meal name"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp of when the meal was created"
              },
              "isPublic": {
                "type": "Boolean",
                "description": "The boolean value if the meal is a public meal or not"
              },
              "imageUrl": {
                "type": "String",
                "description": "The url of the image associated with this meal"
              },
              "summary": {
                "type": "FoodFavoriteSummary",
                "description": "Aggregation of nutrition values for the whole meal",
                "children": {
                  "calcium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calcium in a meal (mg)"
                  },
                  "calorie": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calories in a meal (mg)"
                  },
                  "carbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of carbohydrates in a meal (mg)"
                  },
                  "cholesterol": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of cholesterol in a meal (mg)"
                  },
                  "fiber": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of fiber in a meal (mg)"
                  },
                  "iron": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of iron in a meal (mg)"
                  },
                  "monounsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of monounsaturated fat in a meal (mg)"
                  },
                  "polyunsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of polyunsaturated fat in a meal (mg)"
                  },
                  "potassium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of potassium in a meal (mg)"
                  },
                  "protein": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of protein in a meal (mg)"
                  },
                  "saturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of saturated fat in a meal (mg)"
                  },
                  "sodium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sodium in a meal (mg)"
                  },
                  "sugar": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sugar in a meal (mg)"
                  },
                  "totalFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of total fat in a meal (mg)"
                  },
                  "transFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of trans fat in a meal (mg)"
                  },
                  "vitaminA": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin A in a meal (mg)"
                  },
                  "vitaminB": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin B in a meal (mg)"
                  },
                  "vitaminC": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin C in a meal (mg)"
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "A timestamp indicating when a favorite entry was created"
          },
          "account": {
            "type": "Entity",
            "description": "The ID of the account for which the favorite entry was created",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add Favorite Meal. Clients account is added automatically. Providers can only add favorite meals for their own clients.",
        "src": "web-gateway/app/food/favorite/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/favorite"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The ID of the account that is adding the meal"
          },
          "meal": {
            "type": "Bigint",
            "description": "The ID of the meal that is being saved as a favorite"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "200"
          }
        }
      },
      "Delete": {
        "description": "Delete Favorite Meal. Providers can only delete favorite meals for their own clients.",
        "src": "web-gateway/app/food/favorite/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/favorite/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the favorite meal entry to remove"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Ingredient-Locale": {
      "Get": {
        "description": "Get a translation for specific ingredient & locale",
        "src": "web-gateway/app/food/ingredient/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/ingredient/local/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the ingredient"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "name": {
            "type": "String",
            "optional": true,
            "description": "Translated name of the ingredient"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific ingredient & locale",
        "src": "web-gateway/app/food/ingredient/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/ingredient/local/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the ingredient"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Translated name of the ingredient"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific ingredient & locale",
        "src": "web-gateway/app/food/ingredient/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/ingredient/local/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the ingredient"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Ingredient": {
      "GetLocal": {
        "description": "Gets a local ingredient",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/ingredient/local/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A local identifier of the ingredient"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the ingredient. If the ingredient is not local, this is the remote ID."
          },
          "name": {
            "type": "String",
            "description": "Name of the ingredient"
          },
          "type": {
            "type": "IngredientType",
            "optional": true,
            "description": "Type of the ingredient",
            "values": "'common' | 'branded'"
          },
          "isLocal": {
            "type": "Boolean",
            "description": "A flag indicating if it's a locally sourced ingredient. If the flag is `false`, the ID is a remote ID. Otherwise, the ID is the local ingredient ID."
          },
          "account": {
            "type": "Entity",
            "optional": true,
            "description": "Account information. Only included for local ingredients that are private.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account the ingredient was created by/for"
              }
            }
          },
          "servings": {
            "type": "FoodServingSingle[]",
            "description": "Serving collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of a serving. If the serving is not local, this is the remote ID."
              },
              "description": {
                "type": "String",
                "description": "A description of a serving"
              },
              "measurementDescription": {
                "type": "String",
                "description": "A measurement description"
              },
              "unit": {
                "type": "String",
                "description": "Unit of a serving"
              },
              "amount": {
                "type": "Number",
                "description": "Amount of a serving in the specified unit"
              },
              "isDefault": {
                "type": "Boolean",
                "description": "Indicates whether the serving is a default serving for an ingredient."
              },
              "externalId": {
                "type": "Bigint",
                "optional": true,
                "description": "External ID of a serving. Only included if the serving is local and mapped from external source."
              },
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a serving (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a serving (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a serving (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a serving (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a serving (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a serving (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a serving (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a serving (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a serving (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a serving (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a serving (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a serving (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a serving (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a serving (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a serving (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a serving (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a serving (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a serving (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a serving (mg)"
              },
              "isLocal": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating if the serving is a locally sourced serving. If the flag is `true`, the ID is the local ID of the serving."
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetUPC": {
        "description": "Looks up a UPC ingredient in both local and remote data store. First locally and if the ingredient is not found, then remotely.",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/ingredient/upc/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A UPC identifier of the ingredient"
          },
          "region": {
            "type": "FoodRegion",
            "optional": true,
            "description": "Region to search the products in. A list of all supported regions is also available via GET /food/region.",
            "values": "'US' | 'CA' | 'IL' | 'AU' | 'SA'"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the ingredient. If the ingredient is not local, this is the remote ID."
          },
          "name": {
            "type": "String",
            "description": "Name of the ingredient"
          },
          "type": {
            "type": "IngredientType",
            "optional": true,
            "description": "Type of the ingredient",
            "values": "'common' | 'branded'"
          },
          "isLocal": {
            "type": "Boolean",
            "description": "A flag indicating if it's a locally sourced ingredient. If the flag is `false`, the ID is a remote ID. Otherwise, the ID is the local ingredient ID."
          },
          "account": {
            "type": "Entity",
            "optional": true,
            "description": "Account information. Only included for local ingredients that are private.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account the ingredient was created by/for"
              }
            }
          },
          "servings": {
            "type": "FoodServingSingle[]",
            "description": "Serving collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of a serving. If the serving is not local, this is the remote ID."
              },
              "description": {
                "type": "String",
                "description": "A description of a serving"
              },
              "measurementDescription": {
                "type": "String",
                "description": "A measurement description"
              },
              "unit": {
                "type": "String",
                "description": "Unit of a serving"
              },
              "amount": {
                "type": "Number",
                "description": "Amount of a serving in the specified unit"
              },
              "isDefault": {
                "type": "Boolean",
                "description": "Indicates whether the serving is a default serving for an ingredient."
              },
              "externalId": {
                "type": "Bigint",
                "optional": true,
                "description": "External ID of a serving. Only included if the serving is local and mapped from external source."
              },
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a serving (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a serving (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a serving (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a serving (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a serving (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a serving (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a serving (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a serving (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a serving (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a serving (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a serving (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a serving (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a serving (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a serving (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a serving (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a serving (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a serving (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a serving (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a serving (mg)"
              },
              "isLocal": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating if the serving is a locally sourced serving. If the flag is `true`, the ID is the local ID of the serving."
              }
            }
          }
        },
        "hasResponse": true
      },
      "Copy": {
        "description": "Looks up a remote ingredient and copies it over, with servings.",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/ingredient/copy/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of a remote ingredient"
          },
          "region": {
            "type": "FoodRegion",
            "optional": true,
            "description": "Region to search the products in. A list of all supported regions is also available via GET /food/region.",
            "values": "'US' | 'CA' | 'IL' | 'AU' | 'SA'"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of a local ingredient"
          }
        }
      },
      "CreateLocal": {
        "description": "Creates a local ingredient.",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/ingredient/local"
        },
        "version": "2.0",
        "apiParam": {
          "name": {
            "type": "String",
            "description": "Name of the ingredient"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account ID for a private ingredient. Required for provider calls, clients will have it populated by default."
          },
          "type": {
            "type": "IngredientType",
            "optional": true,
            "description": "Type of the ingredient",
            "values": "'common' | 'branded'"
          },
          "brand": {
            "type": "String",
            "optional": true,
            "description": "Brand of the ingredient"
          },
          "upcCode": {
            "type": "String",
            "optional": true,
            "description": "UPC code"
          },
          "image": {
            "type": "Image",
            "optional": true,
            "description": "Image data. Has to have at least 1 property defined when present.",
            "children": {
              "thumbnail": {
                "type": "String",
                "optional": true,
                "description": "Thumbnail image URL"
              },
              "highres": {
                "type": "String",
                "optional": true,
                "description": "High-res image URL"
              }
            }
          },
          "servings": {
            "type": "Object",
            "description": "",
            "children": {
              "externalId": {
                "type": "Bigint",
                "optional": true,
                "description": "External ID of a serving."
              },
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a serving (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a serving (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a serving (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a serving (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a serving (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a serving (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a serving (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a serving (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a serving (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a serving (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a serving (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a serving (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a serving (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a serving (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a serving (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a serving (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a serving (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a serving (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a serving (mg)"
              }
            }
          }
        },
        "apiSuccess": {
          "servings": {
            "type": "Object",
            "description": "",
            "children": {
              "isDefault": {
                "type": "Boolean",
                "description": "Indicates whether the serving is a default serving for an ingredient. Only one serving can be a default serving for an ingredient."
              }
            }
          },
          "id": {
            "type": "String",
            "description": "ID of the ingredient"
          }
        },
        "hasResponse": true
      },
      "UpdateLocal": {
        "description": "Updates a local ingredient.",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/food/ingredient/local/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A local identifier of the ingredient"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Name of the ingredient"
          },
          "type": {
            "type": "IngredientType",
            "optional": true,
            "description": "Type of the ingredient",
            "values": "'common' | 'branded'"
          },
          "brand": {
            "type": "String",
            "optional": true,
            "description": "Brand of the ingredient"
          },
          "upcCode": {
            "type": "String",
            "optional": true,
            "description": "UPC code"
          },
          "image": {
            "type": "Image",
            "optional": true,
            "description": "Image data. Has to have at least 1 property defined when present.",
            "children": {
              "thumbnail": {
                "type": "String",
                "optional": true,
                "description": "Thumbnail image URL"
              },
              "highres": {
                "type": "String",
                "optional": true,
                "description": "High-res image URL"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "DeleteLocal": {
        "description": "Deletes a local ingredient. Can only succeed if the ingredient has no other relations.",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/ingredient/local/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A local identifier of the ingredient"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetRemote": {
        "description": "Gets a remote ingredient",
        "src": "web-gateway/app/food/ingredient/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/ingredient/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A remote identifier of the ingredient"
          },
          "region": {
            "type": "FoodRegion",
            "optional": true,
            "description": "Region to search the products in. A list of all supported regions is also available via GET /food/region.",
            "values": "'US' | 'CA' | 'IL' | 'AU' | 'SA'"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the ingredient. If the ingredient is not local, this is the remote ID."
          },
          "name": {
            "type": "String",
            "description": "Name of the ingredient"
          },
          "type": {
            "type": "IngredientType",
            "optional": true,
            "description": "Type of the ingredient",
            "values": "'common' | 'branded'"
          },
          "isLocal": {
            "type": "Boolean",
            "description": "A flag indicating if it's a locally sourced ingredient. If the flag is `false`, the ID is a remote ID. Otherwise, the ID is the local ingredient ID."
          },
          "account": {
            "type": "Entity",
            "optional": true,
            "description": "Account information. Only included for local ingredients that are private.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account the ingredient was created by/for"
              }
            }
          },
          "servings": {
            "type": "FoodServingSingle[]",
            "description": "Serving collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of a serving. If the serving is not local, this is the remote ID."
              },
              "description": {
                "type": "String",
                "description": "A description of a serving"
              },
              "measurementDescription": {
                "type": "String",
                "description": "A measurement description"
              },
              "unit": {
                "type": "String",
                "description": "Unit of a serving"
              },
              "amount": {
                "type": "Number",
                "description": "Amount of a serving in the specified unit"
              },
              "isDefault": {
                "type": "Boolean",
                "description": "Indicates whether the serving is a default serving for an ingredient."
              },
              "externalId": {
                "type": "Bigint",
                "optional": true,
                "description": "External ID of a serving. Only included if the serving is local and mapped from external source."
              },
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a serving (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a serving (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a serving (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a serving (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a serving (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a serving (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a serving (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a serving (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a serving (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a serving (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a serving (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a serving (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a serving (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a serving (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a serving (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a serving (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a serving (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a serving (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a serving (mg)"
              },
              "isLocal": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating if the serving is a locally sourced serving. If the flag is `true`, the ID is the local ID of the serving."
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Food-Key-Locale": {
      "Get": {
        "description": "Get a translation for specific key & locale",
        "src": "web-gateway/app/food/key/core/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/key/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "name": {
            "type": "String",
            "optional": true,
            "description": "Localized name of a key"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Localized description of a key"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific key & locale",
        "src": "web-gateway/app/food/key/core/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/key/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Desired name of a key"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Desired description of a key"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific key & locale",
        "src": "web-gateway/app/food/key/core/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/key/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Meal-Locale": {
      "Get": {
        "description": "Get a translation for specific meal & locale",
        "src": "web-gateway/app/food/meal/core/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal item"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "name": {
            "type": "String",
            "optional": true,
            "description": "Localized name of a meal"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific meal & locale",
        "src": "web-gateway/app/food/meal/core/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/meal/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal item"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Desired name of a meal"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific meal & locale",
        "src": "web-gateway/app/food/meal/core/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal item"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Meal": {
      "GetAll": {
        "description": "Fetch all meals.",
        "src": "web-gateway/app/food/meal/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to retrieve the meals for."
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account associated with the meal. If account is passed, only return results associated with this account."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter by the name of the meal"
          },
          "mealPlan": {
            "type": "String",
            "optional": true,
            "description": "ID of the meal plan to filter by."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of meals to offset from beginning of query"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "FoodMealSegment[]",
            "description": "Array of meals",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the meal record"
              },
              "name": {
                "type": "String",
                "description": "The name of the meal record"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp of when the meal was created"
              },
              "imageUrl": {
                "type": "String",
                "description": "The image url of the meal if it exists"
              },
              "isPublic": {
                "type": "Boolean",
                "description": "Flag showing if meal is public (does not have associated account)"
              },
              "account": {
                "type": "Entity",
                "optional": true,
                "description": "Account associated with this meal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the account"
                  }
                }
              },
              "summary": {
                "type": "FoodMealSummary",
                "description": "Aggregation of nutrition data for a meal",
                "children": {
                  "availableCarbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of available carbohydrates in a meal (mg)"
                  },
                  "calcium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calcium in a meal (mg)"
                  },
                  "calorie": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of calories in a meal (mg)"
                  },
                  "carbohydrate": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of carbohydrates in a meal (mg)"
                  },
                  "cholesterol": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of cholesterol in a meal (mg)"
                  },
                  "fiber": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of fiber in a meal (mg)"
                  },
                  "iron": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of iron in a meal (mg)"
                  },
                  "monounsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of monounsaturated fat in a meal (mg)"
                  },
                  "polyunsaturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of polyunsaturated fat in a meal (mg)"
                  },
                  "potassium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of potassium in a meal (mg)"
                  },
                  "protein": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of protein in a meal (mg)"
                  },
                  "saturatedFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of saturated fat in a meal (mg)"
                  },
                  "sodium": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of sodium in a meal (mg)"
                  },
                  "totalFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of total fat in a meal (mg)"
                  },
                  "transFat": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of trans fat in a meal (mg)"
                  },
                  "vitaminA": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin A in a meal (mg)"
                  },
                  "vitaminB": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin B in a meal (mg)"
                  },
                  "vitaminC": {
                    "type": "Integer",
                    "optional": true,
                    "description": "The amount of vitamin C in a meal (mg)"
                  }
                }
              },
              "servings": {
                "type": "FoodMealServingItem[]",
                "description": "List of servings for the meal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Serving ID."
                  },
                  "quantity": {
                    "type": "Integer",
                    "description": "A quantity of serving"
                  },
                  "description": {
                    "type": "String",
                    "description": "A description of a serving"
                  },
                  "measurementDescription": {
                    "type": "String",
                    "description": "A measurement description"
                  },
                  "unit": {
                    "type": "String",
                    "description": "Unit of a serving"
                  },
                  "amount": {
                    "type": "Number",
                    "description": "Amount of a serving in the specified unit"
                  },
                  "ingredient": {
                    "type": "FoodMealIngredient",
                    "description": "Ingredient of this serving",
                    "children": {
                      "id": {
                        "type": "String",
                        "description": "The id of the record"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of the record"
                      },
                      "type": {
                        "type": "String",
                        "optional": true,
                        "description": "The type of the record"
                      },
                      "image": {
                        "type": "Object",
                        "description": "Image urls",
                        "children": {
                          "thumbnail": {
                            "type": "String",
                            "optional": true,
                            "description": "The url of the thumbnail image for the ingredient"
                          },
                          "highres": {
                            "type": "String",
                            "optional": true,
                            "description": "The url of the high res image for the ingredient"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "keys": {
                "type": "TracedEntity[]",
                "description": "A collection of keys associated with a meal.",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Key ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Key name"
                  },
                  "description": {
                    "type": "String",
                    "description": "Key description"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "Flag showing if the key is active"
                  },
                  "createdAt": {
                    "type": "Timestamp",
                    "description": "Timestamp of key creation"
                  }
                }
              },
              "mealPlans": {
                "type": "FoodMealPlanSegment[]",
                "description": "An array of associated meal plans.",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the meal plan"
                  },
                  "description": {
                    "type": "String",
                    "description": "Description of the meal plan"
                  },
                  "items": {
                    "type": "FoodMealPlanItem[]",
                    "description": "Meal plan items",
                    "children": {
                      "type": {
                        "type": "DescribedEntity",
                        "description": "Meal plan item type",
                        "children": {
                          "id": {
                            "type": "Integer",
                            "description": "ID of the meal plan type"
                          },
                          "description": {
                            "type": "String",
                            "description": "Description of the meal plan type"
                          }
                        }
                      },
                      "recipe": {
                        "type": "Any",
                        "optional": true,
                        "description": "A free-form object containing the recipe"
                      },
                      "dayOfWeek": {
                        "type": "Integer",
                        "description": "Day of week for which this meal appears in the meal plan. Will be in the range 0 - 6, where 0 - Sunday and 6 - Saturday"
                      }
                    }
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch Single Meal",
        "src": "web-gateway/app/food/meal/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The meal id of the record"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Organization in context of which the meal should be fetched. Required to populate meal plans."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meal record"
          },
          "name": {
            "type": "String",
            "description": "The name of the meal record"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "The timestamp of when the meal was created"
          },
          "imageUrl": {
            "type": "String",
            "description": "The image url of the meal if it exists"
          },
          "isPublic": {
            "type": "Boolean",
            "description": "Flag showing if meal is public (does not have associated account)"
          },
          "account": {
            "type": "Entity",
            "optional": true,
            "description": "Account associated with this meal",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account"
              }
            }
          },
          "summary": {
            "type": "FoodMealSummary",
            "description": "Aggregation of nutrition data for a meal",
            "children": {
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a meal (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a meal (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a meal (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a meal (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a meal (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a meal (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a meal (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a meal (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a meal (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a meal (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a meal (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a meal (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a meal (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a meal (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a meal (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a meal (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a meal (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a meal (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a meal (mg)"
              }
            }
          },
          "servings": {
            "type": "FoodMealServingItemSummarized[]",
            "description": "List of servings for the meal",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Serving ID."
              },
              "quantity": {
                "type": "Integer",
                "description": "A quantity of serving"
              },
              "description": {
                "type": "String",
                "description": "A description of a serving"
              },
              "measurementDescription": {
                "type": "String",
                "description": "A measurement description"
              },
              "unit": {
                "type": "String",
                "description": "Unit of a serving"
              },
              "amount": {
                "type": "Number",
                "description": "Amount of a serving in the specified unit"
              },
              "availableCarbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of available carbohydrates in a serving (mg)"
              },
              "calcium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calcium in a serving (mg)"
              },
              "calorie": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of calories in a serving (mg)"
              },
              "carbohydrate": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of carbohydrates in a serving (mg)"
              },
              "cholesterol": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of cholesterol in a serving (mg)"
              },
              "fiber": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of fiber in a serving (mg)"
              },
              "iron": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of iron in a serving (mg)"
              },
              "monounsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of monounsaturated fat in a serving (mg)"
              },
              "polyunsaturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of polyunsaturated fat in a serving (mg)"
              },
              "potassium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of potassium in a serving (mg)"
              },
              "protein": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of protein in a serving (mg)"
              },
              "saturatedFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of saturated fat in a serving (mg)"
              },
              "sodium": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sodium in a serving (mg)"
              },
              "sugar": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of sugar in a serving (mg)"
              },
              "totalFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of total fat in a serving (mg)"
              },
              "transFat": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of trans fat in a serving (mg)"
              },
              "vitaminA": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin A in a serving (mg)"
              },
              "vitaminB": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin B in a serving (mg)"
              },
              "vitaminC": {
                "type": "Integer",
                "optional": true,
                "description": "The amount of vitamin C in a serving (mg)"
              },
              "ingredient": {
                "type": "FoodMealIngredient",
                "description": "Ingredient of this serving",
                "children": {
                  "id": {
                    "type": "String",
                    "description": "The id of the record"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of the record"
                  },
                  "type": {
                    "type": "String",
                    "optional": true,
                    "description": "The type of the record"
                  },
                  "image": {
                    "type": "Object",
                    "description": "Image urls",
                    "children": {
                      "thumbnail": {
                        "type": "String",
                        "optional": true,
                        "description": "The url of the thumbnail image for the ingredient"
                      },
                      "highres": {
                        "type": "String",
                        "optional": true,
                        "description": "The url of the high res image for the ingredient"
                      }
                    }
                  }
                }
              }
            }
          },
          "keys": {
            "type": "TracedEntity[]",
            "description": "A collection of keys associated with a meal.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Key ID"
              },
              "name": {
                "type": "String",
                "description": "Key name"
              },
              "description": {
                "type": "String",
                "description": "Key description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Flag showing if the key is active"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp of key creation"
              }
            }
          },
          "mealPlans": {
            "type": "FoodMealPlanSegment[]",
            "description": "An array of associated meal plans.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the meal plan"
              },
              "description": {
                "type": "String",
                "description": "Description of the meal plan"
              },
              "items": {
                "type": "FoodMealPlanItem[]",
                "description": "Meal plan items",
                "children": {
                  "type": {
                    "type": "DescribedEntity",
                    "description": "Meal plan item type",
                    "children": {
                      "id": {
                        "type": "Integer",
                        "description": "ID of the meal plan type"
                      },
                      "description": {
                        "type": "String",
                        "description": "Description of the meal plan type"
                      }
                    }
                  },
                  "recipe": {
                    "type": "Any",
                    "optional": true,
                    "description": "A free-form object containing the recipe"
                  },
                  "dayOfWeek": {
                    "type": "Integer",
                    "description": "Day of week for which this meal appears in the meal plan. Will be in the range 0 - 6, where 0 - Sunday and 6 - Saturday"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add Meal",
        "src": "web-gateway/app/food/meal/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/meal"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "description": "The name of the meal that is being added"
          },
          "account": {
            "type": "Bigint",
            "description": "The id of the account that is adding the meal"
          },
          "imageUrl": {
            "type": "String",
            "optional": true,
            "description": "The url of the image associated with this meal"
          },
          "servings": {
            "type": "Object[]",
            "optional": true,
            "description": "The array of meal serving",
            "children": {
              "id": {
                "type": "String",
                "description": "Serving ID. If ingredient.isLocal is true, this must be the local serving ID. Otherwise it should be a remote serving ID."
              },
              "quantity": {
                "type": "Number",
                "optional": true,
                "default": "1",
                "description": "A quantity of serving"
              },
              "ingredient": {
                "type": "Object",
                "description": "The ingredient that is being added to this meal.",
                "children": {
                  "id": {
                    "type": "String",
                    "description": "The id of the ingredient being added."
                  },
                  "isLocal": {
                    "type": "Boolean",
                    "description": "Flag saying if ingredient is local or remote"
                  }
                }
              }
            }
          }
        },
        "apiSuccess": {
          "mealId": {
            "type": "Bigint",
            "description": "The id of the newly-created meal"
          }
        }
      },
      "Update": {
        "description": "Update a meal",
        "src": "web-gateway/app/food/meal/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/food/meal/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The ID of meal to update"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Desired new value of `isActive` field at target meal"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "New name of the meal. Should be non-empty string if passed."
          },
          "vendor": {
            "type": "String/Null",
            "optional": true,
            "description": "New vendor of the meal. If 'null' is passed then vendor will be defaulted to 'selvera'"
          },
          "imageUrl": {
            "type": "String/Null",
            "optional": true,
            "description": "New url of the image associated with this meal. Can be set to 'null'"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Remove a meal if there are no relations to the meal (i.e. no consumed entries, meal - organization associations)",
        "src": "web-gateway/app/food/meal/core/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The ID of meal to update"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetPlans": {
        "description": "Fetch all meal plans.",
        "src": "web-gateway/app/food/meal/plan/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal-plan"
        },
        "version": "2.0",
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization for which the meal plan should be retrieved"
          },
          "package": {
            "type": "Bigint",
            "optional": true,
            "description": "Package for which the associated meal plans should be fetched. Can be 'none' to select just meal plans without an associated package"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of meals to offset from beginning of query"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "BasicMealPlan[]",
            "description": "Array of meal plans",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The meal plan ID"
              },
              "description": {
                "type": "String",
                "description": "The meal plan description"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        }
      }
    },
    "Food-Meal-Organization": {
      "Create": {
        "description": "Associate meal with organization",
        "src": "web-gateway/app/food/meal/organization/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/meal/organization"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "mealId": {
            "type": "Bigint",
            "description": "The id of the meal that is being associated"
          },
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization to associate meal"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "New association ID"
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single meal-organization association",
        "src": "web-gateway/app/food/meal/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal/organization/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meal-organization association"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Association ID"
          },
          "mealId": {
            "type": "Bigint",
            "description": "The id of the meal from association"
          },
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization from association"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Indicates whether association is active or not"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update meal-organization association",
        "src": "web-gateway/app/food/meal/organization/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/food/meal/organization"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meal-organization association"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Indicates whether association is active or not"
          }
        }
      },
      "Delete": {
        "description": "Delete meal-organization association",
        "src": "web-gateway/app/food/meal/organization/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal/organization"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meal-organization association"
          }
        }
      }
    },
    "Food-MealPlan-Locale": {
      "Get": {
        "description": "Get a translation for specific meal-plan & locale",
        "src": "web-gateway/app/food/meal/plan/core/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal-plan/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "description": {
            "type": "String",
            "optional": true,
            "description": "Localized description of a meal-plan"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific meal-plan & locale",
        "src": "web-gateway/app/food/meal/plan/core/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/meal-plan/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Translated description of a meal-plan"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific meal-plan & locale",
        "src": "web-gateway/app/food/meal/plan/core/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal-plan/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-MealPlan-Type-Locale": {
      "Get": {
        "description": "Get a translation for specific meal-plan type & locale",
        "src": "web-gateway/app/food/meal/plan/type/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal-plan/type/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan type"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "description": {
            "type": "String",
            "optional": true,
            "description": "Localized description of a meal-plan type"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific meal-plan type & locale",
        "src": "web-gateway/app/food/meal/plan/type/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/meal-plan/type/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan type"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Translated description of a meal-plan type"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific meal-plan type & locale",
        "src": "web-gateway/app/food/meal/plan/type/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal-plan/type/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the meal-plan type"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Meal-Serving": {
      "Upsert": {
        "description": "Associate meal with serving.\nClient can associate only own meals with own servings (related with own ingredients).\nProvider can associate accessible client's meals and servings but only meals and servings of the same client.\nAdministrator can associate public or any client's meals and servings.",
        "src": "web-gateway/app/food/meal/serving/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/meal/:meal/serving/:serving"
        },
        "version": "2.0",
        "apiParam": {
          "meal": {
            "type": "Bigint",
            "description": "The id of the meal that is being associated"
          },
          "serving": {
            "type": "Bigint",
            "description": "The id of the serving to associate"
          },
          "quantity": {
            "type": "PositiveNumeric",
            "optional": true,
            "default": "1",
            "description": "Quantity of serving associated with the meal"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetSingle": {
        "description": "Fetch single meal-serving association.\nClient can fetch only own meals and own servings (own ingredients)\nProvider can fetch accessible client's meals and servings.\nAdministrator can fetch public or any client's meals and servings.",
        "src": "web-gateway/app/food/meal/serving/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/meal/:meal/serving/:serving"
        },
        "version": "2.0",
        "apiParam": {
          "meal": {
            "type": "Bigint",
            "description": "The id of the meal that is being associated"
          },
          "serving": {
            "type": "Bigint",
            "description": "The id of the serving to associate"
          }
        },
        "apiSuccess": {
          "meal": {
            "type": "MealEntity",
            "description": "Associated meal",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Meal ID"
              },
              "account": {
                "type": "Entity",
                "optional": true,
                "description": "Account associated with the meal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  }
                }
              }
            }
          },
          "serving": {
            "type": "ServingEntity",
            "description": "The id of the serving from association",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Serving ID"
              },
              "ingredient": {
                "type": "IngredientEntity",
                "description": "Ingredient associated with the serving",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Ingredient ID"
                  },
                  "account": {
                    "type": "Entity",
                    "optional": true,
                    "description": "Account associated with the ingredient",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Account ID"
                      }
                    }
                  }
                }
              }
            }
          },
          "quantity": {
            "type": "PositiveNumeric",
            "description": "Quantity of serving associated with the meal"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Delete meal-serving association.\nClient can delete only own meals and own servings (own ingredients) associations.\nProvider can delete accessible client's meals and servings associations.\nAdministrator can delete public or any client's meals and servings associations.",
        "src": "web-gateway/app/food/meal/serving/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/meal/:meal/serving/:serving"
        },
        "version": "2.0",
        "apiParam": {
          "meal": {
            "type": "Bigint",
            "description": "The id of the meal that is being associated"
          },
          "serving": {
            "type": "Bigint",
            "description": "The id of the serving to associate"
          }
        }
      }
    },
    "Food-Preference": {
      "GetAll": {
        "description": "Get food tracking preference of organization",
        "src": "web-gateway/app/food/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/preference"
        },
        "version": "1.0",
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization Id to fetch preferences"
          }
        },
        "apiSuccess": {
          "mode": {
            "type": "Array",
            "description": "Food tracking mode object",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Food tracking mode id"
              },
              "description": {
                "type": "String",
                "description": "Food tracking mode description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Food tracking mode activity state for given organization hierarchy"
              }
            }
          }
        }
      },
      "Create": {
        "description": "Add food tracking preference of organization",
        "src": "web-gateway/app/food/preference/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/preference"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization"
          },
          "modeId": {
            "type": "String",
            "description": "Food tracking mode id"
          },
          "modeActive": {
            "type": "Boolean",
            "description": "Food tracking mode activity state"
          }
        }
      },
      "Update": {
        "description": "Update food tracking preference of organization",
        "src": "web-gateway/app/food/preference/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/food/preference"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization"
          },
          "modeId": {
            "type": "String",
            "description": "Food tracking mode id"
          },
          "modeActive": {
            "type": "Boolean",
            "description": "Food tracking mode activity state"
          }
        }
      },
      "Delete": {
        "description": "Delete food tracking preference of organization",
        "src": "web-gateway/app/food/preference/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/preference"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization"
          },
          "modeId": {
            "type": "String",
            "description": "Food tracking mode id"
          }
        }
      }
    },
    "Food-Serving-Locale": {
      "Get": {
        "description": "Get a translation for specific serving & locale",
        "src": "web-gateway/app/food/serving/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/serving/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the serving"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "description": {
            "type": "String",
            "optional": true,
            "description": "A description of a serving"
          },
          "measurementDescription": {
            "type": "String",
            "optional": true,
            "description": "A measurement description"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "description": "Unit of a serving, at least one of description"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific serving & locale",
        "src": "web-gateway/app/food/serving/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/food/serving/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the serving"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Localized description of a serving"
          },
          "measurementDescription": {
            "type": "String",
            "optional": true,
            "description": "Localized measurement description"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "description": "Localized unit of a serving"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific serving & locale",
        "src": "web-gateway/app/food/serving/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/serving/:id/locale/:locale"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the serving"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Food-Serving": {
      "GetSingle": {
        "description": "Gets a local serving",
        "src": "web-gateway/app/food/serving/route.ts",
        "api": {
          "method": "GET",
          "url": "/food/serving/:id"
        },
        "version": "1.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "A local identifier of the serving"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Local ID of a serving."
          },
          "description": {
            "type": "String",
            "description": "A description of a serving"
          },
          "measurementDescription": {
            "type": "String",
            "description": "A measurement description"
          },
          "unit": {
            "type": "String",
            "description": "Unit of a serving"
          },
          "ingredient": {
            "type": "Object",
            "description": "Associated ingredient. Available on GetSingle only",
            "children": {
              "id": {
                "type": "String",
                "description": "ID of the associated ingredient"
              },
              "account": {
                "type": "Entity",
                "optional": true,
                "description": "Account information. Only included for private and local ingredients.",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the account"
                  }
                }
              }
            }
          },
          "amount": {
            "type": "Number",
            "description": "Amount of a serving in the specified unit"
          },
          "isDefault": {
            "type": "Boolean",
            "description": "Indicates whether the serving is a default serving for an ingredient. Only one serving can be a default serving for an ingredient."
          },
          "externalId": {
            "type": "Bigint",
            "optional": true,
            "description": "External ID of a serving. Only included if the serving is local and mapped from external source."
          },
          "availableCarbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of available carbohydrates in a serving (mg)"
          },
          "calcium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calcium in a serving (mg)"
          },
          "calorie": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calories in a serving (mg)"
          },
          "carbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of carbohydrates in a serving (mg)"
          },
          "cholesterol": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of cholesterol in a serving (mg)"
          },
          "fiber": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of fiber in a serving (mg)"
          },
          "iron": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of iron in a serving (mg)"
          },
          "monounsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of monounsaturated fat in a serving (mg)"
          },
          "polyunsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of polyunsaturated fat in a serving (mg)"
          },
          "potassium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of potassium in a serving (mg)"
          },
          "protein": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of protein in a serving (mg)"
          },
          "saturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of saturated fat in a serving (mg)"
          },
          "sodium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sodium in a serving (mg)"
          },
          "sugar": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sugar in a serving (mg)"
          },
          "totalFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of total fat in a serving (mg)"
          },
          "transFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of trans fat in a serving (mg)"
          },
          "vitaminA": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin A in a serving (mg)"
          },
          "vitaminB": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin B in a serving (mg)"
          },
          "vitaminC": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin C in a serving (mg)"
          },
          "isLocal": {
            "type": "Boolean",
            "description": "A flag indicating if the serving is a locally sourced serving. It will always be 'true', since all servings looked up in this endpoint are local.",
            "default": "true"
          }
        }
      },
      "Create": {
        "description": "Creates a local serving",
        "src": "web-gateway/app/food/serving/route.ts",
        "api": {
          "method": "POST",
          "url": "/food/serving"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "description": {
            "type": "String",
            "description": "A description of a serving"
          },
          "measurementDescription": {
            "type": "String",
            "description": "A measurement description"
          },
          "unit": {
            "type": "String",
            "description": "Unit of a serving"
          },
          "amount": {
            "type": "Number",
            "description": "Amount of a serving in the specified unit"
          },
          "isDefault": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether the serving is a default serving for an ingredient. Only one serving can be a default serving for an ingredient."
          },
          "ingredient": {
            "type": "Bigint",
            "description": "ID of the ingredient of the serving"
          },
          "externalId": {
            "type": "Bigint",
            "optional": true,
            "description": "External ID of a serving."
          },
          "availableCarbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of available carbohydrates in a serving (mg)"
          },
          "calcium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calcium in a serving (mg)"
          },
          "calorie": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calories in a serving (mg)"
          },
          "carbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of carbohydrates in a serving (mg)"
          },
          "cholesterol": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of cholesterol in a serving (mg)"
          },
          "fiber": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of fiber in a serving (mg)"
          },
          "iron": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of iron in a serving (mg)"
          },
          "monounsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of monounsaturated fat in a serving (mg)"
          },
          "polyunsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of polyunsaturated fat in a serving (mg)"
          },
          "potassium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of potassium in a serving (mg)"
          },
          "protein": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of protein in a serving (mg)"
          },
          "saturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of saturated fat in a serving (mg)"
          },
          "sodium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sodium in a serving (mg)"
          },
          "sugar": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sugar in a serving (mg)"
          },
          "totalFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of total fat in a serving (mg)"
          },
          "transFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of trans fat in a serving (mg)"
          },
          "vitaminA": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin A in a serving (mg)"
          },
          "vitaminB": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin B in a serving (mg)"
          },
          "vitaminC": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin C in a serving (mg)"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "A local identifier of the serving"
          }
        }
      },
      "Update": {
        "description": "Updates a local serving",
        "src": "web-gateway/app/food/serving/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/food/serving/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Local ID of a serving."
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "A description of a serving"
          },
          "measurementDescription": {
            "type": "String",
            "optional": true,
            "description": "A measurement description"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "description": "Unit of a serving"
          },
          "amount": {
            "type": "Number",
            "optional": true,
            "description": "Amount of a serving in the specified unit"
          },
          "isDefault": {
            "type": "Boolean",
            "optional": true,
            "description": "Indicates whether the serving is a default serving for an ingredient. Only one serving can be a default serving for an ingredient."
          },
          "externalId": {
            "type": "Bigint",
            "optional": true,
            "description": "External ID of a serving."
          },
          "availableCarbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of available carbohydrates in a serving (mg)"
          },
          "calcium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calcium in a serving (mg)"
          },
          "calorie": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of calories in a serving (mg)"
          },
          "carbohydrate": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of carbohydrates in a serving (mg)"
          },
          "cholesterol": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of cholesterol in a serving (mg)"
          },
          "fiber": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of fiber in a serving (mg)"
          },
          "iron": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of iron in a serving (mg)"
          },
          "monounsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of monounsaturated fat in a serving (mg)"
          },
          "polyunsaturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of polyunsaturated fat in a serving (mg)"
          },
          "potassium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of potassium in a serving (mg)"
          },
          "protein": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of protein in a serving (mg)"
          },
          "saturatedFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of saturated fat in a serving (mg)"
          },
          "sodium": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sodium in a serving (mg)"
          },
          "sugar": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of sugar in a serving (mg)"
          },
          "totalFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of total fat in a serving (mg)"
          },
          "transFat": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of trans fat in a serving (mg)"
          },
          "vitaminA": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin A in a serving (mg)"
          },
          "vitaminB": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin B in a serving (mg)"
          },
          "vitaminC": {
            "type": "Integer",
            "optional": true,
            "description": "The amount of vitamin C in a serving (mg)"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a local serving. Will only succeed if a serving has no other relations.",
        "src": "web-gateway/app/food/serving/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/food/serving/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Local ID of a serving."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Key": {
    "Key-Account": {
      "Create": {
        "description": "Associate key-organization entry with account. Providers able to create keys for clients from all accessible organizations. Clients can create only their own keys",
        "src": "web-gateway/app/food/key/account/route.ts",
        "api": {
          "method": "POST",
          "url": "/key/account"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "keyOrganizationId": {
            "type": "Bigint",
            "description": "ID of the key-organization entry"
          },
          "account": {
            "type": "Bigint",
            "description": "Account ID."
          },
          "targetQuantity": {
            "type": "Integer",
            "optional": true,
            "description": "The target quantity"
          }
        },
        "apiSuccess": {
          "keyOrganizationAccountId": {
            "description": "Association ID",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update key-organization-account association. Providers able to update keys for clients from all accessible organizations. Clients can update only their own keys",
        "src": "web-gateway/app/food/key/account/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/key/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization-account association"
          },
          "targetquantity": {
            "type": "Integer",
            "optional": true,
            "description": "The default target quantity"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetSingle": {
        "description": "Fetch key-organization-account association by ID. Providers able to fetch keys for clients from all accessible organizations. Clients can fetch only their own keys",
        "src": "web-gateway/app/food/key/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization-account association"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization-account association"
          },
          "targetQuantity": {
            "type": "Integer",
            "description": "The default target quantity"
          },
          "account": {
            "type": "Entity",
            "description": "Associated account data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account"
              }
            }
          },
          "organization": {
            "type": "Entity",
            "description": "Associated organization data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the account"
              }
            }
          },
          "key": {
            "type": "ItemEntity",
            "description": "Associated key data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the key"
              },
              "name": {
                "type": "String",
                "description": "Key's name"
              },
              "description": {
                "type": "String",
                "description": "Key's description"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Get all organization-account keys. Providers able to fetch keys for clients from all accessible organizations. Clients can fetch only their own keys",
        "src": "web-gateway/app/food/key/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/account"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account id to filter keys. Optional for Client requests, otherwise required"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization id"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Key name"
          }
        },
        "apiSuccess": {
          "keyAccount": {
            "type": "Object[]",
            "description": "Key-account entry",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the key-organization-account association"
              },
              "targetQuantity": {
                "type": "Integer",
                "description": "The default target quantity"
              },
              "account": {
                "type": "AccountSingle",
                "description": "Associated account data"
              },
              "organization": {
                "type": "OrgEntity",
                "description": "Associated organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The organization Id"
                  },
                  "name": {
                    "type": "String",
                    "description": "The organization name"
                  },
                  "shortcode": {
                    "type": "String",
                    "description": "The organization shortcode"
                  },
                  "hierarchyPath": {
                    "type": "Bigint[]",
                    "description": "The organization hierarchy path"
                  }
                }
              },
              "key": {
                "type": "ActivityEntity",
                "description": "Associated key data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the key"
                  },
                  "name": {
                    "type": "String",
                    "description": "Key's name"
                  },
                  "description": {
                    "type": "String",
                    "description": "Key's description"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "Key's active staus"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Delete key-organization-account entry by specified ID. Providers able to remove keys for clients from all accessible organizations. Clients can remove only their own keys",
        "src": "web-gateway/app/food/key/account/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/key/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the KeyOrganization"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Key-Consumed": {
      "GetAll": {
        "description": "Fetch all consumed keys",
        "src": "web-gateway/app/food/key/consumed/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/consumed"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The id of the account which consumed keys records are related with, if omitted on Client call, current user id is taken"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization id to get hierarchy for and check which consumed key records are related with"
          },
          "key": {
            "type": "Bigint",
            "optional": true,
            "description": "Id of the key which consumed keys records are related with"
          },
          "startDate": {
            "type": "String",
            "optional": true,
            "description": "Start date parameter passed in YYYY-MM-DD format. Start Date can be passed without endDate, then keys records starting from that date will be fetched"
          },
          "endDate": {
            "type": "String",
            "optional": true,
            "description": "End date parameter passed in YYYY-MM-DD format"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Number of records per page. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of records to offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "ConsumedKeyItem[]",
            "description": "Array of consumed keys records",
            "children": {
              "consumedId": {
                "type": "Bigint",
                "description": "The id of the consumed key record"
              },
              "account": {
                "type": "Entity",
                "description": "The account that created this consumed key record",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the account"
                  }
                }
              },
              "key": {
                "type": "NamedEntity",
                "description": "The key that was consumed",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The key id"
                  },
                  "name": {
                    "type": "String",
                    "description": "The key name"
                  }
                }
              },
              "organization": {
                "type": "OrgEntity",
                "description": "The organization that key is assigned to",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The organization Id"
                  },
                  "name": {
                    "type": "String",
                    "description": "The organization name"
                  },
                  "shortcode": {
                    "type": "String",
                    "description": "The organization shortcode"
                  },
                  "hierarchyPath": {
                    "type": "Bigint[]",
                    "description": "The organization hierarchy path"
                  }
                }
              },
              "consumedAt": {
                "type": "String",
                "description": "Date and time the key was consumed, in ISO8601 format"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The timestamp of when the record was created"
              },
              "quantity": {
                "type": "Float",
                "description": "The number of units of this key that was consumed"
              },
              "consumedMeal": {
                "type": "KeyConsumedMeal",
                "optional": true,
                "description": "The consumed meal entry that the key-consumption entry is coming from",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the consumed meal entry"
                  },
                  "consumedAt": {
                    "type": "String",
                    "description": "The date when the meal was consumed"
                  },
                  "meal": {
                    "type": "NamedEntity",
                    "description": "The actual consumed meal",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The id of the meal"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of the meal"
                      }
                    }
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single consumed key",
        "src": "web-gateway/app/food/key/consumed/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/consumed/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The consumed key id, passed as last URI parameter"
          }
        },
        "apiSuccess": {
          "consumedId": {
            "type": "Bigint",
            "description": "The id of the consumed key record"
          },
          "account": {
            "type": "Entity",
            "description": "The account that created this consumed key record",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the account"
              }
            }
          },
          "key": {
            "type": "NamedEntity",
            "description": "The key that was consumed",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The key id"
              },
              "name": {
                "type": "String",
                "description": "The key name"
              }
            }
          },
          "organization": {
            "type": "OrgEntity",
            "description": "The organization that key is assigned to",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The organization Id"
              },
              "name": {
                "type": "String",
                "description": "The organization name"
              },
              "shortcode": {
                "type": "String",
                "description": "The organization shortcode"
              },
              "hierarchyPath": {
                "type": "Bigint[]",
                "description": "The organization hierarchy path"
              }
            }
          },
          "consumedAt": {
            "type": "String",
            "description": "Date and time the key was consumed, in ISO8601 format"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "The timestamp of when the record was created"
          },
          "quantity": {
            "type": "Float",
            "description": "The number of units of this key that was consumed"
          },
          "consumedMeal": {
            "type": "ConsumedMeal",
            "optional": true,
            "description": "The consumed meal entry that the key-consumption entry is coming from",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of the consumed meal entry"
              },
              "consumedAt": {
                "type": "String",
                "description": "The date when the meal was consumed"
              },
              "meal": {
                "type": "NamedEntity",
                "description": "The actual consumed meal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the meal"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of the meal"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add a consumed key.",
        "src": "web-gateway/app/food/key/consumed/route.ts",
        "api": {
          "method": "POST",
          "url": "/key/consumed"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "keyOrganization": {
            "type": "Bigint",
            "description": "The id of the association of meal's key consumed and organization"
          },
          "quantity": {
            "type": "Number",
            "description": "The number of units of meal's key consumed"
          },
          "consumedAt": {
            "type": "String",
            "description": "Date and time the key was consumed, in ISO8601 format"
          },
          "consumedMeal": {
            "type": "Entity",
            "optional": true,
            "description": "Object with id of the key related meal that was consumed",
            "children": {
              "id": {
                "type": "Bigint",
                "optional": true,
                "description": "The id of the key related meal that was consumed"
              }
            }
          }
        },
        "apiSuccess": {
          "consumedId": {
            "type": "Integer",
            "description": "The id of the newly-created consumed meal's key record"
          }
        }
      },
      "Update": {
        "description": "Update a consumed key.",
        "src": "web-gateway/app/food/key/consumed/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/key/consumed/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the consumed key record"
          },
          "quantity": {
            "type": "Number",
            "optional": true,
            "description": "The number of units of meal's key consumed"
          },
          "consumedMeal": {
            "type": "Entity",
            "optional": true,
            "description": "Object with id of the key related meal that was consumed",
            "children": {
              "id": {
                "type": "Bigint",
                "optional": true,
                "description": "The id of the key related meal that was consumed"
              }
            }
          }
        }
      },
      "Delete": {
        "description": "Delete consumed",
        "src": "web-gateway/app/food/key/consumed/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/key/consumed/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the consumed meal's key that is to be deleted. Passed as the last URI parameter"
          }
        }
      }
    },
    "Key": {
      "GetAll": {
        "description": "Fetches all available keys according to query parameters",
        "src": "web-gateway/app/food/key/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/key"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "optional": true,
            "description": "The target search string"
          },
          "offset": {
            "type": "String",
            "optional": true,
            "default": "0",
            "description": "Offset for pagination"
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Flag that indicates whether the result should include not active keys"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "KeySegment[]",
            "description": "Key collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Id of a key"
              },
              "name": {
                "type": "String",
                "description": "Name of a key"
              },
              "description": {
                "type": "String",
                "description": "Description of a key"
              },
              "createdAt": {
                "type": "String",
                "description": "Date and time of key creation"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Flag that indicates whether the key is active"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Adds key with given parameters at body of request",
        "src": "web-gateway/app/food/key/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/key"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "description": "Desired name of a key"
          },
          "description": {
            "type": "String",
            "description": "Desired description of a key"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of created key"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Modifies key with given parameters at body of request. At least one property has to be present for an update",
        "src": "web-gateway/app/food/key/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/key"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Id of target key"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Desired new value of `isActive` field at target key"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Desired new value of `name` field at target key"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Desired new value of `description` field at target key"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Key-Organization": {
      "Create": {
        "description": "Associate key with organization",
        "src": "web-gateway/app/food/key/organization/route.ts",
        "api": {
          "method": "POST",
          "url": "/key/organization"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "key": {
            "type": "Bigint",
            "description": "ID of the key"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID."
          },
          "targetQuantity": {
            "type": "Integer",
            "optional": true,
            "description": "The target quantity"
          }
        },
        "apiSuccess": {
          "keyOrganizationId": {
            "description": "Association ID",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update|Deactivate key-organization association",
        "src": "web-gateway/app/food/key/organization/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/key/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization association"
          },
          "targetquantity": {
            "type": "Integer",
            "optional": true,
            "description": "The default target quantity"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "If this key-organization is active"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetSingle": {
        "description": "Fetch key-organization association by ID",
        "src": "web-gateway/app/food/key/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization association"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization association"
          },
          "organizationId": {
            "type": "Bigint",
            "description": "ID of the organization"
          },
          "key": {
            "type": "Object",
            "description": "Key-organization data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the key"
              },
              "name": {
                "type": "String",
                "description": "Key's name"
              },
              "description": {
                "type": "String",
                "description": "Key's description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Key activity status flag"
              }
            }
          },
          "targetQuantity": {
            "type": "Integer",
            "description": "The default target quantity"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Get all keys",
        "src": "web-gateway/app/food/key/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/key/organization"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account id to filter keys. Optional, if requester is a Client, otherwise required"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization id"
          },
          "keyOrganizationId": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of the key-organization association"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Key name"
          },
          "isActive": {
            "type": "String",
            "optional": true,
            "description": "Flag that indicates whether to include active/inactive key organization associations"
          },
          "directAssociation": {
            "type": "String",
            "optional": true,
            "default": "false",
            "description": "Flag that indicates whether we should return only key-organization associations that have direct account association defined too. Works together with 'account' parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the key-organization association"
          },
          "organizationId": {
            "type": "Bigint",
            "description": "ID of the organization"
          },
          "key": {
            "type": "Object",
            "description": "Key-organization data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the key"
              },
              "name": {
                "type": "String",
                "description": "Key's name"
              },
              "description": {
                "type": "String",
                "description": "Key's description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Key activity status flag"
              }
            }
          },
          "targetQuantity": {
            "type": "Integer",
            "description": "The default target quantity"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Delete key-organization entry by specified ID",
        "src": "web-gateway/app/food/key/organization/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/key/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the KeyOrganization"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Nutrition": {
    "Nutrition": {
      "GetSummary": {
        "description": "Retrieves a consumption summary for a given account and date range.",
        "src": "web-gateway/app/food/summary/route.ts",
        "api": {
          "method": "GET",
          "url": "/nutrition/summary"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "data": {
            "type": "String[]",
            "description": "Properties to be selected",
            "values": "'calories' | 'protein' | 'carbohydrates' | 'fiber' | 'sugar' | 'potassium' | 'sodium' | 'totalFat' | 'saturatedFat' | 'cholesterol'"
          },
          "account": {
            "type": "Bigint",
            "description": "Account for which the summary should be retrieved"
          },
          "startDate": {
            "type": "Date",
            "description": "Start date for the summary"
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "description": "End date for the summary"
          },
          "unit": {
            "type": "String",
            "description": "Unit of aggregation for the summary",
            "values": "'day' | 'week' | 'month'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Nutrition summary data items, aggregated over selected unit of time",
            "children": {
              "date": {
                "type": "Date",
                "description": "Date of entry. For week and month, defaults to first day of week or month respectively."
              },
              "recordedDateCount": {
                "type": "Number",
                "description": "Count of distinct dates that have recorded consumption entries"
              },
              "calories": {
                "type": "Object",
                "optional": true,
                "description": "Calorie consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "protein": {
                "type": "Object",
                "optional": true,
                "description": "Protein consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "carbohydrates": {
                "type": "Object",
                "optional": true,
                "description": "Carbs consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "fiber": {
                "type": "Object",
                "optional": true,
                "description": "Fiber consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "sugar": {
                "type": "Object",
                "optional": true,
                "description": "Sugar consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "potassium": {
                "type": "Object",
                "optional": true,
                "description": "Potassium consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "sodium": {
                "type": "Object",
                "optional": true,
                "description": "Sodium consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "totalFat": {
                "type": "Object",
                "optional": true,
                "description": "Total fat consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "saturatedFat": {
                "type": "Object",
                "optional": true,
                "description": "Saturated fat consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              },
              "cholesterol": {
                "type": "Object",
                "optional": true,
                "description": "Cholesterol consumption data.",
                "children": {
                  "dailyAverage": {
                    "type": "Number",
                    "description": "Daily average consumption value"
                  },
                  "total": {
                    "type": "Number",
                    "description": "Total consumed value"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Goal": {
    "Goal": {
      "GetSingle": {
        "description": "Fetch goals for a single user",
        "src": "web-gateway/app/goal/route.ts",
        "api": {
          "method": "GET",
          "url": "/goal"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Only fetch goal records which are associated with this account. Optional for Client requests, otherwise required"
          }
        },
        "apiSuccess": {
          "goals": {
            "type": "Object[]",
            "description": "A collection of goals",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The account-goal association ID"
              },
              "quantity": {
                "type": "Number",
                "description": "The quantity associated with the goal"
              },
              "type": {
                "type": "Object",
                "description": "Type of the associated goal",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the goal type"
                  },
                  "name": {
                    "type": "String",
                    "description": "Name of the goal type"
                  },
                  "code": {
                    "type": "String",
                    "description": "Code of the goal type"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Upsert": {
        "description": "Upsert goal record",
        "src": "web-gateway/app/goal/route.ts",
        "api": {
          "method": "PUT",
          "url": "/goal"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Upsert a goal record and associate with this account. Optional for Client requests, otherwise required"
          },
          "goals": {
            "type": "Array",
            "description": "Array of objects which contain goal IDs and quantities. At least one goal is required",
            "children": {
              "goalTypeId": {
                "type": "Bigint",
                "description": "Goal type ID to upsert"
              },
              "quantity": {
                "type": "Integer",
                "description": "The numeric value to set for this goal."
              }
            }
          }
        }
      },
      "Update": {
        "description": "Update goal record",
        "src": "web-gateway/app/goal/route.ts",
        "api": {
          "method": "PUT",
          "url": "/goal/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Account goal ID to update."
          },
          "quantity": {
            "type": "Integer",
            "description": "The numeric value to set for this goal."
          }
        }
      },
      "Delete": {
        "description": "Delete goal record",
        "src": "web-gateway/app/goal/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/goal/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Account goal ID to remove."
          }
        }
      }
    }
  },
  "Hydration": {
    "Hydration": {
      "Create": {
        "description": "Create hydration entries for a user",
        "src": "web-gateway/app/hydration/route.ts",
        "api": {
          "method": "POST",
          "url": "/hydration"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account associated to post hydration. Optional for Client requests, otherwise required"
          },
          "date": {
            "type": "String",
            "description": "Date of entry for hydration, in YYYY-MM-DD format"
          },
          "quantity": {
            "type": "Integer",
            "description": "Amount of liquids/hydration that was consumed"
          },
          "unit": {
            "type": "String",
            "description": "Shows which format that user drank the liquid (oz|cup|ml|liter)"
          }
        }
      },
      "Update": {
        "description": "Edit hydration entry for a user",
        "src": "web-gateway/app/hydration/route.ts",
        "api": {
          "method": "PUT",
          "url": "/hydration"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account associated to post hydration. Optional for Client requests, otherwise required"
          },
          "date": {
            "type": "String",
            "description": "Date of entry for hydration, in YYYY-MM-DD format"
          },
          "quantity": {
            "type": "Integer",
            "description": "Amount of liquids/hydration that was consumed, in ml"
          },
          "unit": {
            "type": "String",
            "description": "Shows which format that user drank the liquid (oz|cup|ml|liter)"
          }
        }
      },
      "Delete": {
        "description": "Delete hydration entry for a user",
        "src": "web-gateway/app/hydration/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/hydration"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account associated to post hydration. Required if requester is provider, client account id will be automatically populated"
          },
          "date": {
            "type": "String",
            "description": "Date of entry for hydration, in YYYY-MM-DD format"
          }
        }
      },
      "GetAll": {
        "description": "Get hydration entries for a user. Returned in paginated groups of 10.",
        "src": "web-gateway/app/hydration/route.ts",
        "api": {
          "method": "GET",
          "url": "/hydration"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The account of the user. Optional for Client requests, otherwise required"
          },
          "startDate": {
            "type": "String",
            "optional": true,
            "description": "Date passed as the start time being passed, if not passed, defaults to current day. YYYY-MM-DD format"
          },
          "endDate": {
            "type": "String",
            "optional": true,
            "description": "Date passed as the end time being passed. YYYY-MM-DD format"
          },
          "order": {
            "type": "String",
            "optional": true,
            "description": "The order to return the data in (dateAsc|dateDesc).  Defaults to dateAsc"
          },
          "offset": {
            "type": "Integer",
            "optional": true,
            "description": "Number of entries to offset from beginning of query."
          }
        },
        "apiSuccess": {
          "success": {
            "description": "An object of hydration arrays",
            "type": "GetAllHydrationResponse",
            "code": "200"
          }
        },
        "hasResponse": true
      },
      "GetSummary": {
        "description": "Get hydration summary, in daily, weekly, or monthly average.",
        "src": "web-gateway/app/hydration/route.ts",
        "api": {
          "method": "GET",
          "url": "/hydration/summary"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The client id. Optional for Client requests, otherwise required"
          },
          "startDate": {
            "type": "Date",
            "description": "Select data that starts at or after this time, in 'YYYY-MM-DD' format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "description": "Select data that ends at or before this time, in 'YYYY-MM-DD' format. Todays date is default if left blank"
          },
          "unit": {
            "type": "String",
            "description": "The unit of time that the results should be returned in (day|week|month).  Keep in mind that the general fetch hydration endpoint returns the daily data"
          }
        },
        "apiSuccess": {
          "hydration": {
            "type": "Array",
            "description": "An object of hydration arrays",
            "children": {
              "date": {
                "type": "String",
                "description": "The date that starts the week or month"
              },
              "total": {
                "type": "Integer",
                "description": "The total number of mL drank over this period"
              },
              "max": {
                "type": "Integer",
                "description": "The maximum number of mL drank on any one day of this period"
              },
              "average": {
                "type": "Integer",
                "description": "The average number of mL drank on any day within this period"
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Logging": {
    "Logging": {
      "Create": {
        "description": "Creates a new log record from the front-end, and saves it in sumologic",
        "src": "web-gateway/app/logging/route.ts",
        "api": {
          "method": "POST",
          "url": "/logging"
        },
        "version": "2.0",
        "apiParam": {
          "app": {
            "type": "String",
            "description": "The id of the app from which the record was generateed",
            "values": "'ccr-mobileApp' | 'ccr-dashboard'"
          },
          "keywords": {
            "type": "String[]",
            "optional": true,
            "description": "An array of strings to identify the record"
          },
          "logLevel": {
            "type": "LoggingLevel",
            "description": "The level of severity of this record",
            "values": "'trace' | 'debug' | 'info' | 'warning' | 'error' | 'fatal'"
          },
          "message": {
            "type": "String",
            "description": "The message to record - can be any string or JSON value"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Measurement": {
    "Measurement-Activity": {
      "GetSummary": {
        "description": "Fetch activity summary",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/activity/summary"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The client account id. Optional for Client requests, otherwise required"
          },
          "start": {
            "type": "Date",
            "description": "Start of the date range to get the activity for"
          },
          "end": {
            "type": "Date",
            "optional": true,
            "description": "End of the date range to get the activity for. Defaults to today if not provided"
          },
          "device": {
            "type": "Number",
            "optional": true,
            "description": "Device ID to filter with"
          },
          "unit": {
            "type": "MeasurementActivityUnit",
            "description": "The unit of time that the results should be aggregated with.",
            "values": "'day' | 'week' | 'month'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "MeasurementActivitySegment[]",
            "description": "Array of the aggregated dates",
            "children": {
              "date": {
                "type": "Date",
                "description": "Segment date"
              },
              "entries": {
                "type": "MeasurementActivityEntry[]",
                "description": "Activity entries that are aggregated for the date",
                "children": {
                  "date": {
                    "type": "Date",
                    "description": "Actual activity date"
                  },
                  "steps": {
                    "type": "Number",
                    "description": "Steps value"
                  },
                  "elevation": {
                    "type": "Number",
                    "optional": true,
                    "description": "Elevation value"
                  },
                  "distance": {
                    "type": "Number",
                    "optional": true,
                    "description": "Distance value"
                  },
                  "device": {
                    "type": "Device",
                    "description": "Device/source that the steps were recorded with",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "ID of the device"
                      },
                      "name": {
                        "type": "String",
                        "description": "Name of the device"
                      }
                    }
                  }
                }
              },
              "aggregates": {
                "type": "MeasurementActivityAggregates",
                "description": "Calculated aggregates for the date",
                "children": {
                  "steps": {
                    "type": "MeasurementSteps",
                    "description": "Steps aggregates",
                    "children": {
                      "max": {
                        "type": "Number",
                        "description": "Maximum recorded step value in the selected period & time unit"
                      },
                      "min": {
                        "type": "Number",
                        "description": "Minimum recorded step value in the selected period & time unit"
                      },
                      "avg": {
                        "type": "Number",
                        "description": "Average step value in the selected period & time unit"
                      },
                      "total": {
                        "type": "Number",
                        "description": "Total steps in the selected period & time unit"
                      }
                    }
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetHistory": {
        "description": "Fetch activity history.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/activity/history"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The client id. Optional for Client requests, otherwise required"
          },
          "startDate": {
            "type": "Date",
            "description": "Start date to search records for"
          },
          "endDate": {
            "type": "Date",
            "description": "End date to search records for"
          },
          "device": {
            "type": "Bigint",
            "optional": true,
            "description": "Measurement device id"
          }
        },
        "apiSuccess": {
          "history": {
            "type": "Array",
            "description": "Array of activity objects, ordered with date descending",
            "children": {
              "date": {
                "type": "Date",
                "description": "The day for which this activity profile records"
              },
              "recordedAt": {
                "type": "Date",
                "description": "The time at which the measurement was stored in the database"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Get activity measurements for a all users or a single user, during a defined date range.  If no date range is provided (start_date and end_date) results for the current day will be returned.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/activity"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The user id to fetch measurements for. This is auto-populated for clients."
          },
          "start_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements starting at this date, in YYYY-MM-DD format."
          },
          "end_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements up until and including this date, in YYYY-MM-DD format."
          },
          "device": {
            "type": "Number",
            "optional": true,
            "description": "Fetches measurements for a particular device type. If blank results will return all measurements"
          },
          "max": {
            "type": "Number",
            "optional": true,
            "description": "Maximum number of measurements to fetch. If omitted or NULL, no limit will be set."
          },
          "direction": {
            "type": "String",
            "optional": true,
            "description": "Direction to sort the results in (asc|desc) on the recorded_at column.  Defaults to asc."
          }
        },
        "apiSuccess": {
          "activityObject": {
            "type": "ActivitySegment[]",
            "description": "Array of activity measurement objects",
            "children": {
              "id": {
                "type": "Integer",
                "description": "The id of this measurement entry"
              },
              "user_id": {
                "type": "Integer",
                "description": "The id of the user to which this measurement belongs"
              },
              "recorded_at": {
                "type": "Timestamp",
                "description": "The time this measurement was stored in the database"
              },
              "activity_date": {
                "type": "Date",
                "description": "The day for which this activity profile records"
              },
              "timezone": {
                "type": "String",
                "description": "The timezone the user was in when they recorded the activity"
              },
              "steps": {
                "type": "Integer",
                "description": "The number of steps the user took this day"
              },
              "distance": {
                "type": "Integer",
                "description": "The total distance in meters walked during this day"
              },
              "calories": {
                "type": "Integer",
                "description": "The total calories burned in KiloCalories during this day"
              },
              "elevation": {
                "type": "Integer",
                "description": "The elevation of the user when the reading was taken"
              },
              "soft": {
                "type": "Integer",
                "description": "Number of second spent performing physically soft activity"
              },
              "moderate": {
                "type": "Integer",
                "description": "Number of second spent performing physically moderate activity"
              },
              "intense": {
                "type": "Integer",
                "description": "Number of second spent performing physically hard activity"
              },
              "source": {
                "type": "Integer",
                "description": "The device which took these measurements, matches up to the <code>measurement_devices</code> table"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetDetailed": {
        "description": "Get detailed measurements for a single user, during a defined date range.  If no date range is provided results for the current day will be returned.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/activity/detailed"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The user id to fetch measurements for. This is auto-populated for clients."
          },
          "start_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements starting at this date, in YYYY-MM-DD format."
          },
          "end_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements up until and including this date, in YYYY-MM-DD format."
          }
        },
        "apiSuccess": {
          "activities": {
            "type": "Array",
            "description": "Array of objects of activity segments",
            "children": {
              "activity_start": {
                "type": "Timestamp",
                "description": "The start time of this activity segment"
              },
              "activity_level": {
                "type": "Integer",
                "description": "The level of activity, 0 is least active and 100 is most active"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Add": {
        "description": "Add activity measurement(s) for a single user. You may add data for up to 15 days at a time. Existing activity measurements in the database will be deleted and overwritten by any passed data.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/activity"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The account ID of the client to add the measurement for"
          },
          "activity": {
            "type": "Array",
            "description": "Array of objects, each representing a single activity record",
            "children": {
              "date": {
                "type": "Date",
                "description": "The day for this activity measurement, in YYYY-MM-DD format"
              },
              "device": {
                "type": "Integer",
                "description": "The id of the device type.  The Selvera tracker is device id 4"
              },
              "steps": {
                "type": "Integer",
                "description": "The number of steps taken"
              },
              "timezone": {
                "type": "String",
                "optional": true,
                "description": "The timezone of the user when the measurement was recorded.  For example 'America/New_York'"
              },
              "distance": {
                "type": "Integer",
                "optional": true,
                "description": "The distanced moved during the day, in meters"
              },
              "calories": {
                "type": "Integer",
                "optional": true,
                "description": "The number of calories burned during the day, in kilocalories"
              },
              "elevation": {
                "type": "Integer",
                "optional": true,
                "description": "The elevation of the user when recording the measurement, in meters"
              },
              "soft": {
                "type": "Integer",
                "optional": true,
                "description": "The number of steps taken at a soft effort level"
              },
              "moderate": {
                "type": "Integer",
                "optional": true,
                "description": "The number of steps taken at a moderate effort level"
              },
              "intense": {
                "type": "Integer",
                "optional": true,
                "description": "The number of steps taken at an intense effort level"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete activity measurement for a single user.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/measurement/activity"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The id of the client you are deleting the measurement for. Only required if requester is provider."
          },
          "date": {
            "type": "Date",
            "description": "The day for this activity measurement, in YYYY-MM-DD format"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "AddDetailed": {
        "description": "Record detailed activity measurements for a client.",
        "src": "web-gateway/app/measurement/activity/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/activity/detailed"
        },
        "version": "1.0",
        "permissions": [
          "Client",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The id of the client"
          },
          "activity": {
            "type": "Array",
            "description": "Array objects of 15-minute activity segments",
            "children": {
              "time": {
                "type": "Timestamp",
                "description": "The start time of this 15-minute activity segment, in ISO 8601 format"
              },
              "activity": {
                "type": "Number",
                "description": "The activity rating during this period"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Measurement-Body": {
      "Create": {
        "description": "Add a body measurements for a single user. Only clients and providers have access to this endpoint.  The measurement will be added for the authenticated user if client, or for the clientId if the requester is a provider",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/body/"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The account ID of the client to add the measurement for. Optional for Client requests, otherwise required"
          },
          "recordedAt": {
            "type": "String",
            "description": "The date and time this measurement was taken in ISO8601 format"
          },
          "device": {
            "type": "Integer",
            "description": "The id of the device type"
          },
          "height": {
            "type": "Integer",
            "optional": true,
            "description": "The height of the client in cm"
          },
          "weight": {
            "type": "Integer",
            "optional": true,
            "description": "The weight of the client in grams"
          },
          "fatFreeMass": {
            "type": "Integer",
            "optional": true,
            "description": "The weight of fat free mass in grams"
          },
          "bodyFat": {
            "type": "Integer",
            "optional": true,
            "description": "Body fat percent out of 100,000 units.  For example, 37.23% would be stored as 37230"
          },
          "fatMassWeight": {
            "type": "Integer",
            "optional": true,
            "description": "The weight of the fat mass in grams"
          },
          "bloodPressureDiastolic": {
            "type": "Integer",
            "optional": true,
            "description": "Diastolic blood pressure"
          },
          "bloodPressureSystolic": {
            "type": "Integer",
            "optional": true,
            "description": "Systolic blood pressure"
          },
          "heartRate": {
            "type": "Integer",
            "optional": true,
            "description": "Pulse"
          },
          "bloodOxygenLevel": {
            "type": "Integer",
            "optional": true,
            "description": "Percent out of 100,000 units.  For example, 98.23% would be stored 98230"
          },
          "boneWeight": {
            "type": "Integer",
            "optional": true,
            "description": "Weight of the bones in grams"
          },
          "basalMetabolicRate": {
            "type": "Integer",
            "optional": true,
            "description": "Basal metabolic rate in kcal/day"
          },
          "musclePercentage": {
            "type": "Integer",
            "optional": true,
            "description": "Percentage of weight that is muscle, stored out of 100,000 units.  For example, 37.23% would be stored as 37230"
          },
          "visceralFatPercentage": {
            "type": "Integer",
            "optional": true,
            "description": "Visceral fat percentage, stored out of 100,000 units.  For example, 37.23% would be stored as 37230"
          },
          "waterPercentage": {
            "type": "Integer",
            "optional": true,
            "description": "Water/hydration percentage, stored out of 100,000 units.  For example, 37.23% would be stored as 37230"
          },
          "waist": {
            "type": "Integer",
            "optional": true,
            "description": "Waist measurement, stored as mm. For example, 50 cm would be stored as 500"
          },
          "arm": {
            "type": "Integer",
            "optional": true,
            "description": "Arm measurement, stored as mm. For example, 50 cm would be stored as 500"
          },
          "hip": {
            "type": "Integer",
            "optional": true,
            "description": "Hip measurement, stored as mm. For example, 250 cm would be stored as 2500"
          },
          "chest": {
            "type": "Integer",
            "optional": true,
            "description": "Chest measurement, stored as mm. For example, 250 inch would be stored as 6350"
          },
          "thigh": {
            "type": "Integer",
            "optional": true,
            "description": "Thigh measurement, stored as mm. For example, 150 inch would be stored as 3810"
          },
          "neck": {
            "type": "Integer",
            "optional": true,
            "description": "Neck measurement, stored as mm. For example, 100 inch would be stored as 2540"
          },
          "thorax": {
            "type": "Integer",
            "optional": true,
            "description": "Thorax measurement, stored as mm. For example, 50 inch would be stored as 1270"
          },
          "totalCholesterol": {
            "type": "Integer",
            "optional": true,
            "description": "Total cholesterol measurement, saved in mg/dl"
          },
          "ldl": {
            "type": "Integer",
            "optional": true,
            "description": "Low-density lipoprotein level (LDL) measurement, saved in mg/dl"
          },
          "hdl": {
            "type": "Integer",
            "optional": true,
            "description": "High-density lipoprotein level (HDL) measurement, saved in mg/dl"
          },
          "vldl": {
            "type": "Integer",
            "optional": true,
            "description": "Very-low-density lipoprotein level (VLDL) measurement, saved in mg/dl"
          },
          "triglycerides": {
            "type": "Integer",
            "optional": true,
            "description": "Triglycerides measurement, saved in mg/dl"
          },
          "fastingGlucose": {
            "type": "Integer",
            "optional": true,
            "description": "Fasting glucose measurement, saved in mg/dl"
          },
          "hba1c": {
            "type": "Integer",
            "optional": true,
            "description": "Glycated hemoglobin (hemoglobin A1c) percentage level measurement, out of 100,000 units. For example, 5.5% would be stored as 5500"
          },
          "insulin": {
            "type": "Integer",
            "optional": true,
            "description": "Insulin measurement, saved in uU/ml"
          },
          "hsCrp": {
            "type": "Integer",
            "optional": true,
            "description": "High-sensitivity C-reactive protein (hs-CRP) fractional level Thorax measurement, where 10,000 units is 1 mg/l. For example, 5.5 mg/l would be stored as 5500."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of newly-created entry"
          }
        }
      },
      "GetAll": {
        "description": "Get body measurements and summary",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/body"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The client id. Optional for Client requests, otherwise required"
          },
          "data": {
            "type": "String[]",
            "description": "An array of data columns being filtered through. The allowed columns are any of the optional inputs to <a href=\"#api-Measurement_Body-Create\">Add user body measurements</a> with the addition of 'bmi' (which is stored as 10,000 units, e.g. 37.25 would be stored as 3725) and the subtraction of 'height'."
          },
          "startDate": {
            "type": "Date",
            "description": "Select measurements which were recorded at or after this date, in 'YYYY-MM-DD' format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "default": "Today",
            "description": "Select measurements which were recorded at or before this date, in 'YYYY-MM-DD' format."
          },
          "max": {
            "type": "Mixed",
            "optional": true,
            "default": "50",
            "description": "Maximum number of dates returned in data array and considered for summary statistics (has no effect on oldest and previous). Can be set to 'all' to include all entries."
          },
          "unit": {
            "type": "String",
            "description": "The unit of time that the results should be returned in",
            "values": "'day' | 'week' | 'month'"
          },
          "aggregation": {
            "type": "String",
            "optional": true,
            "description": "Type grouping results",
            "values": "'average' | 'min' | 'max' | 'mostRecent' | 'oldest'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Array of data objects. There will be one entry for COLUMN for each element passed in via the data array. Results are given in ascending order by date",
            "children": {
              "id": {
                "type": "Integer",
                "description": "ID of measurement record."
              },
              "date": {
                "type": "Date",
                "description": "The starting date of the measurement record as an ISO date string"
              },
              "COLUMN": {
                "type": "Integer",
                "description": "The value for COLUMN."
              }
            }
          },
          "summary": {
            "type": "Object",
            "description": "Summary Object for the result set. There will be a triplet of entries (COLUMNMin, COLUMNMax, COLUMNAverage) for each COLUMN passed in via the data column.",
            "children": {
              "oldestRecord": {
                "type": "Date",
                "description": "The timestamp of the client's oldest weigh in or an empty string if not applicable"
              },
              "oldestWeight": {
                "type": "Integer",
                "description": "The weight measurement at the client's oldest weigh in (or 0 if not given)"
              },
              "previousWeight": {
                "type": "Integer",
                "description": "Weight at the last measurement (or 0 if not given)"
              },
              "previousBMI": {
                "type": "Integer",
                "description": "BMI at the last measurement (or 0 if not given)"
              },
              "previousBodyFat": {
                "type": "Integer",
                "description": "Body fat at the last measurement (or 0 if not given)"
              },
              "COLUMNMin": {
                "type": "Integer",
                "description": "The minimum value for COLUMN in the result set"
              },
              "COLUMNMax": {
                "type": "Integer",
                "description": "The maximum value for COLUMN in the result set"
              },
              "COLUMNAverage": {
                "type": "Integer",
                "description": "The average value for COLUMN in the result set"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSampled": {
        "description": "Fetch sampled body measurement collection",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/body/sampled"
        },
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "version": "2.0",
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account for which the sampled measurements should be retrieved. Automatically filled in for clients."
          },
          "count": {
            "type": "Integer",
            "optional": true,
            "default": "5",
            "description": "The requested sample count",
            "values": "1...100"
          },
          "data": {
            "type": "String",
            "optional": true,
            "default": "weight",
            "description": "Data point to retrieve",
            "values": "'weight'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "SampledEntry[]",
            "description": "Collection of sampled measurement entries",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of measurement record."
              },
              "account": {
                "type": "Bigint",
                "description": "The id of the account to which the measurement belongs"
              },
              "recordedAt": {
                "type": "Timestamp",
                "description": "The timestamp of the measurement record as an ISO date string."
              },
              "updatedAt": {
                "type": "Timestamp",
                "optional": true,
                "description": "The timestamp the measurement was updated."
              },
              "value": {
                "type": "Integer",
                "description": "The value for requested data parameter"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSummary": {
        "description": "Get body measurements and summary",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/body/summary"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account for which the summary should be retrieved. Automatically filled in for clients."
          },
          "start": {
            "type": "Date",
            "optional": true,
            "description": "Start date"
          },
          "end": {
            "type": "Date",
            "optional": true,
            "description": "End date"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "SummaryPair[]",
            "description": "Summary item collection. Essentially a map/dictionary between summary property and the value. Properties that do not have any data recorded for them will not be included in the collection.",
            "children": {
              "key": {
                "type": "SummaryProperty",
                "description": "Key property in the summary",
                "values": "'bmi' | 'weight' | 'bodyFat' | 'hydration' | 'leanMass'"
              },
              "value": {
                "type": "SummaryElement",
                "description": "Summary element value for specific key.",
                "children": {
                  "record": {
                    "type": "SummaryRecord",
                    "description": "Key property record data.",
                    "children": {
                      "first": {
                        "type": "Record",
                        "description": "First record",
                        "children": {
                          "id": {
                            "type": "Bigint",
                            "description": "ID of the measurement entry"
                          },
                          "recordedAt": {
                            "type": "Timestamp",
                            "description": "Recorded at timestamp"
                          },
                          "value": {
                            "type": "Number",
                            "description": "Value of the record"
                          }
                        }
                      },
                      "last": {
                        "type": "Record",
                        "description": "Last record",
                        "children": {
                          "id": {
                            "type": "Bigint",
                            "description": "ID of the measurement entry"
                          },
                          "recordedAt": {
                            "type": "Timestamp",
                            "description": "Recorded at timestamp"
                          },
                          "value": {
                            "type": "Number",
                            "description": "Value of the record"
                          }
                        }
                      },
                      "count": {
                        "type": "Number",
                        "description": "Count of the records with the specified data point in given date range"
                      }
                    }
                  },
                  "change": {
                    "type": "SummaryChange",
                    "description": "Change value.",
                    "children": {
                      "value": {
                        "type": "Number",
                        "description": "Change numeric value"
                      },
                      "percentage": {
                        "type": "Number",
                        "description": "Change percentage, compared to the first value recorded."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update a body measurement",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/measurement/body/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The measurement ID to update"
          },
          "recordedAt": {
            "type": "String",
            "optional": true,
            "description": "The date and time to update"
          },
          "PARAM": {
            "type": "Any",
            "optional": true,
            "description": "The parameter to update, where PARAM can be any of the optional inputs to <a href=\"#api-Measurement_Body-Create\">Add user body measurements</a>. The value for the field can be either an integer to update the value, or null or an empty string to unset it."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete a body measurement.",
        "src": "web-gateway/app/measurement/body/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/measurement/body/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The measurement ID to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Measurement-Sleep": {
      "GetAllWithSummary": {
        "description": "Fetch sleep measurements and summary",
        "src": "web-gateway/app/measurement/sleep/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/sleep/summary"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The client id"
          },
          "data": {
            "type": "String[]",
            "description": "An array of data columns being filtered through",
            "values": "'total' | 'average' | 'sleepQuality'"
          },
          "startDate": {
            "type": "Date",
            "description": "Select sleep dates that are on or after this date, in 'YYYY-MM-DD' format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "default": "Today",
            "description": "Select sleep dates that are on or before this date, in 'YYYY-MM-DD' format"
          },
          "max": {
            "type": "Mixed",
            "optional": true,
            "default": "50",
            "description": "Maximum number of results. Can be set to 'all' to include all entries."
          },
          "unit": {
            "type": "String",
            "description": "The unit of time that the results should be returned in",
            "values": "'day' | 'week' | 'month'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Array of measurement objects",
            "children": {
              "date": {
                "type": "Date",
                "description": "The start date for the returning result set in 'YYYY-MM-DD' format"
              },
              "sleepMinutes": {
                "type": "Integer",
                "description": "The total number of minutes slept on the date"
              },
              "averageMinutes": {
                "type": "Integer",
                "description": "The average number of minutes slept over all sleep periods on the date"
              },
              "sleepQuality": {
                "type": "Date",
                "description": "The average sleep quality over all sleep periods on the date"
              }
            }
          },
          "summary": {
            "type": "MeasurementSleepSummary",
            "description": "Summary Object",
            "children": {
              "sleepMinutesMin": {
                "type": "Integer",
                "description": "The minimum average value returned for the result set"
              },
              "sleepMinutesMax": {
                "type": "Integer",
                "description": "The average value returned for the result set"
              },
              "previousSleepStart": {
                "type": "Date/Null/00:00:00",
                "description": "The start time of the previous record where sleep was recorded. If there are no sleep measurements, will be '00:00:00'; if not defined for last sleep measurement, will be null."
              },
              "previousSleepEnd": {
                "type": "Date/Null/00:00:00",
                "description": "The end time of the previous record where sleep was recorded. Has same exceptional behavior as summary.previousSleepStart."
              },
              "previousSleepTotal": {
                "type": "Integer",
                "description": "The total amount of time slept for the previous record where sleep was recorded"
              },
              "sleepQualityAverage": {
                "type": "Integer",
                "description": "The average sleep quality for the result set"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Fetch basic (non-detailed) sleep measurements for a single user, during a defined date range.  If no date range is provided (start_date and end_date) results for the current day will be returned.",
        "src": "web-gateway/app/measurement/sleep/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/sleep"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "optional": true,
            "description": "The user id to fetch measurements for.  This is auto-populated for clients."
          },
          "start_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements starting at this date, in YYYY-MM-DD format."
          },
          "end_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements up until and including this date, in YYYY-MM-DD format."
          }
        },
        "apiSuccess": {
          "sleepObject": {
            "type": "Object[]",
            "description": "Sleep measurement object",
            "children": {
              "id": {
                "type": "Integer",
                "description": "The id of this measurement entry"
              },
              "user_id": {
                "type": "Integer",
                "description": "The id of the user to which this measurement belongs"
              },
              "recorded_at": {
                "type": "Timestamp",
                "description": "The time this measurement was stored in the database"
              },
              "sleep_date": {
                "type": "Date",
                "description": "The day for which this sleep records"
              },
              "timezone": {
                "type": "String",
                "description": "The timezone the user was in when they recorded the sleep"
              },
              "sleep_start": {
                "type": "Timestamp",
                "description": "The time the sleep started"
              },
              "sleep_end": {
                "type": "Timestamp",
                "description": "The time the sleep ended"
              },
              "total": {
                "type": "Integer",
                "description": "The total number of seconds of the sleep"
              },
              "time_to_sleep": {
                "type": "Integer",
                "description": "Number of seconds it took to fall asleep"
              },
              "wake_up_count": {
                "type": "Integer",
                "description": "Number of seconds spent waking up"
              },
              "deep_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in deep sleep"
              },
              "wake_up": {
                "type": "Integer",
                "description": "Number of seconds spent woken up"
              },
              "light_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in light sleep"
              },
              "rem_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in REM sleep"
              },
              "source": {
                "type": "Integer",
                "description": "The device which took these measurements, matches up to the <code>measurement_devices</code> table"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetAllDetailed": {
        "description": "Fetch detailed measurements for a single user, during a defined date range.  If no date range is provided (start_date and end_date) results for the current day will be returned.",
        "src": "web-gateway/app/measurement/sleep/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/sleep/detailed"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "optional": true,
            "description": "The user id to fetch measurements for.  This is auto-populated for clients."
          },
          "start_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements starting at this date, in YYYY-MM-DD format."
          },
          "end_date": {
            "type": "Date",
            "optional": true,
            "description": "Fetch measurements up until and including this date, in YYYY-MM-DD format."
          }
        },
        "apiSuccess": {
          "sleepObject": {
            "type": "Object[]",
            "description": "Sleep measurement object",
            "children": {
              "id": {
                "type": "Integer",
                "description": "The id of this measurement entry"
              },
              "user_id": {
                "type": "Integer",
                "description": "The id of the user to which this measurement belongs"
              },
              "recorded_at": {
                "type": "Timestamp",
                "description": "The time this measurement was stored in the database"
              },
              "sleep_date": {
                "type": "Date",
                "description": "The day for which this sleep records"
              },
              "timezone": {
                "type": "String",
                "description": "The timezone the user was in when they recorded the sleep"
              },
              "sleep_start": {
                "type": "Timestamp",
                "description": "The time the sleep started"
              },
              "sleep_end": {
                "type": "Timestamp",
                "description": "The time the sleep ended"
              },
              "total": {
                "type": "Integer",
                "description": "The total number of seconds of the sleep"
              },
              "time_to_sleep": {
                "type": "Integer",
                "description": "Number of seconds it took to fall asleep"
              },
              "wake_up_count": {
                "type": "Integer",
                "description": "Number of seconds spent waking up"
              },
              "deep_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in deep sleep"
              },
              "wake_up": {
                "type": "Integer",
                "description": "Number of seconds spent woken up"
              },
              "light_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in light sleep"
              },
              "rem_sleep": {
                "type": "Integer",
                "description": "Number of seconds spent in REM sleep"
              },
              "source": {
                "type": "Integer",
                "description": "The device which took these measurements, matches up to the <code>measurement_devices</code> table"
              },
              "detailed": {
                "type": "Array",
                "description": "Array of objects of 15 minute sleep segments",
                "children": {
                  "sleep_start": {
                    "type": "Timestamp",
                    "description": "Start of sleep segment"
                  },
                  "sleep_quality": {
                    "type": "Integer",
                    "description": "Quality of sleep on a 1-100 scale.  1 is most restful and 100 is least restful."
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Post sleep measurements for a single user, during a defined date range",
        "src": "web-gateway/app/measurement/sleep/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/sleep"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "clientId": {
            "type": "Bigint",
            "description": "The account of the user to add sleep for (required for providers, ignored for clients)"
          },
          "deviceId": {
            "type": "Bigint",
            "description": "The device which took these measurements"
          },
          "sleep": {
            "type": "Array",
            "description": "Array of days contain sleep data",
            "children": {
              "day": {
                "type": "Array",
                "description": "Array (not named!) of objects containing 15 minute sleep segment data for a single continuous day/sleep segment.  All sleep segments should be in chronological order.  Also, an entry must exist for each 15 minute segment.",
                "children": {
                  "time": {
                    "type": "Timestamp",
                    "description": "The start time of this 15-minute sleep segment, in ISO 8601 format"
                  },
                  "quality": {
                    "type": "Integer",
                    "description": "The quality of the sleep"
                  }
                }
              }
            }
          }
        },
        "apiParamExample": {
          "Request-Example:": {
            "type": "json",
            "description": "{\n\"device\": 4,\n\"sleep\"\t: [\n[\n{\n\"time\": \"2015-06-17T09:58:48-04:00\",\n\"quality\": 25\n},\n{\n\"time\": \"2015-06-17T10:13:48-04:00\",\n\"quality\": 21\n},\n{\n\"time\": \"2015-06-17T10:28:48-04:00\",\n\"quality\": 19\n}\n],\n[\n{\n\"time\": \"2015-06-18T09:58:48-04:00\",\n\"quality\": 18\n},\n{\n\"time\": \"2015-06-18T10:13:48-04:00\",\n\"quality\": 48\n}\n]\n]\n}"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Exercise": {
    "Exercise-Association": {
      "Create": {
        "description": "Create exercise type-organization association. Available only for providers with 'admin' permission for requested organization.",
        "src": "web-gateway/app/measurement/exercise/association/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/exercise/association"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "exerciseType": {
            "type": "Bigint",
            "description": "Exercise type ID"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "icon": {
            "type": "String",
            "optional": true,
            "description": "An SVG icon to use"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization association ID"
          }
        }
      },
      "GetAll": {
        "description": "Fetch matching exercise type-organization associations.",
        "src": "web-gateway/app/measurement/exercise/association/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise/association"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization id to filter associations"
          },
          "exerciseType": {
            "type": "String",
            "optional": true,
            "description": "Exercise type ID to filter by. Cannot be given if title is given."
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "Filter by title of exercise. Cannot be given if exerciseType is given."
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag that indicates whether to include inactive associations and exercises in the search."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization id"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating whether the association is active or not"
          },
          "organization": {
            "type": "Entity",
            "description": "Associated organization",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Associated organization id"
              }
            }
          },
          "type": {
            "type": "ExerciseTypeSingle",
            "description": "Associated exercise type",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Associated exercise type id"
              },
              "name": {
                "type": "String",
                "description": "Exercise type name"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Exercise type description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether the exercise type is active or not"
              }
            }
          },
          "icon": {
            "type": "String",
            "optional": true,
            "description": "An SVG icon"
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single exercise type-organization association details. Available only for providers with 'admin' permission for requested organization.",
        "src": "web-gateway/app/measurement/exercise/association/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise/association/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization association to retrieve"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization id"
          },
          "organization": {
            "type": "Bigint",
            "description": "The associated organization"
          },
          "exerciseType": {
            "type": "String",
            "description": "The associated exercise type"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating whether the association is active or not"
          },
          "icon": {
            "type": "String",
            "optional": true,
            "description": "An SVG icon"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update exercise type-organization association. Available only for providers with 'admin' permission for requested organization.",
        "src": "web-gateway/app/measurement/exercise/association/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/measurement/exercise/association/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization ID"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating whether association is active or not."
          },
          "icon": {
            "type": "String",
            "optional": true,
            "description": "An SVG icon to use. Can be set to `null` if the icon should be removed."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete exercise type-organization association. Available only for providers with 'admin' permission for requested organization.",
        "src": "web-gateway/app/measurement/exercise/association/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/measurement/exercise/association/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type-organization"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Exercise": {
      "Create": {
        "description": "Create exercise entry for account. Restricted to clients",
        "src": "web-gateway/app/measurement/exercise/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/exercise"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Client account id. Optional for Client requests, otherwise required"
          },
          "start": {
            "type": "Timestamp",
            "description": "Start timestamp of activity span in ISO-8601 format"
          },
          "end": {
            "type": "Timestamp",
            "description": "End timestamp of activity span in ISO-8601 format"
          },
          "exerciseType": {
            "type": "Bigint",
            "description": "Id of the exercise type"
          },
          "intensity": {
            "type": "Number",
            "description": "Intensity - a number from 0 to 100"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "Exercise note"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the created entry"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update exercise entry. Restricted to clients",
        "src": "web-gateway/app/measurement/exercise/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/measurement/exercise/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise entry ID"
          },
          "start": {
            "type": "Timestamp",
            "optional": true,
            "description": "Start timestamp of activity span in ISO-8601 format. Activity span will be updated only if both start & end are provided."
          },
          "end": {
            "type": "Timestamp",
            "optional": true,
            "description": "End timestamp of activity span in ISO-8601 format. Activity span will be updated only if both start & end are provided."
          },
          "exerciseType": {
            "type": "Bigint",
            "optional": true,
            "description": "Id of the exercise type"
          },
          "intensity": {
            "type": "Number",
            "optional": true,
            "description": "Intensity - a number from 0 to 100"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "Exercise note"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetAll": {
        "description": "Fetch exercise entries as paged response. Clients can access only to their own exercises, providers - to exercises of accessible clients.",
        "src": "web-gateway/app/measurement/exercise/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Client account id, required for Providers only."
          },
          "start": {
            "type": "Timestamp",
            "optional": true,
            "description": "Start timestamp of activity span in ISO-8601 format"
          },
          "end": {
            "type": "Timestamp",
            "optional": true,
            "description": "End timestamp of activity span in ISO-8601 format"
          },
          "exerciseType": {
            "type": "Bigint",
            "optional": true,
            "description": "Id of the exercise type"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Data collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the exercise entry"
              },
              "account": {
                "type": "Bigint",
                "description": "Account ID of the exercise entry"
              },
              "activitySpan": {
                "type": "Object",
                "description": "Activity time span of the exercise",
                "children": {
                  "start": {
                    "type": "String",
                    "description": "Start of activity time span"
                  },
                  "end": {
                    "type": "String",
                    "description": "End of activity time span"
                  }
                }
              },
              "exerciseType": {
                "type": "Object",
                "description": "Exercise type object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Exercise type ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Exercise type name"
                  },
                  "description": {
                    "type": "String",
                    "description": "Exercise type description"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "A flag indicating whether exercise type is active or not"
                  }
                }
              },
              "createdAt": {
                "type": "String",
                "description": "Exercise-account creation timestamp"
              },
              "intensity": {
                "type": "Number",
                "description": "Exercise intensity"
              },
              "note": {
                "type": "String",
                "optional": true,
                "description": "Exercise note"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single exercise entry. Clients can access only to their own exercises, providers - to exercises of accessible clients",
        "src": "web-gateway/app/measurement/exercise/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise-account entry Id. Passed as last URI param"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the exercise entry"
          },
          "account": {
            "type": "Bigint",
            "description": "Account ID of the exercise entry"
          },
          "activitySpan": {
            "type": "Object",
            "description": "Activity time span of the exercise",
            "children": {
              "start": {
                "type": "String",
                "description": "Start of activity time span"
              },
              "end": {
                "type": "String",
                "description": "End of activity time span"
              }
            }
          },
          "exerciseType": {
            "type": "Object",
            "description": "Exercise type object",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Exercise type ID"
              },
              "name": {
                "type": "String",
                "description": "Exercise type name"
              },
              "description": {
                "type": "String",
                "description": "Exercise type description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether exercise type is active or not"
              }
            }
          },
          "createdAt": {
            "type": "String",
            "description": "Exercise-account creation timestamp"
          },
          "intensity": {
            "type": "Number",
            "description": "Exercise intensity"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "Exercise note"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Delete exercise for an account. Restricted to Clients, which can delete only their own exercises.",
        "src": "web-gateway/app/measurement/exercise/core/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/measurement/exercise/:id"
        },
        "version": "2.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise-account entry Id. Passed as last URI param"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Exercise-Type": {
      "Create": {
        "description": "Create exercise type. This endpoint available only to Admins",
        "src": "web-gateway/app/measurement/exercise/type/route.ts",
        "api": {
          "method": "POST",
          "url": "/measurement/exercise/type"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "description": "Exercise type name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Exercise type description."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the created entry"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update exercise type. This endpoint available only to Admins",
        "src": "web-gateway/app/measurement/exercise/type/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/measurement/exercise/type/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type ID"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "Exercise type name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Exercise type description. Can be set to `null` to clear the value."
          },
          "isActive": {
            "type": "String",
            "optional": true,
            "description": "A flag indicating whether exercise type is active or not."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetSingle": {
        "description": "Fetch exercise type details. This endpoint available only to Admins",
        "src": "web-gateway/app/measurement/exercise/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise/type/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Exercise type ID"
          },
          "name": {
            "type": "String",
            "description": "Exercise type name"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Exercise type description"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating whether exercise type is active or not"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Fetch all matching exercise types",
        "src": "web-gateway/app/measurement/exercise/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/exercise/type"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "query": {
            "type": "String",
            "optional": true,
            "description": "A query to filter the exercise type name/description by"
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether to include inactive entries"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size limit. Can be set to 'all' or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Paging offset."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "ExerciseTypeSingle[]",
            "description": "Data collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Exercise type ID"
              },
              "name": {
                "type": "String",
                "description": "Exercise type name"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Exercise type description"
              },
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether exercise type is active or not"
              }
            }
          }
        },
        "apiuse": {
          "Pagination": {
            "type": "Object",
            "description": ""
          }
        },
        "hasResponse": true
      }
    }
  },
  "Idealshape": {
    "Idealshape": {
      "GetLeaderboard": {
        "description": "Get IdealShape leaderboard data & summary",
        "src": "web-gateway/app/measurement/idealshape-leaderboard/route.ts",
        "api": {
          "method": "GET",
          "url": "/measurement/idealshape/leaderboard"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiSuccess": {
          "leaderboard": {
            "type": "LeaderboardItem[]",
            "description": "Leaderboard data",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "firstName": {
                "type": "String",
                "description": "Participant's first name"
              },
              "lastName": {
                "type": "String",
                "description": "Participant's last name"
              },
              "loss": {
                "type": "ChallengeLoss",
                "description": "Weight loss data",
                "children": {
                  "value": {
                    "type": "Number",
                    "description": "Weight loss value in grams"
                  },
                  "percentage": {
                    "type": "Number",
                    "description": "Weight loss value in percentage"
                  }
                }
              }
            }
          },
          "summary": {
            "type": "ChallengeSummary",
            "description": "Challenge summary",
            "children": {
              "start": {
                "type": "Date",
                "description": "Start date"
              },
              "end": {
                "type": "Date",
                "description": "End date"
              },
              "daysLeft": {
                "type": "Number",
                "description": "Days left to the end of the challenge (0-365)."
              },
              "cumulativeLoss": {
                "type": "CumulativeLossItem[]",
                "description": "Cumulative weight loss across all participants",
                "children": {
                  "date": {
                    "type": "Date",
                    "description": "Entry date"
                  },
                  "value": {
                    "type": "Number",
                    "description": "Cumulative loss value for the date"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Messaging": {
    "Messaging": {
      "AddMessage": {
        "description": "Add message to thread",
        "src": "web-gateway/app/messaging/message/route.ts",
        "api": {
          "method": "POST",
          "url": "/message"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "threadId": {
            "type": "Bigint",
            "optional": true,
            "description": "The id of the thread to add the message to. If empty then thread subject is required."
          },
          "subject": {
            "type": "String",
            "optional": true,
            "description": "The subject of new thread. Ignored if threadId is passed"
          },
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "Id of organization to associate new thread"
          },
          "content": {
            "type": "String",
            "description": "The content of the message"
          },
          "accounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Array of accounts ids to associate with new thread"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "200"
          }
        }
      },
      "GetAll": {
        "description": "Fetch all threads that a single user is part of. If you pass multiple accounts in the array it will search for threads with those users.",
        "src": "web-gateway/app/messaging/thread/route.ts",
        "api": {
          "method": "GET",
          "url": "/message/thread"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "accounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Array of account Id"
          },
          "accountsExclusive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicate if only threads with exclusively these account are returned."
          },
          "inactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag, which set to 'true', that indicates to return only inactive threads. Returns only active threads by default."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "MessagingThread[]",
            "description": "Array of thread objects",
            "children": {
              "threadId": {
                "type": "Bigint",
                "description": "The id of the thread"
              },
              "subject": {
                "type": "String",
                "description": "The subject of the thread"
              },
              "account": {
                "type": "MessagingAccount[]",
                "description": "The array of accounts associated with this record",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The account id"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "The account first name"
                  },
                  "lastName": {
                    "type": "String",
                    "optional": true,
                    "description": "The account last name"
                  }
                }
              },
              "lastMessage": {
                "type": "LastMessage",
                "description": "Last message sent",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of the last message sent"
                  },
                  "date": {
                    "type": "Timestamp",
                    "description": "The timestamp of the last message sent"
                  },
                  "content": {
                    "type": "String",
                    "description": "The content of the last message sent"
                  },
                  "accountId": {
                    "type": "Bigint",
                    "description": "The account id of the last message author"
                  }
                }
              },
              "viewed": {
                "type": "Boolean",
                "description": "Boolean value whether or not the user has read the thread (last message)"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetThread": {
        "description": "Fetch single thread and the messages associated with the thread, set messages as viewed",
        "src": "web-gateway/app/messaging/thread/route.ts",
        "api": {
          "method": "GET",
          "url": "/message/thread/:threadId"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "threadId": {
            "type": "String",
            "description": "The id of the record to fetch, passed as the last URI parameter"
          },
          "inactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating a thread should be returned even if it is inactive"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "MessagingItem[]",
            "description": "Thread related messages",
            "children": {
              "threadId": {
                "type": "Bigint",
                "description": "The id of the thread"
              },
              "subject": {
                "type": "String",
                "description": "The subject of the thread"
              },
              "messageId": {
                "type": "Bigint",
                "description": "The id of the message"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The time of the message (in UTC)"
              },
              "content": {
                "type": "String",
                "description": "The content of the message"
              },
              "account": {
                "type": "MessagingAccount",
                "description": "The array of accounts associated with this record",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The account id"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "The account first name"
                  },
                  "lastName": {
                    "type": "String",
                    "optional": true,
                    "description": "The account last name"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetUnread": {
        "description": "Fetch the number of unread threads and unread messages",
        "src": "web-gateway/app/messaging/thread/route.ts",
        "api": {
          "method": "GET",
          "url": "/message/unread"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiSuccess": {
          "unreadThreadsCount": {
            "type": "Integer",
            "description": "The number of threads with unread messages"
          },
          "unreadMessagesCount": {
            "type": "Integer",
            "description": "The total number of unread messages"
          },
          "unreadThreadIds": {
            "type": "Bigint[]",
            "description": "The ids of threads with unread messages"
          }
        },
        "hasResponse": true
      },
      "CreateThread": {
        "description": "Add new thread and pass accounts to be included into the thread",
        "src": "web-gateway/app/messaging/thread/route.ts",
        "api": {
          "method": "POST",
          "url": "/message/thread"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "subject": {
            "type": "String",
            "description": "The subject of the thread"
          },
          "organizationId": {
            "type": "Bigint",
            "optional": true,
            "description": "Id of organization to associate new thread"
          },
          "creatorId": {
            "type": "Bigint",
            "description": "The ID of user account who creates a thread"
          },
          "accounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Array of accounts ids to associate with new thread"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of the newly created record"
          }
        },
        "hasResponse": true
      },
      "UpdateThread": {
        "description": "Toggle thread archivization for an account",
        "src": "web-gateway/app/messaging/thread/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/message/thread/:threadId/:account"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "threadId": {
            "type": "Bigint",
            "description": "The ID of the thread"
          },
          "account": {
            "type": "Bigint",
            "description": "The ID of the account"
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating whether the thread should be marked as active or not for the user"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Messaging-Permission": {
      "GetSingle": {
        "description": "Check if user has permission to a thread",
        "src": "web-gateway/app/messaging/permission/route.ts",
        "api": {
          "method": "GET",
          "url": "/message/permission"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The account of the user. Optional for Client requests, otherwise required"
          },
          "threadId": {
            "type": "Bigint",
            "description": "The id of the thread"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Create": {
        "description": "Add permission to a user to have access to a thread",
        "src": "web-gateway/app/messaging/permission/route.ts",
        "api": {
          "method": "POST",
          "url": "/message/permission"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "accounts": {
            "type": "Bigint[]",
            "description": "Array of account IDs to add"
          },
          "threadId": {
            "type": "Bigint",
            "description": "The id of the thread"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Remove permission for a user to no longer have access to a thread",
        "src": "web-gateway/app/messaging/permission/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/message/permission/:threadId/:account"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "threadId": {
            "type": "Bigint",
            "description": "The id of the thread"
          },
          "account": {
            "type": "Bigint",
            "description": "The account of the user."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Note": {
    "Note-Consultation": {
      "Create": {
        "description": "Add consultation notes for a user.",
        "src": "web-gateway/app/note/consultation/route.ts",
        "api": {
          "method": "POST",
          "url": "/note/consultation"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "content": {
            "type": "String",
            "description": "The content of the note"
          },
          "subjective": {
            "type": "String",
            "optional": true,
            "description": "The subjective of the note"
          },
          "objective": {
            "type": "String",
            "optional": true,
            "description": "The objective of the note"
          },
          "assessment": {
            "type": "String",
            "optional": true,
            "description": "The assessment of the note"
          },
          "plan": {
            "type": "String",
            "optional": true,
            "description": "The plan of the note"
          },
          "providerOnly": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "If true, the note is only visible to providers. Can only be true if user is provider. (microservice: required)"
          },
          "time": {
            "type": "Date",
            "optional": true,
            "default": "Now",
            "description": "The time of the note in ISO8601 format."
          },
          "relatedAccounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Accounts related to the note. If a provider, provides access to the note. If a client, indicates that the client is a subject of the note and, if not providerOnly, provides access to the note"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of newly-created note."
          }
        }
      },
      "GetAll": {
        "description": "Get consultation notes for an account",
        "src": "web-gateway/app/note/consultation/route.ts",
        "api": {
          "method": "GET",
          "url": "/note/consultation"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Search only for notes relating to this account"
          },
          "search": {
            "type": "String",
            "optional": true,
            "description": "Find only matching notes. Depending on the contents of the search string, one of two search strategies are used. Usually, a semantic search is done. However, if the string contains a \"_\" or \"%\", the search is treated as <a href=\"https://www.postgresql.org/docs/10/static/functions-matching.html#FUNCTIONS-LIKE\">a postgres LIKE pattern</a>, where \"_\" stands for any single character and \"%\" is any sequence of zero or more characters."
          },
          "startDate": {
            "type": "Date",
            "optional": true,
            "description": "Select notes with dates on or after this date, in ISO_8601 format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "description": "Select notes with dates on or before this date, in ISO_8601 format."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can be set to 'all' to retrieve all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset."
          },
          "data": {
            "type": "Object",
            "description": "",
            "children": {
              "subjective": {
                "type": "String",
                "optional": true,
                "description": "The subjective of the note"
              },
              "objective": {
                "type": "String",
                "optional": true,
                "description": "The objective of the note"
              },
              "assessment": {
                "type": "String",
                "optional": true,
                "description": "The assessment of the note"
              },
              "plan": {
                "type": "String",
                "optional": true,
                "description": "The plan of the note"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object",
            "description": "",
            "children": {
              "createdBy": {
                "type": "Bigint",
                "description": "The id of the note's creator"
              },
              "providerOnly": {
                "type": "Boolean",
                "description": "Is the note provider only?"
              },
              "createdAt": {
                "type": "String",
                "description": "The time the note was created in ISO8601 format"
              },
              "updatedAt": {
                "type": "String",
                "description": "The time the note was updated in ISO8601 format"
              },
              "date": {
                "type": "Date",
                "description": "The date of the note in 'YYYY-MM-DD' format."
              },
              "relatedAccounts": {
                "type": "Bigint[]",
                "optional": true,
                "description": "The relatedAccounts for the note, only if the requester is a provider."
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Get a single consultation note",
        "src": "web-gateway/app/note/consultation/route.ts",
        "api": {
          "method": "GET",
          "url": "/note/consultation/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The ID of the node, as the last part of the URL."
          }
        },
        "apiSuccess": {
          "noteId": {
            "type": "Bigint",
            "description": "The ID of the note"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update the consultation notes for a user.",
        "src": "web-gateway/app/note/consultation/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/note/consultation/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the note, as the last part of the url"
          },
          "content": {
            "type": "String",
            "optional": true,
            "description": "New content for the content"
          },
          "subjective": {
            "type": "String",
            "optional": true,
            "description": "The subjective of the note"
          },
          "objective": {
            "type": "String",
            "optional": true,
            "description": "The objective of the note"
          },
          "assessment": {
            "type": "String",
            "optional": true,
            "description": "The assessment of the note"
          },
          "plan": {
            "type": "String",
            "optional": true,
            "description": "The plan of the note"
          },
          "providerOnly": {
            "type": "Boolean",
            "optional": true,
            "description": "New value for providerOnly"
          },
          "date": {
            "type": "Date",
            "optional": true,
            "description": "New value for date in 'YYYY-MM-DD' format."
          },
          "relatedAccounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "New values for relatedAccounts"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete notes. Can only be performed by the note creator.",
        "src": "web-gateway/app/note/consultation/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/note/consultation/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the note, as the last part of the url"
          }
        }
      }
    },
    "Note-General": {
      "Create": {
        "description": "Add general notes for a user.",
        "src": "web-gateway/app/note/general/route.ts",
        "api": {
          "method": "POST",
          "url": "/note/general"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "content": {
            "type": "String",
            "description": "The content of the note"
          },
          "providerOnly": {
            "type": "Boolean",
            "optional": true,
            "description": "If true, the note is only visible to providers. Can only be true if user is provider. (microservice: required)",
            "values": "false"
          },
          "time": {
            "type": "Date",
            "optional": true,
            "default": "Now",
            "description": "The time of the note in ISO8601 format."
          },
          "relatedAccounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Accounts related to the note. If a provider, provides access to the note. If a client, indicates that the client is a subject of the note and, if not providerOnly, provides access to the note"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of newly-created note."
          }
        }
      },
      "GetAll": {
        "description": "Get general notes for an account",
        "src": "web-gateway/app/note/general/route.ts",
        "api": {
          "method": "GET",
          "url": "/note/general"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Search only for notes relating to this account"
          },
          "search": {
            "type": "String",
            "optional": true,
            "description": "Find only matching notes. Depending on the contents of the search string, one of two search strategies are used. Usually, a semantic search is done. However, if the string contains a \"_\" or \"%\", the search is treated as <a href=\"https://www.postgresql.org/docs/10/static/functions-matching.html#FUNCTIONS-LIKE\">a postgres LIKE pattern</a>, where \"_\" stands for any single character and \"%\" is any sequence of zero or more characters."
          },
          "startDate": {
            "type": "Date",
            "optional": true,
            "description": "Select notes with dates on or after this date, in ISO_8601 format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "description": "Select notes with dates on or before this date, in ISO_8601 format."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can be set to 'all' to retrieve all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of notes",
            "children": {
              "noteId": {
                "type": "Bigint",
                "description": "The ID of the note"
              },
              "content": {
                "type": "String",
                "description": "The text of the note"
              },
              "createdBy": {
                "type": "Bigint",
                "description": "The id of the note's creator"
              },
              "providerOnly": {
                "type": "Boolean",
                "description": "Is the note provider only?"
              },
              "createdAt": {
                "type": "String",
                "description": "The time the note was created in ISO8601 format"
              },
              "updatedAt": {
                "type": "String",
                "description": "The time the note was updated in ISO8601 format"
              },
              "date": {
                "type": "Date",
                "description": "The date of the note in 'YYYY-MM-DD' format."
              },
              "relatedAccounts": {
                "type": "Bigint[]",
                "optional": true,
                "description": "The relatedAccounts for the note, only if the requester is a provider."
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Get a single general note",
        "src": "web-gateway/app/note/general/route.ts",
        "api": {
          "method": "GET",
          "url": "/note/general/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The ID of the node, as the last part of the URL."
          }
        },
        "apiSuccess": {
          "noteId": {
            "type": "Bigint",
            "description": "The ID of the note"
          },
          "content": {
            "type": "String",
            "description": "Content of the note"
          },
          "createdBy": {
            "type": "Bigint",
            "description": "Note creator"
          },
          "providerOnly": {
            "type": "Boolean",
            "description": "Whether is visible only for providers or not"
          },
          "createdAt": {
            "type": "String",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "String",
            "description": "Update timestamp"
          },
          "date": {
            "type": "String",
            "description": "Note date"
          },
          "relatedAccounts": {
            "type": "Bigint[]",
            "description": "Related accounts"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update the general notes for a user.",
        "src": "web-gateway/app/note/general/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/note/general/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the note, as the last part of the url"
          },
          "content": {
            "type": "String",
            "optional": true,
            "description": "New content for the content"
          },
          "providerOnly": {
            "type": "Boolean",
            "optional": true,
            "description": "New value for providerOnly"
          },
          "date": {
            "type": "Date",
            "optional": true,
            "description": "New value for date in 'YYYY-MM-DD' format."
          },
          "relatedAccounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "New values for relatedAccounts"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete notes. Can only be performed by the note creator.",
        "src": "web-gateway/app/note/general/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/note/general/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the note, as the last part of the url"
          }
        }
      }
    }
  },
  "Alerts": {
    "Alerts": {
      "GetAll": {
        "description": "Fetches notifications based on specific filters",
        "src": "web-gateway/app/notification/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/notification"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account filter of the recipient of the notification. Optional for Client requests, otherwise required"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization for the notification."
          },
          "triggeredBy": {
            "type": "Bigint",
            "optional": true,
            "description": "Filter for ID of the account that triggered the alert."
          },
          "createdAt": {
            "type": "TimestampFilter",
            "optional": true,
            "description": "Creation timestamp filter",
            "children": {
              "start": {
                "type": "Timestamp",
                "optional": true,
                "description": "Includes notifications created after start time."
              },
              "end": {
                "type": "Timestamp",
                "optional": true,
                "description": "Includes notifications created before end time."
              }
            }
          },
          "category": {
            "type": "AlertCategory",
            "optional": true,
            "description": "Category to filter by. Should be either 'none' or a number if specified."
          },
          "groupId": {
            "type": "String",
            "optional": true,
            "description": "Notification group ID filter. Can be set to `null` to only show notifications that do not have a group."
          },
          "viewed": {
            "type": "Boolean",
            "optional": true,
            "description": "An optional flag to only fetch read/unread notifications."
          },
          "type": {
            "type": "Bigint",
            "optional": true,
            "description": "Notification type filter"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can be set to 'all' to retrieve all entries."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "AlertItem[]",
            "description": "Data element collection",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the notification"
              },
              "createdAt": {
                "type": "String",
                "description": "Creation timestamp"
              },
              "type": {
                "type": "Object",
                "description": "Type of the notification",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the notification type"
                  },
                  "code": {
                    "type": "String",
                    "description": "Code of the notification type"
                  },
                  "description": {
                    "type": "String",
                    "description": "Description of the notification type"
                  }
                }
              },
              "recipient": {
                "type": "AccountBasicRef",
                "description": "Recipient of the notification",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the recipient"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the recipient"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the recipient"
                  },
                  "email": {
                    "type": "String",
                    "description": "E-mail address of the recipient"
                  },
                  "accountType": {
                    "type": "AccountTypeId",
                    "description": "Account type ID of the recipient"
                  }
                }
              },
              "organization": {
                "type": "OrgEntity",
                "description": "Organization data associated with the recipient",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the organization"
                  },
                  "shortcode": {
                    "type": "String",
                    "description": "Shortcode of the organization"
                  },
                  "name": {
                    "type": "String",
                    "description": "Name of the organization"
                  },
                  "hierarchyPath": {
                    "type": "Bigint[]",
                    "description": "Hierarchy path of the organization"
                  }
                }
              },
              "triggeredBy": {
                "type": "AccountBasicRef",
                "optional": true,
                "description": "Account data of person who triggered the alert",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the person who triggered the alert"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the person who triggered the alert"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the person who triggered the alert"
                  },
                  "email": {
                    "type": "String",
                    "description": "E-mail address of the person who triggered the alert"
                  },
                  "accountType": {
                    "type": "AccountTypeId",
                    "description": "Account type ID of the person who triggered the alert"
                  }
                }
              },
              "viewed": {
                "type": "Boolean",
                "description": "A flag indicating whether a person with specified account viewed the notification."
              },
              "payload": {
                "type": "Any",
                "optional": true,
                "description": "Notification-specific payload"
              },
              "groupId": {
                "type": "String",
                "optional": true,
                "description": "Notification group ID"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "ToggleGroup": {
        "description": "Toggles viewed status (seen/unseen) for a notification group",
        "src": "web-gateway/app/notification/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/notification/viewed/group/:groupId"
        },
        "version": "1.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "groupId": {
            "type": "String",
            "description": "Notification group ID"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "isViewed": {
            "type": "Boolean",
            "description": "A flag indicating whether all notifications in the notification group should be treated as seen or unseen by their recipients"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "ToggleOne": {
        "description": "Toggles viewed status (seen/unseen) for a notification and an account",
        "src": "web-gateway/app/notification/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/notification/viewed/:notificationId/:account"
        },
        "version": "1.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "Account ID, Current account Id for Client."
          },
          "notificationId": {
            "type": "Bigint",
            "description": "Notification ID"
          },
          "isViewed": {
            "type": "Boolean",
            "description": "A flag indicating whether the notification should be treated as seen or unseen"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetTypes": {
        "description": "Retrieves available alert types as a paged collection",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/alert/type"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "id": {
                "type": "Number",
                "description": "Alert type ID"
              },
              "description": {
                "type": "String",
                "description": "Description"
              },
              "code": {
                "type": "String",
                "description": "Unique code"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Alerts-Preference": {
      "GetAll": {
        "description": "Retrieves available alert preferences as a paged collection",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/alert/preference"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to get hierarchy for."
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account to retrieve the preferences for. This filter does not exclude organization-wide preferences."
          },
          "alertType": {
            "type": "Number",
            "optional": true,
            "description": "Alert type to retrieve the preference for"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "id": {
                "type": "Number",
                "description": "Preference ID"
              },
              "type": {
                "type": "AlertType",
                "description": "Alert type",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Alert type ID"
                  },
                  "description": {
                    "type": "String",
                    "description": "Description"
                  },
                  "code": {
                    "type": "String",
                    "description": "Unique code"
                  }
                }
              },
              "organization": {
                "type": "Object",
                "description": "Organization preference",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "preference": {
                    "type": "Object",
                    "description": "Organization preference entry",
                    "children": {
                      "options": {
                        "type": "Any",
                        "description": "Alert options. Value and expected structure depends on the alert type the options are set for."
                      },
                      "isActive": {
                        "type": "Boolean",
                        "description": "Preference activity indicator"
                      }
                    }
                  }
                }
              },
              "account": {
                "type": "Object",
                "optional": true,
                "description": "Organization-account preference. Only provided when 'account' parameter is passed.",
                "children": {
                  "preference": {
                    "type": "Object",
                    "description": "Organization-account preference entry",
                    "children": {
                      "options": {
                        "type": "Any",
                        "description": "Alert options. Value and expected structure depends on the alert type the options are set for."
                      },
                      "isActive": {
                        "type": "Boolean",
                        "description": "Preference activity indicator"
                      }
                    }
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Creates alert preference for an organization and specified alert type",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "POST",
          "url": "/warehouse/alert/preference"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "alertType": {
            "type": "Number",
            "description": "Alert type ID"
          },
          "preference": {
            "type": "Object",
            "description": "Preference object",
            "children": {
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether the alert should be active or not"
              },
              "options": {
                "type": "Any",
                "description": "Alert-specific options"
              }
            }
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Number",
            "description": "ID of the created preference"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Updates alert preference for an organization and specified alert type",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/warehouse/alert/preference/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin",
          "OrgAccess"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Preference ID"
          },
          "preference": {
            "type": "Any",
            "description": "Preference object",
            "children": {
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether the alert should be active or not"
              },
              "options": {
                "type": "Any",
                "description": "Alert-specific options"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes alert preference for an organization and specified alert type",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/warehouse/alert/preference/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin",
          "OrgAccess"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Preference ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Alerts-Preference-Account": {
      "Upsert": {
        "description": "Creates or updates an account-level preference override for an account for an existing preference",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "PUT",
          "url": "/warehouse/alert/preference/:id/account"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin",
          "OrgAccess"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Preference ID"
          },
          "account": {
            "type": "Bigint",
            "description": "Account ID"
          },
          "preference": {
            "type": "Any",
            "description": "Preference object",
            "children": {
              "isActive": {
                "type": "Boolean",
                "description": "A flag indicating whether the alert should be active or not"
              },
              "options": {
                "type": "Any",
                "description": "Alert-specific options"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes an account-level preference override for an account for an existing preference",
        "src": "web-gateway/app/warehouse/alert/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/warehouse/alert/preference/:id/account/:account"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin",
          "OrgAccess"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Preference ID"
          },
          "account": {
            "type": "Bigint",
            "description": "Account ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Organization": {
    "Organization": {
      "GetList": {
        "description": "Get a listing of accessible organizations for an account",
        "src": "web-gateway/app/organization/access/route.ts",
        "api": {
          "method": "GET",
          "url": "/access/organization"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The ID of the account to look up the organization access for. Defaults to current user if not provided."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Filter query for organization name"
          },
          "status": {
            "type": "ActiveStatus",
            "optional": true,
            "default": "active",
            "description": "The status of organization",
            "values": "'all' | 'active' | 'inactive'"
          },
          "hierarchyFilter": {
            "type": "Bigint[]",
            "optional": true,
            "description": "Organization hierarchy filter"
          },
          "strict": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether only direct organization associations should be retrieved (`true`), or if we should retrieve a cascaded associations."
          },
          "permissions": {
            "type": "AllOrgPermissions",
            "optional": true,
            "description": "The permissions object",
            "children": {
              "viewAll": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"accessAll\" permission of provider"
              },
              "admin": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"admin\" permission of provider"
              },
              "allowClientPhi": {
                "type": "Boolean",
                "optional": true,
                "description": "The permission which allows the provider to see client's protected health information. Can only be toggled by admins."
              }
            }
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "50",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          },
          "sort": {
            "type": "OrgAccessSort[]",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by name ascending.",
            "children": {
              "property": {
                "type": "OrgAccessSortProperty",
                "description": "A property to sort by",
                "values": "'name' | 'state'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "OrgListSegment[]",
            "description": "Result collection",
            "children": {
              "organization": {
                "type": "OrgSegment",
                "description": "Organization object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  },
                  "shortcode": {
                    "type": "String",
                    "description": "Organization shortcode identifier"
                  },
                  "address": {
                    "type": "AddressItem",
                    "description": "Address data",
                    "children": {
                      "street": {
                        "type": "String",
                        "optional": true,
                        "description": "Street name & number"
                      },
                      "city": {
                        "type": "String",
                        "optional": true,
                        "description": "City"
                      },
                      "state": {
                        "type": "String",
                        "optional": true,
                        "description": "State or province"
                      },
                      "postalCode": {
                        "type": "String",
                        "optional": true,
                        "description": "Postal code"
                      },
                      "country": {
                        "type": "String",
                        "optional": true,
                        "description": "Country"
                      }
                    }
                  },
                  "hierarchyPath": {
                    "type": "Integer[]",
                    "description": "Hierarchy path"
                  }
                }
              },
              "permissions": {
                "type": "AllOrgPermissions",
                "optional": true,
                "description": "The permissions object. It's only included for provider accounts.",
                "children": {
                  "viewAll": {
                    "type": "Boolean",
                    "optional": true,
                    "description": "The \"accessAll\" permission of provider"
                  },
                  "admin": {
                    "type": "Boolean",
                    "optional": true,
                    "description": "The \"admin\" permission of provider"
                  },
                  "allowClientPhi": {
                    "type": "Boolean",
                    "optional": true,
                    "description": "The \"allowClientPhi\" permission of provider"
                  }
                }
              },
              "isDirect": {
                "type": "Boolean",
                "description": "A flag indicating if the entry indicates a direct association with an organization or a cascaded entry"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create new organization entry. Providers can only create organization entries with parent organizations that they have admin access to.",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "POST",
          "url": "/organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "description": "The name of the organization"
          },
          "shortcode": {
            "type": "String",
            "description": "The internal code name of the organization, must be unique."
          },
          "parentOrganizationId": {
            "type": "Bigint",
            "description": "Id of the parent organization"
          },
          "contact": {
            "type": "ContactItem",
            "description": "Organization contacts",
            "children": {
              "firstName": {
                "type": "String",
                "description": "The first name of the organization contact"
              },
              "lastName": {
                "type": "String",
                "description": "The last name of the organization contact"
              },
              "email": {
                "type": "String",
                "description": "The email of the organization contact"
              },
              "phone": {
                "type": "String",
                "optional": true,
                "description": "The phone number of the organization contact"
              }
            }
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "If this organization is active."
          },
          "address": {
            "type": "AddressItem",
            "optional": true,
            "description": "Address information",
            "children": {
              "street": {
                "type": "String",
                "optional": true,
                "description": "The street address of the organization"
              },
              "city": {
                "type": "String",
                "optional": true,
                "description": "The city of the organization"
              },
              "state": {
                "type": "String",
                "optional": true,
                "description": "The state of the organization"
              },
              "postalCode": {
                "type": "String",
                "optional": true,
                "description": "The postal code of the organization"
              },
              "country": {
                "type": "String",
                "optional": true,
                "description": "The country of the organization. Must be the two-letter ISO code"
              }
            }
          },
          "welcomeEmailAddress": {
            "type": "String",
            "optional": true,
            "description": "The email address from which the welcome email will be sent"
          },
          "passwordResetEmailAddress": {
            "type": "String",
            "optional": true,
            "default": "no-reply@selvera.com",
            "description": "The email address from which password reset emails will be sent."
          },
          "openAssociationAddProvider": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "If true, any manager may associate a provider to this organization."
          },
          "openAssociationAddClient": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "If true, any manager may associate a client to this organization."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of newly-created organization"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update organization entry",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "PUT",
          "url": "/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "The name of the organization. Only editable by administrators."
          },
          "shortcode": {
            "type": "String",
            "optional": true,
            "description": "The internal code name of the organization, must be unique. Only editable by administrators."
          },
          "parentOrganizationId": {
            "type": "Bigint/Null",
            "optional": true,
            "description": "Id of the desired parent organization"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "If this organization is active."
          },
          "contact": {
            "type": "ContactItem",
            "optional": true,
            "description": "Organization contacts",
            "children": {
              "firstName": {
                "type": "String",
                "optional": true,
                "description": "The first name of the organization contact"
              },
              "lastName": {
                "type": "String",
                "optional": true,
                "description": "The last name of the organization contact"
              },
              "email": {
                "type": "String",
                "optional": true,
                "description": "The email of the organization contact"
              },
              "phone": {
                "type": "String",
                "optional": true,
                "description": "The phone number of the organization contact"
              }
            }
          },
          "address": {
            "type": "AddressItem",
            "optional": true,
            "description": "Address information",
            "children": {
              "street": {
                "type": "String",
                "optional": true,
                "description": "The street address of the organization"
              },
              "city": {
                "type": "String",
                "optional": true,
                "description": "The city of the organization"
              },
              "state": {
                "type": "String",
                "optional": true,
                "description": "The state of the organization"
              },
              "postalCode": {
                "type": "String",
                "optional": true,
                "description": "The postal code of the organization"
              },
              "country": {
                "type": "String",
                "optional": true,
                "description": "The country of the organization. Must be the two-letter ISO code"
              }
            }
          },
          "welcomeEmailAddress": {
            "type": "String",
            "optional": true,
            "description": "The email address from which the welcome email will be sent. Only editable by administrators."
          },
          "passwordResetEmailAddress": {
            "type": "String",
            "optional": true,
            "description": "The email address from which password reset emails will be sent. Only editable by administrators."
          },
          "openAssociationAddProvider": {
            "type": "Boolean",
            "optional": true,
            "description": "If true, any manager may associate a provider to this organization."
          },
          "openAssociationAddClient": {
            "type": "Boolean",
            "optional": true,
            "description": "If true, any manager may associate a client to this organization."
          }
        }
      },
      "Delete": {
        "description": "Deactivates (deletes) an existing organization.",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Id of deleted organization"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Retrieve a list of organizations",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/organization/"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "name": {
            "type": "String",
            "optional": true,
            "description": "Organization name filter"
          },
          "status": {
            "type": "ActiveStatus",
            "optional": true,
            "default": "active",
            "description": "Organization status filter",
            "values": "'all' | 'active' | 'inactive'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "20",
            "description": "Pagination limit. Can be set to 'all' to include all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Pagination offset"
          },
          "sort": {
            "type": "OrgSort[]",
            "optional": true,
            "description": "A collection that determines how the result should be sorted",
            "children": {
              "property": {
                "type": "OrgSortProperty",
                "description": "A property to sort by",
                "values": "'createdAt' | 'name'",
                "default": "name'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "OrgEntityExtended[]",
            "description": "Array of organizations",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization id"
              },
              "name": {
                "type": "String",
                "description": "Organization name"
              },
              "shortcode": {
                "type": "String",
                "description": "Organization shortcode"
              },
              "hierarchyPath": {
                "type": "Bigint[]",
                "description": "Organization hierarchyPath"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Organization active flag"
              },
              "createdAt": {
                "type": "String",
                "description": "Organization creation date"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Retrieve an existing organization.",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/organization/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "name": {
            "type": "String",
            "description": "Organization name"
          },
          "shortcode": {
            "type": "String",
            "description": "Organization shortcode"
          },
          "createdAt": {
            "type": "Timestamp",
            "optional": true,
            "description": "Creation timestamp"
          },
          "hierarchyPath": {
            "type": "Bigint[]",
            "description": "A path of hierarchy IDs"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Organization active flag"
          },
          "contact": {
            "type": "ContactItem",
            "description": "Contact information",
            "children": {
              "firstName": {
                "type": "String",
                "description": "First name"
              },
              "lastName": {
                "type": "String",
                "description": "Last name"
              },
              "email": {
                "type": "String",
                "description": "E-mail address"
              },
              "phone": {
                "type": "String",
                "optional": true,
                "description": "Phone number"
              }
            }
          },
          "address": {
            "type": "AddressItem",
            "optional": true,
            "description": "Address data",
            "children": {
              "street": {
                "type": "String",
                "optional": true,
                "description": "Street name & number"
              },
              "city": {
                "type": "String",
                "optional": true,
                "description": "City"
              },
              "state": {
                "type": "String",
                "optional": true,
                "description": "State or province"
              },
              "postalCode": {
                "type": "String",
                "optional": true,
                "description": "Postal code"
              },
              "country": {
                "type": "String",
                "optional": true,
                "description": "Country"
              }
            }
          },
          "preferences": {
            "type": "OrgPreference[]",
            "description": "Basic organization preferences, including the hierarchy chain.",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of an organization the preference entry belongs to"
              },
              "logoUrl": {
                "type": "String",
                "optional": true,
                "description": "Full URL of the logo"
              },
              "color": {
                "type": "Color",
                "description": "Color information",
                "children": {
                  "main": {
                    "type": "String",
                    "optional": true,
                    "description": "Main color, in 6-character hex"
                  },
                  "accent": {
                    "type": "String",
                    "optional": true,
                    "description": "Accent color, in 6-character hex"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetDescendants": {
        "description": "Retrieve all descendants of an organization.",
        "src": "web-gateway/app/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/organization/:id/descendants"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "query": {
            "type": "String",
            "optional": true,
            "description": "Organization name filter"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "OrgEntity[]",
            "description": "An array of child organizations",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Id of the descendant"
              },
              "name": {
                "type": "String",
                "description": "name The organization name"
              },
              "shortcode": {
                "type": "String",
                "description": "The organization shortcode"
              },
              "hierarchyPath": {
                "type": "Bigint[]",
                "description": "The orhanization hierarchy path"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Organization-Assignment": {
      "Create": {
        "description": "Create an assignment between a provider, organization, and client.  A client can only have one provider assigned to them at a time.",
        "src": "web-gateway/app/organization/assignment/route.ts",
        "api": {
          "method": "POST",
          "url": "/assignment"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAssignment",
          "OrgAdmin"
        ],
        "apiParam": {
          "client": {
            "type": "Bigint",
            "description": "The ID of the client to assign"
          },
          "provider": {
            "type": "Bigint",
            "description": "The ID of the provider to assign"
          },
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization to assign"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Remove an assignment between a provider, organization, and client. Providers can only delete assignments for their own organization",
        "src": "web-gateway/app/organization/assignment/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/assignment/:client/:provider/:organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAssignment",
          "OrgAdmin"
        ],
        "apiParam": {
          "client": {
            "type": "Bigint",
            "description": "The ID of the client to remove assignment"
          },
          "provider": {
            "type": "Bigint",
            "description": "The ID of the provider to remove assignment"
          },
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization to remove assignment"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Organization-Association": {
      "Create": {
        "description": "Associate an account (client or provider) to an organization.",
        "src": "web-gateway/app/organization/association/route.ts",
        "api": {
          "method": "POST",
          "url": "/association"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The ID of the client or provider account to associate"
          },
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization to associate this account to"
          },
          "permissions": {
            "type": "AllOrgPermissions",
            "optional": true,
            "description": "The permissions object for provider",
            "children": {
              "viewAll": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"accessAll\" permission of provider"
              },
              "admin": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"admin\" permission of provider"
              },
              "allowClientPhi": {
                "type": "Boolean",
                "optional": true,
                "default": "true",
                "description": "The permission which allows the provider to see client's protected health information. Can only be set by admins."
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "200"
          }
        }
      },
      "Update": {
        "description": "Update client or provider association activity flag for an organization.",
        "src": "web-gateway/app/organization/association/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/association/:account/:organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The ID of the client or provider account to associate"
          },
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization to associate this account to"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "A flag indicating if the association should be active or not."
          },
          "permissions": {
            "type": "AllOrgPermissions",
            "optional": true,
            "description": "The permissions object. Only applies to provider accounts.",
            "children": {
              "viewAll": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"accessAll\" permission of provider"
              },
              "admin": {
                "type": "Boolean",
                "optional": true,
                "description": "The \"admin\" permission of provider"
              },
              "allowClientPhi": {
                "type": "Boolean",
                "optional": true,
                "description": "The permission which allows the provider to see client's protected health information. Can only be toggled by admins."
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Remove an account association for an organization.",
        "src": "web-gateway/app/organization/association/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/association/:account/:organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The ID of the client or provider account to remove association, passed as the first URI parameter"
          },
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization to remove association, passed as the last URI parameter"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Organization-Preference": {
      "CreateAssets": {
        "description": "Generate asset upload URLs",
        "src": "web-gateway/app/organization/preference/route.ts",
        "api": {
          "method": "POST",
          "url": "/organization/:id/preference/asset"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "assets": {
            "type": "Object[]",
            "description": "Asset collection",
            "children": {
              "name": {
                "type": "String",
                "description": "Asset name. Has to be unique in the collection."
              }
            }
          }
        },
        "apiSuccess": {
          "urls": {
            "type": "SignedUrl[]",
            "description": "Signed URLs",
            "children": {
              "name": {
                "type": "String",
                "description": "Asset name"
              },
              "url": {
                "type": "String",
                "description": "Upload URL"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Get organization preferences",
        "src": "web-gateway/app/organization/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/organization/:id/preference"
        },
        "version": "3.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "mala": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether to include MALA settings in the response"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of an organization the preference entry belongs to"
          },
          "displayName": {
            "type": "String",
            "optional": true,
            "description": "Display name of the organization"
          },
          "assets": {
            "type": "OrgAssets",
            "optional": true,
            "description": "Organization assets",
            "children": {
              "logoUrl": {
                "type": "String",
                "optional": true,
                "description": "Full URL of the logo"
              },
              "color": {
                "type": "Color",
                "description": "Color information"
              }
            }
          },
          "food": {
            "type": "Object",
            "description": "Enabled food-tracking modes",
            "children": {
              "mode": {
                "type": "FoodTrackingMode[]",
                "description": "Enabled mode"
              }
            }
          },
          "scheduling": {
            "type": "SchedulePreferencesSingle",
            "optional": true,
            "description": "Schedule settings",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              },
              "disabledFor": {
                "type": "AccountTypeId[]",
                "description": "Disabled account type IDs"
              }
            }
          },
          "conference": {
            "type": "Boolean",
            "description": "Whether the conference service is enabled or not"
          },
          "content": {
            "type": "Object",
            "optional": true,
            "description": "Whether the content service is enabled or not",
            "children": {
              "enabled": {
                "type": "Boolean",
                "description": "Whether the content service is enabled or not"
              }
            }
          },
          "appIds": {
            "type": "AppIds",
            "description": "App ID mapping.",
            "children": {
              "android": {
                "type": "String",
                "optional": true,
                "description": "Android app ID"
              },
              "ios": {
                "type": "String",
                "optional": true,
                "description": "iOS app ID"
              }
            }
          },
          "mala": {
            "type": "Any",
            "optional": true,
            "description": "MALA settings"
          }
        },
        "hasResponse": true
      },
      "GetAssets": {
        "description": "Get organization assets",
        "src": "web-gateway/app/organization/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/organization/:id/preference/assets"
        },
        "version": "3.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "mala": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether to include MALA settings in the response"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of an organization the assets belongs to"
          },
          "displayName": {
            "type": "String",
            "optional": true,
            "description": "Display name of the organization"
          },
          "assets": {
            "type": "OrgAssets",
            "description": "Organization assets",
            "children": {
              "logoUrl": {
                "type": "String",
                "optional": true,
                "description": "Full URL of the logo"
              },
              "color": {
                "type": "Color",
                "description": "Color information"
              }
            }
          },
          "appIds": {
            "type": "AppIds",
            "description": "App ID mapping.",
            "children": {
              "android": {
                "type": "String",
                "optional": true,
                "description": "Android app ID"
              },
              "ios": {
                "type": "String",
                "optional": true,
                "description": "iOS app ID"
              }
            }
          },
          "mala": {
            "type": "Any",
            "optional": true,
            "description": "MALA settings."
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create organization preferences",
        "src": "web-gateway/app/organization/preference/route.ts",
        "api": {
          "method": "POST",
          "url": "/organization/:id/preference"
        },
        "version": "3.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "logoFilename": {
            "type": "String",
            "optional": true,
            "description": "Logo filename"
          },
          "logoBaseUrl": {
            "type": "String",
            "optional": true,
            "description": "Logo baseURL"
          },
          "displayName": {
            "type": "String",
            "optional": true,
            "description": "Display name"
          },
          "appIds": {
            "type": "Object",
            "optional": true,
            "description": "App IDs",
            "children": {
              "ios": {
                "type": "String",
                "optional": true,
                "description": "iOS App ID"
              },
              "android": {
                "type": "String",
                "optional": true,
                "description": "Android App ID"
              }
            }
          },
          "resetPasswordBaseUrl": {
            "type": "String",
            "optional": true,
            "description": "Reset password baseUrl"
          },
          "color": {
            "type": "Color",
            "optional": true,
            "description": "Color palette",
            "children": {
              "primary": {
                "type": "string",
                "optional": true,
                "description": "Primary color"
              },
              "accent": {
                "type": "string",
                "optional": true,
                "description": "Secondary color"
              }
            }
          },
          "mala": {
            "type": "Any",
            "optional": true,
            "description": "MALA settings"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Update": {
        "description": "Update organization preferences",
        "src": "web-gateway/app/organization/preference/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/organization/:id/preference"
        },
        "version": "3.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "logoFilename": {
            "type": "String",
            "optional": true,
            "description": "Logo filename"
          },
          "logoBaseUrl": {
            "type": "String",
            "optional": true,
            "description": "Logo baseURL"
          },
          "displayName": {
            "type": "String",
            "optional": true,
            "description": "Display name"
          },
          "appIds": {
            "type": "Object",
            "optional": true,
            "description": "App IDs",
            "children": {
              "ios": {
                "type": "String",
                "optional": true,
                "description": "iOS App ID"
              },
              "android": {
                "type": "String",
                "optional": true,
                "description": "Android App ID"
              }
            }
          },
          "resetPasswordBaseUrl": {
            "type": "String",
            "optional": true,
            "description": "Reset password baseUrl"
          },
          "color": {
            "type": "Color",
            "optional": true,
            "description": "Color palette",
            "children": {
              "primary": {
                "type": "string",
                "optional": true,
                "description": "Primary color"
              },
              "accent": {
                "type": "string",
                "optional": true,
                "description": "Secondary color"
              }
            }
          },
          "mala": {
            "type": "Any",
            "optional": true,
            "description": "MALA settings"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Package": {
    "Package": {
      "GetAll": {
        "description": "Get listing of all packages and products",
        "src": "web-gateway/app/package/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/package"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Restrict results to only active or inactive entries"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "PackageSingle[]",
            "description": "A package object record array",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of this package entry"
              },
              "title": {
                "type": "String",
                "description": "The title of this package entry"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "The description of this product"
              },
              "isActive": {
                "type": "Boolean",
                "description": "If this package is active"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The time this entry was created"
              },
              "updatedAt": {
                "type": "Timestamp",
                "description": "The time this entry was updated"
              },
              "translations": {
                "type": "PackageTranslation[]",
                "description": "Translations collection",
                "children": {
                  "locale": {
                    "type": "String",
                    "description": "Locale of the translation"
                  },
                  "title": {
                    "type": "String",
                    "description": "Package title in specific locale"
                  },
                  "description": {
                    "type": "String",
                    "optional": true,
                    "description": "Package description in specific locale"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Get single packages or product by id.\nClient can only fetch packages for organizations they are assigned to.",
        "src": "web-gateway/app/package/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the package to retrieve, passed as the last URI parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of this package entry"
          },
          "title": {
            "type": "String",
            "description": "The title of this package entry"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "The description of this product"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Indicates whether this package is active"
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "The time this entry was created"
          },
          "updatedAt": {
            "type": "Timestamp",
            "description": "The time this entry was updated"
          },
          "translations": {
            "type": "PackageTranslation[]",
            "description": "Translations collection",
            "children": {
              "locale": {
                "type": "String",
                "description": "Locale of the translation"
              },
              "title": {
                "type": "String",
                "description": "Package title in specific locale"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "Package description in specific locale"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create new package or product.",
        "src": "web-gateway/app/package/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/package"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "title": {
            "type": "String",
            "description": "The unique title of this package or product"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "The public description of this package"
          },
          "payload": {
            "type": "Any",
            "optional": true,
            "description": "The payload for package"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "String",
            "description": "The id of the newly-created package"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update particular package.",
        "src": "web-gateway/app/package/core/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/package/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the package to update, passed as the last URI parameter"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "The unique title of this package or product"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "The public description of this package"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "If this package is active"
          },
          "payload": {
            "type": "Any",
            "optional": true,
            "description": "The payload for package. Can be `null` to clear the payload contents."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Package-Enrollment": {
      "GetAll": {
        "description": "Fetch all enrollments.",
        "src": "web-gateway/app/package/enrollment/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/enrollment"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAssociation"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "If requester is a client, this value will always be ovewritten with their own user id.  If requester is provider, this field is required, and they must have access to the passed client id"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization to fetch enrollments for"
          },
          "package": {
            "type": "Bigint",
            "optional": true,
            "description": "Return enrollments only for this package"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Return enrollments only that are active or inactive (true|false)"
          },
          "sort": {
            "type": "EnrollmentSort[]",
            "optional": true,
            "description": "A collection that determines how the result should be sorted",
            "children": {
              "property": {
                "type": "EnrollmentSortProperty",
                "description": "A property to sort by",
                "values": "'enrollStart' | 'enrollEnd'"
              },
              "dir": {
                "type": "EnrollmentSortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sort direction",
                "values": "'asc' | 'desc'"
              }
            }
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "PackageEnrollmentSegment[]",
            "description": "An array of enrollments",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of this enrollment"
              },
              "account": {
                "type": "Entity",
                "description": "The account associated with this enrollment",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  }
                }
              },
              "package": {
                "type": "PackageRef",
                "description": "The package associated with this enrollment",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Package ID"
                  },
                  "title": {
                    "type": "String",
                    "description": "Package Title"
                  }
                }
              },
              "organization": {
                "type": "Entity",
                "description": "The organization associated with this package, which is associated with this enrollment",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  }
                }
              },
              "isActive": {
                "type": "Boolean",
                "description": "If this enrollment is active"
              },
              "enroll": {
                "type": "EnrollmentDates",
                "description": "Enrollment dates",
                "children": {
                  "start": {
                    "type": "Timestamp",
                    "description": "The time this enrollment was enrolled"
                  },
                  "end": {
                    "type": "Timestamp",
                    "optional": true,
                    "description": "The time this enrollment was ended. If the value is null, the enrollment hasn't ended"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single enrollment.\nProviders may only fetch enrollment for user they have access to.",
        "src": "web-gateway/app/package/enrollment/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/enrollment/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the enrollment to fetch"
          }
        },
        "apiSuccess": {
          "account": {
            "type": "Entity",
            "description": "The account associated with this enrollment",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Account ID"
              }
            }
          },
          "package": {
            "type": "PackageRef",
            "description": "The package associated with this enrollment",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Package ID"
              },
              "title": {
                "type": "String",
                "description": "Package Title"
              }
            }
          },
          "organization": {
            "type": "Entity",
            "description": "The organization associated with this package, which is associated with this enrollment",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "Organization ID"
              }
            }
          },
          "isActive": {
            "type": "Boolean",
            "description": "If this enrollment is active"
          },
          "enroll": {
            "type": "EnrollmentDates",
            "description": "Enrollment dates",
            "children": {
              "start": {
                "type": "Timestamp",
                "description": "The time this enrollment was enrolled"
              },
              "end": {
                "type": "Timestamp",
                "optional": true,
                "description": "The time this enrollment was ended.  If the value is null, the enrollment hasn't ended"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add new enrollment entry.\nAvailable to admins, managers, providers, and clients.",
        "src": "web-gateway/app/package/enrollment/route.ts",
        "api": {
          "method": "POST",
          "url": "/package/enrollment"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAdmin"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The account associated with this enrollment. Optional for Client requests, otherwise required"
          },
          "package": {
            "type": "Bigint",
            "description": "The package associated with this enrollment"
          },
          "enroll": {
            "type": "EnrollmentDates",
            "description": "Enrollment dates",
            "children": {
              "start": {
                "type": "Timestamp",
                "description": "The time this enrollment was enrolled"
              },
              "end": {
                "type": "Timestamp",
                "optional": true,
                "description": "The time this enrollment was ended"
              }
            }
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of this enrollment"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update enrollment details (e.g. deactivate enrollment)",
        "src": "web-gateway/app/package/enrollment/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/package/enrollment/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The enrollment ID"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "If this enrollment is active"
          },
          "enroll": {
            "type": "EnrollmentDates",
            "optional": true,
            "description": "Enrollment dates",
            "children": {
              "start": {
                "type": "Timestamp",
                "description": "The time this enrollment was enrolled"
              },
              "end": {
                "type": "Timestamp",
                "optional": true,
                "description": "The time this enrollment was ended - NULL clear this date"
              }
            }
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete enrollment entry.\nAdmins, managers, and providers have access to this endpoint.\nManagers can only unenroll for packages in their organization.\nProviders can only access clients they have permission to, and packages they are part of the same organization of",
        "src": "web-gateway/app/package/enrollment/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/package/enrollment/:id"
        },
        "version": "1.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The enrollment to delete, passed as the last uri segment"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Package-Organization": {
      "GetAll": {
        "description": "Fetch package-organization associations by organization",
        "src": "web-gateway/app/package/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "package": {
            "type": "Bigint",
            "optional": true,
            "description": "Fetch only selected package associations"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "Fetch only active / inactive associations"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "PackageAssociation[]",
            "description": "Collection of packages for specified organizations",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of an organization-package association"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Package-organization association activity status flag"
              },
              "sortOrder": {
                "type": "Integer",
                "optional": true,
                "description": "Organization-specific sort order for this package"
              },
              "payload": {
                "type": "Any",
                "optional": true,
                "description": "Additional organization-specific data stored for this package"
              },
              "organization": {
                "type": "Entity",
                "description": "Organization object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of an organization associated with package"
                  }
                }
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "Timestamp of association creation"
              },
              "updatedAt": {
                "type": "Timestamp",
                "description": "Timestamp of association last update"
              },
              "package": {
                "type": "PackageData",
                "description": "Package data object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of this package entry"
                  },
                  "title": {
                    "type": "String",
                    "description": "The title of this package entry"
                  },
                  "description": {
                    "type": "String",
                    "optional": true,
                    "description": "The description of this product"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "If this package is active"
                  },
                  "createdAt": {
                    "type": "Timestamp",
                    "description": "The time this package was created"
                  },
                  "updatedAt": {
                    "type": "Timestamp",
                    "description": "The time this package was updated"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single package-organization association by ID",
        "src": "web-gateway/app/package/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAssociation"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the package-organization association"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of an organization-package association"
          },
          "isActive": {
            "type": "Boolean",
            "description": "Package-organization association activity status flag"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "Organization-specific sort order for this package"
          },
          "payload": {
            "type": "Any",
            "optional": true,
            "description": "Additional organization-specific data stored for this package"
          },
          "organization": {
            "type": "Entity",
            "description": "Organization object",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of an organization associated with package"
              }
            }
          },
          "createdAt": {
            "type": "Timestamp",
            "description": "Timestamp of association creation"
          },
          "updatedAt": {
            "type": "Timestamp",
            "description": "Timestamp of association last update"
          },
          "package": {
            "type": "PackageData",
            "description": "Package data object",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of this package entry"
              },
              "title": {
                "type": "String",
                "description": "The title of this package entry"
              },
              "description": {
                "type": "String",
                "optional": true,
                "description": "The description of this product"
              },
              "isActive": {
                "type": "Boolean",
                "description": "If this package is active"
              },
              "createdAt": {
                "type": "Timestamp",
                "description": "The time this package was created"
              },
              "updatedAt": {
                "type": "Timestamp",
                "description": "The time this package was updated"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create package-organization association",
        "src": "web-gateway/app/package/organization/route.ts",
        "api": {
          "method": "POST",
          "url": "/package/organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "package": {
            "type": "Bigint",
            "description": "ID of the package"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "The default sortOrder of the package for the organization"
          }
        },
        "apiSuccess": {
          "id": {
            "description": "Association ID",
            "type": "String",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update package-organization association data",
        "src": "web-gateway/app/package/organization/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/package/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the package-organization association"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "The default sortOrder of the package for the organization"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Indicates whether association is active or not"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete package-organization entry by specified ID",
        "src": "web-gateway/app/package/organization/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/package/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the package-organization association"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Locale": {
    "Locale-Package": {
      "Get": {
        "description": "Get a translation for specific package & locale",
        "src": "web-gateway/app/package/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/package/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the package"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "title": {
            "type": "String",
            "description": "Translated title of the package"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Translated description of the package"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific package & locale",
        "src": "web-gateway/app/package/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/package/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the package"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "title": {
            "type": "String",
            "description": "Translated title of the package"
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Translated description of the package"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific package & locale",
        "src": "web-gateway/app/package/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/package/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the package"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Locale-Supplement": {
      "Get": {
        "description": "Get a translation for specific supplement & locale",
        "src": "web-gateway/app/supplement/locale/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/:id/locale/:locale"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "fullName": {
            "type": "String",
            "description": "Translated full name of the supplement"
          },
          "shortName": {
            "type": "String",
            "optional": true,
            "description": "Translated short name of the supplement"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Create a translation for specific supplement & locale",
        "src": "web-gateway/app/supplement/locale/route.ts",
        "api": {
          "method": "PUT",
          "url": "/supplement/:id/locale/:locale"
        },
        "permissions": [
          "Admin"
        ],
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          },
          "fullName": {
            "type": "String",
            "description": "Translated full name of the supplement"
          },
          "shortName": {
            "type": "String",
            "optional": true,
            "description": "Translated short name of the supplement"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Deletes a translation for specific supplement & locale",
        "src": "web-gateway/app/supplement/locale/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/supplement/:id/locale/:locale"
        },
        "permissions": [
          "Admin"
        ],
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement association"
          },
          "locale": {
            "type": "String",
            "description": "Name of the locale"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Pain": {
    "Pain-Tracking": {
      "Create": {
        "description": "Inserts pain location and relevant data for specified account",
        "src": "web-gateway/app/pain-tracking/history/route.ts",
        "api": {
          "method": "POST",
          "url": "/pain-tracking/history"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "account": {
            "type": "String",
            "description": "Account id of specified user"
          },
          "region": {
            "type": "String",
            "description": "Pain region: Chest | Throat | ..."
          },
          "location": {
            "type": "PainLocation",
            "description": "Pain location - point information (x, y, z)",
            "children": {
              "x": {
                "type": "Number",
                "description": "X coordinate of pain location"
              },
              "y": {
                "type": "Number",
                "description": "Y coordinate of pain location"
              },
              "z": {
                "type": "Number",
                "description": "Z coordinate of pain location"
              }
            }
          },
          "reportedAt": {
            "type": "Timestamp",
            "description": "Date-time of pain with time zone"
          },
          "duration": {
            "type": "Interval",
            "description": "Pain interval in hh:mm:ss format"
          },
          "type": {
            "type": "PainTypeId",
            "description": "Pain type: 1-General | 2-Pounding | 3-Throbbing | 4-Stabbing",
            "values": "1 | 2 | 3 | 4"
          },
          "intensity": {
            "type": "PainIntensity",
            "description": "Pain intensity in range [0, 10]",
            "values": "0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of inserted pain location"
          }
        },
        "hasResponse": true
      },
      "GetAll": {
        "description": "Gets list of pain location for specified user and datetime",
        "src": "web-gateway/app/pain-tracking/history/route.ts",
        "api": {
          "method": "GET",
          "url": "/pain-tracking/history"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiSuccess": {
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          },
          "data": {
            "type": "PainTrackingSingle[]",
            "description": "List of pain registries",
            "children": {
              "id": {
                "type": "String",
                "description": "Pain history id of specific record"
              },
              "account": {
                "type": "Bigint",
                "description": "Account id of specified user"
              },
              "region": {
                "type": "String",
                "description": "Pain region: Chest | Throat | ..."
              },
              "location": {
                "type": "PainLocation",
                "description": "Pain location - point information (x, y, z)",
                "children": {
                  "x": {
                    "type": "Number",
                    "description": "X coordinate of pain location"
                  },
                  "y": {
                    "type": "Number",
                    "description": "Y coordinate of pain location"
                  },
                  "z": {
                    "type": "Number",
                    "description": "Z coordinate of pain location"
                  }
                }
              },
              "reportedAt": {
                "type": "Timestamp",
                "description": "Datetime of pain with time zone"
              },
              "duration": {
                "type": "IntervalObject",
                "optional": true,
                "description": "Pain interval information - at least one attribute will exist",
                "children": {
                  "hours": {
                    "type": "Number",
                    "optional": true,
                    "description": "pain duration - hours"
                  },
                  "minutes": {
                    "type": "Number",
                    "optional": true,
                    "description": "pain duration - minutes"
                  },
                  "seconds": {
                    "type": "Number",
                    "optional": true,
                    "description": "pain duration - seconds"
                  }
                }
              },
              "type": {
                "type": "PainType",
                "description": "Pain type id and description information",
                "children": {
                  "id": {
                    "type": "Number",
                    "description": "Pain type id"
                  },
                  "description": {
                    "type": "String",
                    "description": "Pain type description"
                  }
                }
              },
              "intensity": {
                "type": "PainIntensity",
                "description": "Pain intensity in range [1, 5]"
              }
            }
          }
        },
        "apiParam": {
          "account": {
            "type": "String",
            "description": "Account id of specified user"
          },
          "startDate": {
            "type": "String",
            "description": "start datetime with time zone"
          },
          "endDate": {
            "type": "String",
            "optional": true,
            "description": "end datetime with time zone, default=startDate"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "description": "Number of items to offset from beginning of the result set"
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Gets single pain location",
        "src": "web-gateway/app/pain-tracking/history/route.ts",
        "api": {
          "method": "GET",
          "url": "/pain-tracking/history/:id"
        },
        "version": "1.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of specified pain location"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "String",
            "description": "ID of specified pain location"
          },
          "account": {
            "type": "String",
            "description": "Account id of specified user"
          },
          "region": {
            "type": "String",
            "description": "Pain region: Chest | Throat | ..."
          },
          "location": {
            "type": "PainLocation",
            "description": "Pain location - point information (x, y, z)",
            "children": {
              "x": {
                "type": "Number",
                "description": "X coordinate of pain location"
              },
              "y": {
                "type": "Number",
                "description": "Y coordinate of pain location"
              },
              "z": {
                "type": "Number",
                "description": "Z coordinate of pain location"
              }
            }
          },
          "reportedAt": {
            "type": "String",
            "description": "Datetime of pain with time zone"
          },
          "duration": {
            "type": "IntervalObject",
            "optional": true,
            "description": "Pain interval information - at least one attribute will exist",
            "children": {
              "hours": {
                "type": "Number",
                "optional": true,
                "description": "pain duration - hours"
              },
              "minutes": {
                "type": "Number",
                "optional": true,
                "description": "pain duration - minutes"
              },
              "seconds": {
                "type": "Number",
                "optional": true,
                "description": "pain duration - seconds"
              }
            }
          },
          "type": {
            "type": "PainType",
            "description": "Pain type id and description information",
            "children": {
              "id": {
                "type": "Number",
                "description": "Pain type id"
              },
              "description": {
                "type": "String",
                "description": "Pain type description"
              }
            }
          },
          "intensity": {
            "type": "PainIntensity",
            "description": "Pain intensity in range [0, 10]"
          }
        },
        "hasResponse": true
      },
      "Delete": {
        "description": "Deletes single pain location",
        "src": "web-gateway/app/pain-tracking/history/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/pain-tracking/history/:id"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of specified pain location"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Update": {
        "description": "Updates pain location data",
        "src": "web-gateway/app/pain-tracking/history/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/pain-tracking/history"
        },
        "version": "1.0",
        "permissions": [
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "String",
            "description": "ID of the pain location specified for update"
          },
          "duration": {
            "type": "String",
            "optional": true,
            "description": "Pain interval in hh:mm:ss format"
          },
          "type": {
            "type": "Number",
            "optional": true,
            "description": "Pain type: 1-General | 2-Pounding | 3-Throbbing | 4-Stabbing"
          },
          "intensity": {
            "type": "PainIntensity",
            "optional": true,
            "description": "Pain intensity in range [0, 10]"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetTypes": {
        "description": "Gets all pain types",
        "src": "web-gateway/app/pain-tracking/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/pain-tracking/type"
        },
        "version": "1.0",
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Pain types list",
            "children": {
              "id": {
                "type": "PainTypeId",
                "description": "Pain type ID",
                "values": "1 | 2 | 3 | 4"
              },
              "description": {
                "type": "String",
                "description": "Pain type description"
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  },
  "Meeting": {
    "Meeting-Attendee": {
      "Add": {
        "description": "Add attendee to meeting",
        "src": "web-gateway/app/schedule/attendance/route.ts",
        "api": {
          "method": "POST",
          "url": "/meeting/attendee"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess"
        ],
        "apiParam": {
          "meetingId": {
            "type": "Bigint",
            "description": "The id of the meeting"
          },
          "attendees": {
            "type": "Object[]",
            "description": "An attendee id array.",
            "children": {
              "account": {
                "type": "Bigint",
                "description": "The id of the attendee"
              },
              "firstName": {
                "type": "String",
                "description": "First name of the attendee"
              },
              "lastName": {
                "type": "String",
                "description": "The id of the attendee"
              },
              "email": {
                "type": "String",
                "description": "The id of the attendee"
              }
            }
          },
          "recurring": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates whether to add the attendee to the recurring series for the meeting, if applicable. Defaults to 'false', i.e. adding an attendee to a single meeting."
          }
        }
      },
      "Update": {
        "description": "Set attendance status for a specific account and meeting",
        "src": "web-gateway/app/schedule/attendance/route.ts",
        "api": {
          "method": "PUT",
          "url": "/attendance"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "meetingId": {
            "type": "Bigint",
            "description": "The meeting ID"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "An account to set the attendance for. Optional for Client requests, otherwise required"
          },
          "attended": {
            "type": "Boolean",
            "description": "A flag indicating if the user attended the meeting (true) or missed it (false)"
          }
        }
      },
      "DeleteSingle": {
        "description": "Delete an attendee from a single meeting",
        "src": "web-gateway/app/schedule/attendance/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/:meetingId/attendee/:account"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "meetingId": {
            "type": "Bigint",
            "description": "The id of the meeting"
          },
          "account": {
            "type": "Bigint",
            "description": "The id of the account to remove from the meeting"
          }
        }
      },
      "DeleteRecurring": {
        "description": "Delete an attendee from a recurring meeting",
        "src": "web-gateway/app/schedule/attendance/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/:meetingId/attendee/:account/recurring"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "meetingId": {
            "type": "Bigint",
            "description": "The id of the meeting"
          },
          "account": {
            "type": "Bigint",
            "description": "The id of the account to remove from the meeting"
          }
        }
      }
    },
    "Meeting": {
      "GetAll": {
        "description": "Fetch a list of all meetings, up to 50 paginated entries.",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "GET",
          "url": "/meeting"
        },
        "version": "2.0",
        "apiParam": {
          "accounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "An array of account ids of meeting attendees"
          },
          "emails": {
            "type": "String[]",
            "optional": true,
            "description": "An array of email addresses of meeting attendees"
          },
          "startTimeBegin": {
            "type": "Timestamp",
            "optional": true,
            "description": "Select meetings that start at or after this time, in ISO8601 format"
          },
          "startTimeEnd": {
            "type": "Timestamp",
            "optional": true,
            "description": "Select meetings that start at or before this time, in ISO8601 format"
          },
          "type": {
            "type": "MeetingTypeCode",
            "optional": true,
            "description": "Select meetings that are of this type.  Type 'selvera' includes 1on1initial, 1on1, and circle only.",
            "values": "'1on1initial' | '1on1' | 'circle' | 'busy' | 'google' | 'selvera'"
          },
          "organizationShortcode": {
            "type": "String",
            "optional": true,
            "description": "Select meetings only associated with organization hierarchy related to this organization. Accepts only organization shortcode, not organization id."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "50",
            "description": "Pagination page size"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Pagination offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "MeetingItem[]",
            "description": "Array of meeting objects",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of this meeting"
              },
              "createdBy": {
                "type": "Bigint",
                "optional": true,
                "description": "Creator of the meeting"
              },
              "title": {
                "type": "String",
                "description": "The title of this meeting"
              },
              "note": {
                "type": "String",
                "optional": true,
                "description": "A note for this meeting"
              },
              "startTime": {
                "type": "Timestamp",
                "description": "The start time of this meeting"
              },
              "endTime": {
                "type": "Timestamp",
                "description": "The start time of this meeting"
              },
              "organizationShortcode": {
                "type": "String",
                "description": "An organization shortcode the meeting is associated with"
              },
              "organizationName": {
                "type": "String",
                "description": "Full organization name"
              },
              "organizationLogoUrl": {
                "type": "String",
                "description": "Organization logo URL"
              },
              "organizationHierarchy": {
                "type": "Bigint[]",
                "description": "Organization hierarchy path"
              },
              "type": {
                "type": "Object",
                "description": "The type of this meeting",
                "children": {
                  "id": {
                    "type": "Integer",
                    "description": "ID of the meeting type"
                  },
                  "code": {
                    "type": "String",
                    "optional": true,
                    "description": "The code of the meeting type"
                  },
                  "description": {
                    "type": "String",
                    "description": "The description of the meeting type"
                  }
                }
              },
              "recurring": {
                "type": "MeetingRecurring",
                "optional": true,
                "description": "Recurring meeting information, will be null if it's a non-recurring meeting",
                "children": {
                  "recurringTemplateId": {
                    "type": "Bigint",
                    "description": "Recurring template ID"
                  },
                  "edited": {
                    "type": "Boolean",
                    "description": "A flag indicating whether a single meeting from the recurring series was edited"
                  }
                }
              },
              "attendees": {
                "type": "MeetingAttendeeData[]",
                "description": "An array of meeting attendee objects",
                "children": {
                  "account": {
                    "type": "Bigint",
                    "description": "The id of the account"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "The first name of the individual"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "The last name of the individual"
                  },
                  "email": {
                    "type": "String",
                    "description": "The email of the individual"
                  },
                  "attended": {
                    "type": "Boolean",
                    "optional": true,
                    "description": "A flag indicating whether the participant attended the meeting"
                  }
                }
              },
              "location": {
                "type": "MeetingLocation",
                "optional": true,
                "description": "The location object, will be null if it is a virtual meeting",
                "children": {
                  "streetAddress": {
                    "type": "String",
                    "description": "The street address of the meeting"
                  },
                  "city": {
                    "type": "String",
                    "description": "The city of the meeting"
                  },
                  "postalCode": {
                    "type": "String",
                    "description": "The postalCode of the meeting"
                  },
                  "state": {
                    "type": "String",
                    "description": "The state of the meeting"
                  },
                  "country": {
                    "type": "String",
                    "description": "The country of the meeting"
                  },
                  "latitude": {
                    "type": "String",
                    "optional": true,
                    "description": "Latitude coordinate of the meeting"
                  },
                  "longitude": {
                    "type": "String",
                    "optional": true,
                    "description": "Longitude coordinate of the meeting"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single meeting",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "GET",
          "url": "/meeting/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meeting, passed as the last URI parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of this meeting"
          },
          "title": {
            "type": "String",
            "description": "The title of this meeting"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "A note for this meeting"
          },
          "createdBy": {
            "type": "Bigint",
            "optional": true,
            "description": "Creator of the meeting"
          },
          "startTime": {
            "type": "Timestamp",
            "description": "The start time of this meeting"
          },
          "endTime": {
            "type": "Timestamp",
            "description": "The start time of this meeting"
          },
          "organizationShortcode": {
            "type": "String",
            "description": "An organization shortcode the meeting is associated with"
          },
          "organizationName": {
            "type": "String",
            "description": "Full organization name"
          },
          "organizationLogoUrl": {
            "type": "String",
            "description": "Organization logo URL"
          },
          "organizationHierarchy": {
            "type": "Bigint[]",
            "description": "Organization hierarchy path"
          },
          "type": {
            "type": "Object",
            "description": "The type of this meeting",
            "children": {
              "id": {
                "type": "Integer",
                "description": "ID of the meeting type"
              },
              "code": {
                "type": "String",
                "optional": true,
                "description": "The code of the meeting type"
              },
              "description": {
                "type": "String",
                "description": "The description of the meeting type"
              }
            }
          },
          "googleCalendarId": {
            "type": "String",
            "optional": true,
            "description": "The google calendar ID of this meeting"
          },
          "recurring": {
            "type": "MeetingRecurring",
            "optional": true,
            "description": "Recurring meeting information, will be null if it's a non-recurring meeting",
            "children": {
              "recurringTemplateId": {
                "type": "Bigint",
                "description": "Recurring template ID"
              },
              "edited": {
                "type": "Boolean",
                "description": "A flag indicating whether a single meeting from the recurring series was edited"
              }
            }
          },
          "attendees": {
            "type": "MeetingAttendeeDataExtended[]",
            "description": "An array of meeting attendee objects",
            "children": {
              "account": {
                "type": "Bigint",
                "description": "The id of the account"
              },
              "firstName": {
                "type": "String",
                "description": "The first name of the individual"
              },
              "lastName": {
                "type": "String",
                "description": "The last name of the individual"
              },
              "email": {
                "type": "String",
                "description": "The email of the individual"
              },
              "accountTypeId": {
                "type": "AccountTypeId",
                "description": "The account type of the individual"
              },
              "timezone": {
                "type": "TimezoneItem",
                "description": "The timeone of the individual",
                "children": {
                  "name": {
                    "type": "String",
                    "description": "Timezone code"
                  },
                  "abbreviation": {
                    "type": "String",
                    "description": "Timezone abbreviation"
                  }
                }
              },
              "attended": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating whether the participant attended the meeting"
              }
            }
          },
          "location": {
            "type": "MeetingLocation",
            "optional": true,
            "description": "The location object, will be null if it is a virtual meeting",
            "children": {
              "streetAddress": {
                "type": "String",
                "description": "The street address of the meeting"
              },
              "city": {
                "type": "String",
                "description": "The city of the meeting"
              },
              "state": {
                "type": "String",
                "description": "The state of the meeting"
              },
              "postalCode": {
                "type": "String",
                "description": "The postalCode of the meeting"
              },
              "country": {
                "type": "String",
                "description": "The country of the meeting"
              },
              "latitude": {
                "type": "String",
                "optional": true,
                "description": "Latitude coordinate of the meeting"
              },
              "longitude": {
                "type": "String",
                "optional": true,
                "description": "Longitude coordinate of the meeting"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add meeting",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "POST",
          "url": "/meeting"
        },
        "version": "2.0",
        "apiParam": {
          "title": {
            "type": "String",
            "description": "The title for the meeting."
          },
          "startTime": {
            "type": "Timestamp",
            "description": "Start Time for the meeting."
          },
          "endTime": {
            "type": "Timestamp",
            "description": "End Time for the meeting."
          },
          "meetingTypeId": {
            "type": "Integer",
            "description": "ID of the meeting type."
          },
          "organizationShortcode": {
            "type": "String",
            "optional": true,
            "description": "The shortcode of the organization this meeting is associated with.  If left blank, defaults to 'selvera'.  Used for getting organization data and email reminders"
          },
          "organizationId": {
            "type": "Bigint",
            "optional": true,
            "description": "The id of the organization this meeting is associated with. Used for getting organization data and for email reminders. If given, overrides organizationShortcode"
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "Notes about meeting"
          },
          "recurring": {
            "type": "Object",
            "optional": true,
            "description": "Recurring meeting information. If it's a singular meeting, and not a recurring series, this property can be skipped.",
            "children": {
              "interval": {
                "type": "Interval",
                "description": "Interval for the recurring meeting."
              },
              "endDate": {
                "type": "Date",
                "description": "The end date for the recurring series."
              }
            }
          },
          "attendees": {
            "type": "Object[]",
            "optional": true,
            "description": "An array of attendees to add to meeting",
            "children": {
              "account": {
                "type": "Bigint",
                "description": "The account id of the attendee"
              }
            }
          },
          "location": {
            "type": "MeetingLocation",
            "optional": true,
            "description": "An object containing location information if meeting is physical",
            "children": {
              "streetAddress": {
                "type": "String",
                "description": "The street address of the meeting"
              },
              "city": {
                "type": "String",
                "description": "The city in which the meeting takes place"
              },
              "postalCode": {
                "type": "String",
                "description": "The postal code for the address"
              },
              "state": {
                "type": "String",
                "description": "The state in which the meeting takes palce"
              },
              "country": {
                "type": "String",
                "description": "The country in which the meeting takes place"
              },
              "latitude": {
                "type": "String",
                "optional": true,
                "description": "The latitude for the meeting"
              },
              "longitude": {
                "type": "String",
                "optional": true,
                "description": "The longigtude for the meeting"
              }
            }
          }
        },
        "apiSuccess": {
          "meetingId": {
            "type": "Integer",
            "description": "ID of the created meeting"
          }
        }
      },
      "Update": {
        "description": "Updating an existing details to an existing meeting",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "PUT",
          "url": "/meeting/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meeting, passed as the last URI parameter"
          },
          "title": {
            "type": "String",
            "optional": true,
            "description": "The title for the meeting"
          },
          "startTime": {
            "type": "Timestamp",
            "optional": true,
            "description": "Start Time for the meeting"
          },
          "endTime": {
            "type": "Timestamp",
            "optional": true,
            "description": "End Time for the meeting"
          },
          "meetingTypeId": {
            "type": "Integer",
            "optional": true,
            "description": "ID of the meeting type."
          },
          "note": {
            "type": "String",
            "optional": true,
            "description": "A note about the meeting"
          },
          "recurring": {
            "type": "Object",
            "optional": true,
            "description": "Recurring meeting information. If it's a singular meeting, and not a recurring series, this property can be skipped. A single, existing meeting cannot be 'converted' into a series. Updates will be applied to all future meetings in the series.",
            "children": {
              "interval": {
                "type": "Interval",
                "description": "Interval for the recurring meeting."
              },
              "endDate": {
                "type": "Date",
                "description": "The end date for the recurring series."
              }
            }
          },
          "location": {
            "type": "MeetingLocation",
            "optional": true,
            "description": "An object containing location information if meeting is physical",
            "children": {
              "streetAddress": {
                "type": "String",
                "optional": true,
                "description": "The street address of the meeting"
              },
              "city": {
                "type": "String",
                "optional": true,
                "description": "The city in which the meeting takes place"
              },
              "postalCode": {
                "type": "String",
                "optional": true,
                "description": "The postal code for the address"
              },
              "state": {
                "type": "String",
                "optional": true,
                "description": "The state in which the meeting takes palce"
              },
              "country": {
                "type": "String",
                "optional": true,
                "description": "The country in which the meeting takes place"
              },
              "latitude": {
                "type": "String",
                "optional": true,
                "description": "The latitude for the meeting"
              },
              "longitude": {
                "type": "String",
                "optional": true,
                "description": "The longigtude for the meeting"
              }
            }
          }
        }
      },
      "DeleteSingle": {
        "description": "Delete an existing meeting and remove all attendees from that record",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/single/:id"
        },
        "version": "2.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meeting, passed as the last URI parameter"
          }
        }
      },
      "DeleteQuick": {
        "description": "Delete an existing meeting if 1on1 or remove account from circle meeting.  This endpoint is intended for quick meeting cancelation via an email reminder link",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/quick/:token"
        },
        "version": "2.0",
        "permissions": [
          "Public"
        ],
        "apiParam": {
          "token": {
            "type": "String",
            "description": "The token to validate delete"
          }
        }
      },
      "DeleteRecurring": {
        "description": "Delete an existing recurring series based on the meeting from the series",
        "src": "web-gateway/app/schedule/meeting/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/recurring/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the meeting in a recurring series"
          }
        }
      }
    },
    "Meeting-Type-Organization": {
      "GetAll": {
        "description": "Fetch meeting-types by organization",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/meeting/type/organization/:organization"
        },
        "version": "2.0",
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization ID to get hierarchy for."
          }
        },
        "apiSuccess": {
          "meetingTypes": {
            "type": "Object[]",
            "description": "An array of meeting-types objects",
            "children": {
              "typeId": {
                "type": "Integer",
                "description": "The id of this meeting-type"
              },
              "code": {
                "type": "String",
                "description": "The code of this meeting-type"
              },
              "description": {
                "type": "String",
                "description": "The description of this meeting-type"
              },
              "isActive": {
                "type": "Boolean",
                "description": "The status of this meeting-type"
              },
              "durations": {
                "type": "Interval[]",
                "description": "The collection of durations (Postgres intervals) for a meeting type for this organization"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Associate meeting-type with organization",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "POST",
          "url": "/meeting/type/organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID."
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID."
          },
          "durations": {
            "type": "Interval[]",
            "description": "Postgres interval collection."
          }
        }
      },
      "Update": {
        "description": "Associate meeting-type with organization",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "PUT",
          "url": "/meeting/type/organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID."
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID."
          },
          "durations": {
            "type": "Interval[]",
            "description": "Postgres interval collection."
          }
        }
      },
      "Delete": {
        "description": "Delete meeting-type association",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/meeting/type/:typeId/organization/:organization"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAdmin"
        ],
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID."
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID."
          }
        }
      }
    },
    "Meeting-Type": {
      "Create": {
        "description": "Add meeting type",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "POST",
          "url": "/meeting/type"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "code": {
            "type": "String",
            "description": "Code of an type."
          },
          "description": {
            "type": "String",
            "description": "Description of an type."
          }
        },
        "apiSuccess": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Patch meeting type",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "PATCH",
          "url": "/meeting/type/:typeId"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "The id of the meetingType, passed as the last URI parameter"
          },
          "code": {
            "type": "String",
            "optional": true,
            "description": "Code of an type."
          },
          "description": {
            "type": "String",
            "optional": true,
            "description": "Description of an type."
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Status of an type."
          }
        },
        "apiSuccess": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID"
          }
        }
      },
      "Put": {
        "description": "Update meeting type",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "PUT",
          "url": "/meeting/type/:typeId"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "The id of the meetingType, passed as the last URI parameter"
          },
          "code": {
            "type": "String",
            "description": "Code of an type."
          },
          "description": {
            "type": "String",
            "description": "Description of an type."
          },
          "isActive": {
            "type": "Boolean",
            "description": "Status of an type."
          }
        },
        "apiSuccess": {
          "typeId": {
            "type": "Bigint",
            "description": "Type ID"
          }
        }
      },
      "GetAll": {
        "description": "Fetch meeting types",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/meeting/type"
        },
        "version": "2.0",
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "optional": true,
            "description": "ID of an organization to resolve hierarchy to get the matching types for."
          },
          "includeInactive": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "A flag indicating whether to include inactive meeting types"
          }
        },
        "apiSuccess": {
          "types": {
            "type": "Array",
            "description": "Collection of meeting types",
            "children": {
              "id": {
                "type": "Integer",
                "description": "Meeting type ID"
              },
              "code": {
                "type": "String",
                "optional": true,
                "description": "Meeting type code."
              },
              "description": {
                "type": "String",
                "description": "Meeting type description."
              },
              "isActive": {
                "type": "Boolean",
                "optional": true,
                "description": "A flag indicating if a meeting type is currently active. Only included in the response if 'includeInactive' flag is set to 'true'"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single meeting type",
        "src": "web-gateway/app/schedule/type/route.ts",
        "api": {
          "method": "GET",
          "url": "/meeting/type/:typeId"
        },
        "version": "2.0",
        "apiParam": {
          "typeId": {
            "type": "Bigint",
            "description": "The id of the meeting type, passed as the last URI parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Integer",
            "description": "Meeting type ID"
          },
          "code": {
            "type": "String",
            "optional": true,
            "description": "Meeting type code."
          },
          "description": {
            "type": "String",
            "description": "Meeting type description."
          },
          "isActive": {
            "type": "Boolean",
            "description": "A flag indicating if a meeting type is currently active"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Schedule": {
    "Schedule-Available": {
      "GetAll": {
        "description": "Fetch all availability records for a single user",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "GET",
          "url": "/available"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "provider": {
            "type": "Bigint",
            "optional": true,
            "description": "The id of the provider to fetch availability for. If the current user is a provider and the parameter is missing, their ID will be used by default."
          }
        },
        "apiSuccess": {
          "availability": {
            "type": "ScheduleAvailableItem[]",
            "description": "Array of availability objects",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The id of this record"
              },
              "day": {
                "type": "Integer",
                "description": "The day this record corresponds to (0-6 :: Sunday - Saturday)"
              },
              "account": {
                "type": "Bigint",
                "description": "The account this record is connected to"
              },
              "startTime": {
                "type": "Time",
                "description": "The start time of this record, in 24-hour format in 5 minute increments.  00:00 - 24:00"
              },
              "endTime": {
                "type": "Time",
                "description": "The end time of this record, in 24-hour format in 5 minute increments.  00:00 - 24:00"
              },
              "timezone": {
                "type": "String",
                "description": "The timezone the availability corresponds to"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetProviders": {
        "description": "Fetch account from list which best matches availability preference",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "GET",
          "url": "/available/match"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "providers": {
            "type": "Bigint[]",
            "description": "The array of provider id's whose availability will be searched"
          },
          "preferredTime": {
            "type": "AvailabilityLookup",
            "description": "The time of day to search for",
            "values": "'morning' | 'afternoon' | 'evening'"
          },
          "offset": {
            "type": "Integer",
            "description": "The UTC offset to use when search for availability (-12 through 14)"
          }
        },
        "apiSuccess": {
          "providers": {
            "type": "Bigint[]",
            "description": "Array of providers account IDs with available time"
          }
        },
        "hasResponse": true
      },
      "GetCalendar": {
        "description": "Fetch availability calendar entries in a given date range for an account",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "GET",
          "url": "/available/calendar"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "providers": {
            "type": "Bigint[]",
            "optional": true,
            "description": "The array of provider id's to search through. Is conditionally required by the service if calendar IDs are missing."
          },
          "calendarIds": {
            "type": "Bigint[]",
            "optional": true,
            "description": "The array of calendar entry IDs to retrieve. Skips date/time based filters. Will retrieve IDs for matching providers if the parameter is supplied."
          },
          "startTime": {
            "type": "DateTime",
            "optional": true,
            "description": "Start date & time of the availability calendar range (with timezone)"
          },
          "endTime": {
            "type": "DateTime",
            "optional": true,
            "description": "End date & time of the availability calendar range (with timezone)"
          }
        },
        "apiSuccess": {
          "entries": {
            "type": "ScheduleCalendarSegment[]",
            "description": "Calendar availability entries",
            "children": {
              "ids": {
                "type": "Bigint[]",
                "description": "Calendar availability entry ID array. A single entry in an array indicates an actual calendar entry. More than one entry in the collection indicates that the entry has been merged with another entry."
              },
              "account": {
                "type": "Bigint",
                "description": "Account ID"
              },
              "startTime": {
                "type": "DateTime",
                "description": "Start time of availability window in UTC"
              },
              "endTime": {
                "type": "DateTime",
                "description": "End time of availability window in UTC"
              },
              "timezone": {
                "type": "String",
                "description": "Account timezone"
              },
              "isSingle": {
                "type": "Boolean",
                "description": "Indicates whether the item is a non-recurring availability entry"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch single availability record",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "GET",
          "url": "/available/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The id of the record to fetch, passed as the last URI parameter"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "The id of this record"
          },
          "day": {
            "type": "Integer",
            "description": "The day this record corresonds to (0-6 :: Sunday - Saturday)"
          },
          "account": {
            "type": "Bigint",
            "description": "The account this record is connected to"
          },
          "startTime": {
            "type": "Time",
            "description": "The start time of this record, in 24-hour format in 5 minute increments.  00:00 - 24:00"
          },
          "endTime": {
            "type": "Time",
            "description": "The end time of this record, in 24-hour format in 5 minute increments.  00:00 - 24:00"
          },
          "timezone": {
            "type": "String",
            "description": "The timezone the availability corresponds to"
          }
        },
        "hasResponse": true
      },
      "CreateRecurrent": {
        "description": "Add availability record",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "POST",
          "url": "/available"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "provider": {
            "type": "Bigint",
            "optional": true,
            "description": "The provider account to create the record for.  If the current user is a provider and the parameter is missing, their ID will be used by default."
          },
          "startDay": {
            "type": "Integer",
            "description": "The day that the startTime corresponds to (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday)"
          },
          "endDay": {
            "type": "Integer",
            "description": "The day that the endTime corresponds to (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday).  Can only be a maximum of one day beyond startDay, for a maximum of 24 hours"
          },
          "startTime": {
            "type": "Time",
            "description": "The start time of this record, represented as HH:MM.  Hours must be in 24-hour format.  Minutes must be divisble by 5. Time is passed without timezone, and ultimately manipulated using provider's timezone preference in DB"
          },
          "endTime": {
            "type": "Time",
            "description": "The end time of this record, represented as HH:MM.  Hours must be in 24-hour format.  Minutes must be divisble by 5. Time is passed without timezone, and ultimately manipulated using provider's timezone preference in DB"
          }
        },
        "apiSuccess": {
          "availableId": {
            "type": "Integer",
            "description": "The id of the newly-created record"
          }
        },
        "hasResponse": true
      },
      "CreateSingle": {
        "description": "Add single availability record",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "POST",
          "url": "/available/single"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "provider": {
            "type": "String",
            "optional": true,
            "description": "The provider account to create the record for. If the current user is a provider and the parameter is missing, their ID will be used by default."
          },
          "startTime": {
            "type": "DateTime",
            "description": "Timestamp with timezone when the availability starts."
          },
          "endTime": {
            "type": "DateTime",
            "description": "Timestamp with timezone when the availability ends. Has to be after startTime."
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Integer",
            "description": "ID of newly created availability calendar entry."
          }
        },
        "hasResponse": true
      },
      "SetTimezone": {
        "description": "Set the timezone for specific accounts.  The timezone must be a valid postgres name, such as 'America/New_York'",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "POST",
          "url": "/available/timezone"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "timezones": {
            "type": "AvailabilityTimezone[]",
            "description": "",
            "children": {
              "account": {
                "type": "Bigint",
                "description": "The account to set timezone for"
              },
              "timezone": {
                "type": "String",
                "description": "The timezone name to set"
              }
            }
          }
        }
      },
      "DeleteSingle": {
        "description": "Delete single availability calendar entry for a user",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/available/single/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The ID of availability calendar entry to remove"
          }
        }
      },
      "DeleteAll": {
        "description": "Delete all availability for a user.",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/available/account/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The provider account to delete records for"
          }
        }
      },
      "DeleteRecurrent": {
        "description": "Delete recurrent availability.",
        "src": "web-gateway/app/schedule/availability/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/available/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "The record to delete, passed as the last URI segment"
          }
        }
      }
    },
    "Schedule-Preferences": {
      "GetSingle": {
        "description": "Get preferences for an organization. Admins and manages may access to any organization, clients and providers - only to the organization with which they are associated",
        "src": "web-gateway/app/schedule/preference/route.ts",
        "api": {
          "method": "GET",
          "url": "/schedule/preferences/:id"
        },
        "version": "3.0",
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "disabledFor": {
            "type": "AccountTypeId[]",
            "optional": true,
            "description": "An array of account type IDs (string values) indicating for which accounts the section should be disabled. When it's missing, the section is available to everyone."
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Set preference entry for an organization. Accessible only for admins",
        "src": "web-gateway/app/schedule/preference/route.ts",
        "api": {
          "method": "PUT",
          "url": "/schedule/preferences/:id"
        },
        "version": "3.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          },
          "disabledFor": {
            "type": "AccountTypeId[]",
            "optional": true,
            "description": "An array of account type IDs (string values) indicating for which accounts the section should be disabled. When it's missing, the section is available to everyone."
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "201"
          }
        }
      },
      "Delete": {
        "description": "Delete preferences entry for an organization. Accessible only for admins",
        "src": "web-gateway/app/schedule/preference/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/schedule/preferences/:id"
        },
        "version": "3.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Organization ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Schedule-Reports": {
      "GetAllMeetings": {
        "description": "Fetch a list of all meetings by each account",
        "src": "web-gateway/app/schedule/reporting/route.ts",
        "api": {
          "method": "GET",
          "url": "/schedule/reporting"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiSuccess": {
          "success": {
            "description": "CSV string of all meetings by account",
            "type": "String",
            "code": "200"
          }
        }
      }
    },
    "Scheduler": {
      "GetOpenTimeslots": {
        "description": "Fetch a list of open timeslots for a user, up to 7 days",
        "src": "web-gateway/app/schedule/scheduler/route.ts",
        "api": {
          "method": "GET",
          "url": "/scheduler"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "accounts": {
            "type": "Bigint[]",
            "optional": true,
            "description": "An array of accounts to fetch open timeslots for"
          },
          "startDay": {
            "type": "Date",
            "optional": true,
            "description": "The day to fetch open timeslots for - previous day, start day, and following 5 days.  In YYYY-MM-DD format.  Will default today"
          },
          "duration": {
            "type": "Integer",
            "description": "The number of minutes required for meeting"
          }
        },
        "apiSuccess": {
          "meetings": {
            "type": "Array",
            "description": "Array of open timeslots",
            "children": {
              "account": {
                "type": "Bigint",
                "description": "The provider's account id"
              },
              "startTime": {
                "type": "Timestamp",
                "description": "The start time, in ISO8601 format"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetOpenTimeslotsQuick": {
        "description": "Fetch a list of open timeslots for a provider in a currently-scheduled meeting, up to 7 days.  This endpoint is intended for quick meeting reschedule via an email reminder link. It doesn't require authentication but validates the URL token",
        "src": "web-gateway/app/schedule/scheduler/route.ts",
        "api": {
          "method": "GET",
          "url": "/scheduler/quick"
        },
        "version": "2.0",
        "apiParam": {
          "token": {
            "type": "String",
            "description": "The token to validate"
          },
          "startDay": {
            "type": "Timestamp",
            "description": "The day to start returning availability for"
          }
        },
        "apiSuccess": {
          "meetings": {
            "type": "Array",
            "description": "Array of open timeslots",
            "children": {
              "account": {
                "type": "Integer",
                "description": "The provider's account id"
              },
              "startTime": {
                "type": "Timestamp",
                "description": "The start time, in ISO8601 format"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSummary": {
        "description": "Fetch a summary of all minutes used or booked to be used, and lifetime number of booked sessions.  Meetings that are attended by this individual with attendance not set or listed to TRUE will be included in the calculation",
        "src": "web-gateway/app/schedule/summary/route.ts",
        "api": {
          "method": "GET",
          "url": "/schedule/summary"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "description": "The account to calculate summary for"
          },
          "startDate": {
            "type": "Date",
            "description": "Calculate from this date - YYYY-MM-DD format"
          },
          "endDate": {
            "type": "Date",
            "description": "Calculate until this date - YYYY-MM-DD format"
          }
        },
        "apiSuccess": {
          "1on1initialMinutes": {
            "type": "Integer",
            "description": "The number of minutes used for initial 1on1 meetings"
          },
          "1on1initialSessions": {
            "type": "Integer",
            "description": "The number of booked and attended sessions for initial 1on1 meetings"
          },
          "1on1Minutes": {
            "type": "Integer",
            "description": "The number of minutes used for 1on1 meetings"
          },
          "1on1Sessions": {
            "type": "Integer",
            "description": "The number of booked and attended sessions for 1on1 meetings"
          },
          "circleMinutes": {
            "type": "Integer",
            "description": "The number of minutes used for circle meetings"
          },
          "circleSession": {
            "type": "Integer",
            "description": "The number of booked and attended sessions for circle meetings"
          }
        },
        "hasResponse": true
      }
    }
  },
  "Stripe": {
    "Stripe": {
      "Charge": {
        "description": "Create new charge.",
        "src": "web-gateway/app/stripe/charge/route.ts",
        "api": {
          "method": "POST",
          "url": "/stripe/charge"
        },
        "version": "2.0",
        "apiParam": {
          "currency": {
            "type": "String",
            "description": "Charge currency"
          },
          "amount": {
            "type": "String",
            "description": "Charge amount"
          },
          "description": {
            "type": "String",
            "description": "Charge description (optional)"
          }
        },
        "apiSuccess": {
          "success": {
            "description": "Stripe charge object",
            "type": "Any",
            "code": "200"
          }
        },
        "hasResponse": true
      },
      "Customer": {
        "description": "Create and add Stripe customer.",
        "src": "web-gateway/app/stripe/customer/route.ts",
        "api": {
          "method": "POST",
          "url": "/stripe/customer"
        },
        "version": "2.0",
        "apiParam": {
          "email": {
            "type": "String",
            "description": "account email"
          },
          "source": {
            "type": "String",
            "description": "token for account"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "Supplement": {
    "Supplement-Account-Organization": {
      "GetAll": {
        "description": "Get association between supplement, organization and client account",
        "src": "web-gateway/app/supplement/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/account/organization/"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "supplementOrganization": {
            "type": "Bigint",
            "description": "Supplement-organization entry ID"
          },
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Client account ID. Optional for Client requests, otherwise required"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "Association ID"
          },
          "supplementOrganizationId": {
            "type": "Bigint",
            "description": "ID of the supplement-organization association"
          },
          "accountId": {
            "type": "Bigint",
            "description": "ID of the client account"
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "Custom, client-specific dosage"
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create association between supplement organization and client account",
        "src": "web-gateway/app/supplement/account/route.ts",
        "api": {
          "method": "POST",
          "url": "/supplement/account/organization/"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "supplementOrganization": {
            "type": "Bigint",
            "description": "Supplement-organization entry ID"
          },
          "account": {
            "type": "Bigint",
            "description": "Client account ID"
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "Create client-specific dosage for supplement-organization entry"
          }
        },
        "apiSuccess": {
          "supplementOrganizationAccountId": {
            "description": "Association ID",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update dosage in association between supplement organization and client account",
        "src": "web-gateway/app/supplement/account/route.ts",
        "api": {
          "method": "PUT",
          "url": "/supplement/account/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Supplement-organization-account association ID"
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "Create client-specific dosage for supplement-organization entry"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete association between supplement organization and client account",
        "src": "web-gateway/app/supplement/account/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/supplement/account/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Supplement-organization-account entry ID"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Supplement-Consumption": {
      "GetAll": {
        "description": "Get supplement intake, returns a maximum of 10 matching entries, ordered by supplement start date.",
        "src": "web-gateway/app/supplement/consumption/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/consumption"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Only fetch supplement intake which are associated with this account. Optional for Client requests, otherwise required"
          },
          "startDate": {
            "type": "String",
            "optional": true,
            "description": "Date passed as the start time being passed, if not passed, defaults to current day."
          },
          "endDate": {
            "type": "String",
            "optional": true,
            "description": "Date passed as the end time being passed."
          },
          "offset": {
            "type": "Integer",
            "optional": true,
            "description": "Number of entries to offset from beginning of query."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "The collection of consumption entries",
            "children": {
              "date": {
                "type": "String",
                "description": "The date of the supplements' consumption"
              },
              "consumption": {
                "type": "Array",
                "description": "The collection of supplements' consumption entries",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The consumption entry ID"
                  },
                  "supplement": {
                    "type": "SupplementConsumed",
                    "description": "The supplement consumed",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The ID of the supplement taken"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of the supplement taken"
                      },
                      "shortName": {
                        "type": "String",
                        "description": "The short name of the supplement taken"
                      }
                    }
                  },
                  "quantity": {
                    "type": "Integer",
                    "description": "The number of this supplement taken"
                  }
                }
              }
            }
          }
        },
        "apiuse": {
          "Pagination": {
            "type": "Object",
            "description": ""
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Add supplement record for date. If an entry already exists for specified date/account/supplement combination, it will be overwritten with this request.",
        "src": "web-gateway/app/supplement/consumption/route.ts",
        "api": {
          "method": "POST",
          "url": "/supplement/consumption"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "Account association to post consumption. Optional for Client requests, otherwise required"
          },
          "date": {
            "type": "String",
            "description": "Date of entry for consumption."
          },
          "supplements": {
            "type": "Array",
            "description": "An array of objects for each supplement/quantity combo",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "The ID of the supplement taken"
              },
              "quantity": {
                "type": "Integer",
                "description": "The quantity of this supplement taken"
              }
            }
          }
        },
        "apiSuccess": {
          "consumptionId": {
            "description": "ID of the consumption entry",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update supplement for date specified. Will add missing entries, update existing supplement entries and remove entries that are not in the collection.",
        "src": "web-gateway/app/supplement/consumption/route.ts",
        "api": {
          "method": "PUT",
          "url": "/supplement/consumption/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Identifier of the supplement consumption entry"
          },
          "quantity": {
            "type": "Integer",
            "description": "The quantity of supplement taken"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete specific supplement entry for a specific date",
        "src": "web-gateway/app/supplement/consumption/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/supplement/consumption/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the consumption entry to delete"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    },
    "Supplement": {
      "GetAll": {
        "description": "Search supplements by full or short name, filtering by activity status. Response is paged.",
        "src": "web-gateway/app/supplement/core/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement"
        },
        "version": "3.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "query": {
            "type": "String",
            "description": "Search query for retrieval of all matching supplements by short or full name"
          },
          "status": {
            "type": "ActiveStatus",
            "optional": true,
            "default": "active",
            "description": "Filter supplements by activity status",
            "values": "'all' | 'active' | 'inactive'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Number of records per page. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Number of records to offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "SupplementItemLoc[]",
            "description": "Collection of supplement objects",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of the supplement"
              },
              "fullName": {
                "type": "String",
                "description": "Full name of the supplement"
              },
              "shortName": {
                "type": "String",
                "description": "Supplement abbreviated name"
              },
              "isActive": {
                "type": "Boolean",
                "description": "Supplement activity status flag"
              },
              "translations": {
                "type": "SupplementTranslation[]",
                "description": "Translation list",
                "children": {
                  "locale": {
                    "type": "String",
                    "description": "Locale"
                  },
                  "fullName": {
                    "type": "String",
                    "optional": true,
                    "description": "Translated full name of the supplement"
                  },
                  "shortName": {
                    "type": "String",
                    "optional": true,
                    "description": "Translated short name of the supplement"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Create new supplement.",
        "src": "web-gateway/app/supplement/core/route.ts",
        "api": {
          "method": "POST",
          "url": "/supplement"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "fullName": {
            "type": "String",
            "description": "Supplement full name"
          },
          "shortName": {
            "type": "String",
            "description": "Supplement abbreviated name"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "default": "true",
            "description": "Activity status flag"
          }
        },
        "apiSuccess": {
          "supplementId": {
            "description": "ID of the created supplement",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update existing supplement.",
        "src": "web-gateway/app/supplement/core/route.ts",
        "api": {
          "method": "PUT",
          "url": "/supplement/:id"
        },
        "version": "2.0",
        "permissions": [
          "Admin"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "Supplement ID"
          },
          "fullName": {
            "type": "String",
            "optional": true,
            "description": "Supplement full name"
          },
          "shortName": {
            "type": "String",
            "optional": true,
            "description": "Supplement abbreviated name"
          },
          "isActive": {
            "type": "Boolean",
            "optional": true,
            "description": "Supplement activity status value"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "GetSummary": {
        "description": "Get supplement consumption summary",
        "src": "web-gateway/app/supplement/summary/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/summary"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "account": {
            "type": "Bigint",
            "optional": true,
            "description": "The client id. Optional for Client requests, otherwise required"
          },
          "startDate": {
            "type": "Date",
            "description": "Select data that starts at or after this time, in 'YYYY-MM-DD' format."
          },
          "endDate": {
            "type": "Date",
            "optional": true,
            "description": "Select data that ends at or before this time, in 'YYYY-MM-DD' format. Todays date is default if left blank"
          },
          "unit": {
            "type": "String",
            "description": "The unit of time that the results should be returned in (day|week|month)"
          }
        },
        "apiSuccess": {
          "summary": {
            "type": "Array",
            "description": "A summary collection",
            "children": {
              "date": {
                "type": "String",
                "description": "The date that starts the week or month"
              },
              "consumption": {
                "type": "Array",
                "description": "Supplement consumption",
                "children": {
                  "supplement": {
                    "type": "SupplementConsumed",
                    "description": "Supplement consumed",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "Id of the supplement"
                      },
                      "name": {
                        "type": "String",
                        "description": "Name of the supplement"
                      },
                      "shortName": {
                        "type": "String",
                        "description": "Short name of the supplement"
                      }
                    }
                  },
                  "quantity": {
                    "type": "Integer",
                    "description": "Quantity consumed"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      }
    },
    "Supplement-Organization": {
      "GetAll": {
        "description": "Fetch supplements by organization, along with their association IDs",
        "src": "web-gateway/app/supplement/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/organization"
        },
        "version": "3.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "ID of an organization"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page entry limit. Takes a number or can be set to 'all' to fetch all entries."
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "The page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Collection of supplements for specified organizations",
            "children": {
              "id": {
                "type": "Bigint",
                "description": "ID of an organization-supplement association"
              },
              "organization": {
                "type": "Entity",
                "description": "Organization object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of an organization"
                  }
                }
              },
              "supplement": {
                "type": "SupplementItem",
                "description": "Core supplement data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "ID of the supplement"
                  },
                  "fullName": {
                    "type": "String",
                    "description": "Full name of the supplement, in requested locale if available"
                  },
                  "shortName": {
                    "type": "String",
                    "description": "Short name of the supplement, in requested locale if available"
                  },
                  "isActive": {
                    "type": "Boolean",
                    "description": "Supplement activity status flag"
                  }
                }
              },
              "dosage": {
                "type": "String",
                "optional": true,
                "description": "Dosage for the supplement for given organization"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSingle": {
        "description": "Fetch supplement-organization association by ID",
        "src": "web-gateway/app/supplement/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/supplement/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Client"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement-organization association"
          }
        },
        "apiSuccess": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement-organization association"
          },
          "organizationId": {
            "type": "Bigint",
            "description": "ID of the organization"
          },
          "data": {
            "type": "Object",
            "description": "",
            "children": {
              "supplements": {
                "type": "Object",
                "description": "",
                "children": {
                  "supplement": {
                    "type": "SupplementItem",
                    "description": "Core supplement data",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "ID of the supplement"
                      },
                      "fullName": {
                        "type": "String",
                        "description": "Full name of the supplement"
                      },
                      "shortName": {
                        "type": "String",
                        "description": "Short name of the supplement"
                      },
                      "isActive": {
                        "type": "Boolean",
                        "description": "Supplement activity status flag"
                      }
                    }
                  }
                }
              }
            }
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "Organization-specific dosage data for the supplement"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "Custom sort order"
          }
        },
        "hasResponse": true
      },
      "Create": {
        "description": "Associate sumplement with organization",
        "src": "web-gateway/app/supplement/organization/route.ts",
        "api": {
          "method": "POST",
          "url": "/supplement/organization"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "supplement": {
            "type": "Bigint",
            "description": "ID of the supplement"
          },
          "organization": {
            "type": "Bigint",
            "description": "Organization ID."
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "The default dosage of the supplement for the organization"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "The sort order for the supplement-organization association"
          }
        },
        "apiSuccess": {
          "supplementOrganizationId": {
            "description": "Association ID",
            "type": "Bigint",
            "code": "201"
          }
        },
        "hasResponse": true
      },
      "Update": {
        "description": "Update dosage on supplement-organization association",
        "src": "web-gateway/app/supplement/organization/route.ts",
        "api": {
          "method": "PUT",
          "url": "/supplement/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the supplement-organization association"
          },
          "dosage": {
            "type": "Integer",
            "optional": true,
            "description": "The default dosage of the supplement for the organization"
          },
          "sortOrder": {
            "type": "Integer",
            "optional": true,
            "description": "Custom sort order for supplement-organization association"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      },
      "Delete": {
        "description": "Delete supplement-organization entry by specified ID",
        "src": "web-gateway/app/supplement/organization/route.ts",
        "api": {
          "method": "DELETE",
          "url": "/supplement/organization/:id"
        },
        "version": "2.0",
        "permissions": [
          "Provider"
        ],
        "apiParam": {
          "id": {
            "type": "Bigint",
            "description": "ID of the SupplementOrganization"
          }
        },
        "apiSuccess": {
          "success": {
            "type": "void",
            "code": "204"
          }
        }
      }
    }
  },
  "System": {
    "System": {
      "Status": {
        "description": "Indicates if the system is available",
        "src": "web-gateway/app/system/route.ts",
        "api": {
          "method": "GET",
          "url": "/system"
        },
        "version": "1.0",
        "permissions": [
          "Public"
        ]
      }
    }
  },
  "Reports": {
    "Reports": {
      "GetLoginInactivity": {
        "description": "Fetch a report for inactive users in specific buckets (30 - 60 days, 60 - 90 days, 90+ days) based on last login date.",
        "src": "web-gateway/app/warehouse/account/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/login/inactivity"
        },
        "version": "2.0",
        "permissions": [
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "Organization to get hierarchy for."
          },
          "category": {
            "type": "String",
            "optional": true,
            "description": "A category to filter by.",
            "values": "'30' | '60' | '90'"
          },
          "accountType": {
            "type": "String",
            "optional": true,
            "description": "An account type to filter by.",
            "values": "'2' | '3'"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "Indicates whether the aggregates should be rolled up to parent organization (simple), or if all children organizations should be listed (detailed)",
            "values": "'simple' | 'detailed'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "account": {
                "type": "AccountRef",
                "description": "Account data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "Account's first name"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Account's last name"
                  }
                }
              },
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "accountType": {
                "type": "AccountTypeInfo",
                "description": "Account type data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Account type ID"
                  },
                  "title": {
                    "type": "String",
                    "description": "Account type title"
                  }
                }
              },
              "category": {
                "type": "Number",
                "description": "Login bucket category, in days",
                "values": "'30' | '60' | '90'"
              },
              "lastLogin": {
                "type": "Timestamp",
                "description": "Last login timestamp"
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        }
      },
      "GetAgeDemographics": {
        "description": "Fetch a report for aggregate client age breakdown",
        "src": "web-gateway/app/warehouse/demographics/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/demographics/age"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organizationHierarchy": {
            "type": "Bigint[]",
            "description": "A hierarchy of organizations to run the report for."
          },
          "date": {
            "type": "String",
            "description": "Date for which the aggregations should be run, in ISO8601 format"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "Indicates whether the aggregates should be rolled up to parent organization (simple), or if all children organizations should be listed (detailed)",
            "values": "'simple' | 'detailed'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "BucketReported[]",
            "description": "Aggregate collection",
            "children": {
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "buckets": {
                "type": "DemographicBucket[]",
                "description": "Age bucket collection",
                "children": {
                  "bucket": {
                    "type": "Object",
                    "description": "",
                    "children": {
                      "name": {
                        "type": "String",
                        "description": "Bucket name"
                      }
                    }
                  },
                  "count": {
                    "type": "Number",
                    "description": "Number of people in the given age bucket"
                  },
                  "percentage": {
                    "type": "Number",
                    "description": "Percentage of people in the given age bucket"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetGenderDemographics": {
        "description": "Fetch a report for aggregate client gender breakdown",
        "src": "web-gateway/app/warehouse/demographics/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/demographics/gender"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organizationHierarchy": {
            "type": "Bigint[]",
            "description": "A hierarchy of organizations to run the report for."
          },
          "date": {
            "type": "String",
            "description": "Date for which the aggregations should be run, in ISO8601 format"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "Indicates whether the aggregates should be rolled up to parent organization (simple), or if all children organizations should be listed (detailed)",
            "values": "'simple' | 'detailed'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Aggregate collection",
            "children": {
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "male": {
                "type": "Object",
                "description": "Male gender breakdown",
                "children": {
                  "count": {
                    "type": "Number",
                    "description": "Count of male clients"
                  },
                  "percentage": {
                    "type": "Number",
                    "description": "Percentage of male clients"
                  }
                }
              },
              "female": {
                "type": "Object",
                "description": "Female gender breakdown",
                "children": {
                  "count": {
                    "type": "Number",
                    "description": "Count of female clients"
                  },
                  "percentage": {
                    "type": "Number",
                    "description": "Percentage of female clients"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetEnrollmentPatientCount": {
        "description": "New and total patients count report based on package enrollments for given time range",
        "src": "web-gateway/app/warehouse/enrollment/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/enrollment/patient-count"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization"
          },
          "startDate": {
            "type": "String",
            "description": "The start date"
          },
          "endDate": {
            "type": "String",
            "description": "The end date"
          },
          "package": {
            "type": "String",
            "optional": true,
            "description": "Id of the package"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "default": "week",
            "description": "A unit to aggregate the patient counts over",
            "values": "'day' | 'week' | 'month' | 'year'"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "In simple output mode 'child' organizations are aggregated to parent, in 'detailed' output is per-clinic",
            "values": "'simple' | 'detailed'"
          }
        },
        "hasResponse": true
      },
      "GetWeightChange": {
        "description": "Fetch a report for user weight changes for specific organization",
        "src": "web-gateway/app/warehouse/measurement/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/weight/change"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization"
          },
          "startDate": {
            "type": "String",
            "description": "The start date in ISO8601 format"
          },
          "endDate": {
            "type": "String",
            "description": "The end date in ISO8601 format"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          },
          "sort": {
            "type": "WeigthChangeSort[]",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by name.",
            "children": {
              "property": {
                "type": "WeigthChangeSortProperty",
                "optional": true,
                "default": "name",
                "description": "Property to sort by. 'name' indicates account/client last name, 'provider' indicates provider last name. 'percentage' and 'value' refer to weight changes.",
                "values": "'percentage' | 'value' | 'provider' | 'name'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sorting direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "account": {
                "type": "Object",
                "description": "User account data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "User ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the client"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the client"
                  }
                }
              },
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "change": {
                "type": "Object",
                "description": "Weight change data",
                "children": {
                  "value": {
                    "type": "String",
                    "description": "Absolute value of the weight change between the first & last weigh in the provided date range"
                  },
                  "percentage": {
                    "type": "String",
                    "description": "Percentage change of the weight, in respect to starting weight, between the first & last weigh in the provided date range"
                  },
                  "weighInCount": {
                    "type": "String",
                    "description": "Count of weigh-ins (samples) in the given date range"
                  }
                }
              },
              "assignedProvider": {
                "type": "Object",
                "optional": true,
                "description": "Assigned provider data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Provider account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the provider"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the provider"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        }
      },
      "GetActivityLevel": {
        "description": "Returns JSON report with number of accounts assigned to given levels by average of steps per day",
        "src": "web-gateway/app/warehouse/measurement/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/step/activity/level"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization"
          },
          "startDate": {
            "type": "Timestamp",
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "level": {
            "type": "Array",
            "description": "Array of levels of average steps per day to count to, for example: [ { name: 'low', threshold: 0 }, { name: 'so-so', threshold: 1000 }, { name: 'acceptable', threshold: 4000 } ]",
            "children": {
              "name": {
                "type": "String",
                "description": "Name of level"
              },
              "threshold": {
                "type": "Number",
                "description": "Threshold steps value of level, minimum value 0."
              }
            }
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          },
          "sort": {
            "type": "ActivityReportSort",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by name.",
            "children": {
              "property": {
                "type": "ActivityReportSortProperty",
                "optional": true,
                "default": "name",
                "description": "Property to sort by. 'name' indicates account/client last name, 'provider' indicates provider last name. 'activityLevel' refer to provided activity levels.",
                "values": "'activityLevel' | 'provider' | 'name'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sorting direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "account": {
                "type": "Object",
                "description": "User account data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "User ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the client"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the client"
                  }
                }
              },
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "steps": {
                "type": "Object",
                "description": "Steps data",
                "children": {
                  "avg": {
                    "type": "Number",
                    "description": "Average steps (daily) for given time range"
                  },
                  "min": {
                    "type": "Number",
                    "description": "Minimum steps (daily) for given time range"
                  },
                  "max": {
                    "type": "Number",
                    "description": "Maximum steps (daily) for given time range"
                  },
                  "sampleCount": {
                    "type": "Number",
                    "description": "Number of samples for given time range"
                  }
                }
              },
              "level": {
                "type": "Object",
                "description": "Level data",
                "children": {
                  "name": {
                    "type": "String",
                    "description": "assigned level ID"
                  }
                }
              },
              "assignedProvider": {
                "type": "Object",
                "optional": true,
                "description": "Assigned provider data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Provider account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the provider"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the provider"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetBasicSleep": {
        "description": "Returns JSON report with number of accounts with sleep data for given date range",
        "src": "web-gateway/app/warehouse/measurement/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/sleep/basic"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization"
          },
          "startDate": {
            "type": "Timestamp",
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "default": "day",
            "description": "unit of returned values,",
            "values": "'day' | 'week' | 'month'"
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "10",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          },
          "sort": {
            "type": "SleepReportSort",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by name.",
            "children": {
              "property": {
                "type": "SleepReportSortProperty",
                "optional": true,
                "default": "name",
                "description": "Property to sort by. 'name' indicates account/client last name, 'provider' indicates provider last name. 'hourSum', hourMin', 'hourMax', 'hourAvg' refer to returned slept hours.",
                "values": "'hourSum' | 'hourMin' |  'hourMax' |  'hourAvg' | 'provider' | 'name'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sorting direction",
                "values": "'asc' | 'desc'"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "account": {
                "type": "Object",
                "description": "User account data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "User ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the client"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the client"
                  }
                }
              },
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "date": {
                "type": "String",
                "description": "Start date of given unit range"
              },
              "hoursSlept": {
                "type": "Object",
                "description": "Sleep data",
                "children": {
                  "sum": {
                    "type": "Number",
                    "description": "Sum of hours slept for given time range"
                  },
                  "min": {
                    "type": "Number",
                    "description": "Minimum of hours slept for given time range"
                  },
                  "max": {
                    "type": "Number",
                    "description": "Maximum of hours slept for given time range"
                  },
                  "avg": {
                    "type": "Number",
                    "description": "Average of hours slept for given time range"
                  },
                  "sampleCount": {
                    "type": "Number",
                    "description": "Number of samples for given time range"
                  }
                }
              },
              "assignedProvider": {
                "type": "Object",
                "optional": true,
                "description": "Assigned provider data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Provider account ID"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "First name of the provider"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "Last name of the provider"
                  }
                }
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetBodyComposition": {
        "description": "Calculates an average change in specified metric as a cohort report for a specified hierarchy",
        "src": "web-gateway/app/warehouse/measurement/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/measurement/body-composition"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess",
          "OrgClientPHI"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "An organization ID to run the report for"
          },
          "metric": {
            "type": "String",
            "description": "A metric to calculate the report for",
            "values": "'percentage' | 'value'"
          },
          "data": {
            "type": "String",
            "description": "A data property to calculate the report for",
            "values": "'weight' | 'bmi' | 'fat' | 'lean-mass'"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "A report mode to either roll up the data to the top of the specified hierarchy, or run a detailed analysis on the whole hierarchy",
            "values": "'detailed' | 'simple'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Data collection",
            "children": {
              "week": {
                "type": "Number",
                "description": "Cohort week",
                "values": "1 | 2 | 4 | 8 | 12 | 16 | 24 | 52"
              },
              "avg": {
                "type": "String",
                "description": "Average change of specific metric (value, percentage) of the selected data point"
              },
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetOrganizationActivity": {
        "description": "Fetches activity over a timeline per organization",
        "src": "web-gateway/app/warehouse/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/organization/activity"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of an organization to run the report for"
          },
          "startDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "description": "A unit to aggregate the activity over",
            "values": "'day' | 'week' | 'month'"
          },
          "detailed": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates a detailed mode. If the flag is set to 'true', it will unroll all accounts for all organizations below in the hierarchy. Warning: can/will be slow!"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of report results",
            "children": {
              "date": {
                "type": "Timestamp",
                "description": "Date of the aggregation"
              },
              "aggregates": {
                "type": "Array",
                "description": "All aggregates for specific dates",
                "children": {
                  "organization": {
                    "type": "Object",
                    "description": "Organization object",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The id of organization"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of organization"
                      }
                    }
                  },
                  "clients": {
                    "type": "Object",
                    "description": "Clients report object",
                    "children": {
                      "total": {
                        "type": "Number",
                        "description": "Number of active clients for requested organization"
                      },
                      "active": {
                        "type": "Number",
                        "description": "Number of clients who has any API activity within requested dates range"
                      }
                    }
                  },
                  "providers": {
                    "type": "Object",
                    "description": "Providers report object",
                    "children": {
                      "total": {
                        "type": "Number",
                        "description": "Number of active providers for requested organization"
                      },
                      "active": {
                        "type": "Number",
                        "description": "Number of providers who has any API activity within requested dates range"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetUserActivity": {
        "description": "Returns JSON report with number of organization's active clients and providers. Along within number of users who has any API activity with requested dates range.",
        "src": "web-gateway/app/warehouse/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/organization/activity/feature"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of an organization to run the report for"
          },
          "startDate": {
            "type": "Timestamp",
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "package": {
            "type": "String",
            "optional": true,
            "description": "A package filter."
          },
          "unit": {
            "type": "String",
            "description": "A unit to aggregate the activity data over",
            "values": "'day' | 'week' | 'month'"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "Indicates whether the aggregates should be rolled up to parent organization (simple), or if all children organizations should be listed (detailed)",
            "values": "'simple' | 'detailed'"
          },
          "data": {
            "type": "String",
            "description": "Type of data to report on",
            "values": "'meal' | 'weigh-in'"
          }
        },
        "apiSuccess": {
          "aggregates": {
            "type": "Timestamp",
            "description": "Date of the aggregation",
            "children": {
              "organization": {
                "type": "Object",
                "description": "Organization object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of organization"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of organization"
                  }
                }
              },
              "count": {
                "type": "Object",
                "description": "Count for requested data"
              },
              "average": {
                "type": "Object",
                "description": "Average count over selected unit for requested data"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSignUpsTimeline": {
        "description": "Fetches organization sign-ups over a timeline per organization",
        "src": "web-gateway/app/warehouse/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/organization/sign-ups/timeline"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of an organization to run the report for"
          },
          "startDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "unit": {
            "type": "String",
            "optional": true,
            "description": "A unit to aggregate the sign ups over",
            "values": "'day' | 'week' | 'month'"
          },
          "detailed": {
            "type": "Boolean",
            "optional": true,
            "default": "false",
            "description": "Indicates a detailed mode. If the flag is set to 'true', it will unroll all sign ups for all organizations below in the hierarchy. Warning: can/will be slow!"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of report results",
            "children": {
              "date": {
                "type": "Timestamp",
                "description": "Date of the aggregation"
              },
              "aggregates": {
                "type": "Array",
                "description": "All aggregates for specific dates",
                "children": {
                  "organization": {
                    "type": "Object",
                    "description": "Organization object",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The id of organization"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of organization"
                      }
                    }
                  },
                  "signUps": {
                    "type": "String",
                    "description": "A number of new sign ups"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSignUpsList": {
        "description": "Fetches organization sign-ups over a list per organization",
        "src": "web-gateway/app/warehouse/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/organization/sign-ups/list"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of the organization"
          },
          "name": {
            "type": "String",
            "optional": true,
            "description": "The name of client."
          },
          "startDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that end at or before this time, in ISO8601 format. Defaults to now/today."
          },
          "limit": {
            "type": "PageSize",
            "optional": true,
            "default": "25",
            "description": "Page size. Can either be \"all\" (a string) or a number"
          },
          "offset": {
            "type": "PageOffset",
            "optional": true,
            "default": "0",
            "description": "Page offset"
          },
          "sort": {
            "type": "SignUpsReportSort[]",
            "optional": true,
            "description": "A collection of sorting options. The ordering is applied in the order of parameters passed. Defaults to sorting by name.",
            "children": {
              "property": {
                "type": "SignUpsReportSortProperty",
                "optional": true,
                "default": "name",
                "description": "Property to sort by. 'name' indicates account/client last name, 'provider' indicates provider last name. 'percentage' and 'value' refer to weight changes.",
                "values": "'percentage' | 'value' | 'provider' | 'name' | 'startDate'"
              },
              "dir": {
                "type": "SortDirection",
                "optional": true,
                "default": "asc",
                "description": "Sorting direction"
              }
            }
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Data collection",
            "children": {
              "organization": {
                "type": "Object",
                "description": "Organization object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of organization"
                  },
                  "name": {
                    "type": "String",
                    "description": "The name of organization"
                  }
                }
              },
              "account": {
                "type": "Object",
                "description": "Client object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "The id of client"
                  },
                  "firstName": {
                    "type": "String",
                    "description": "The first name of client"
                  },
                  "lastName": {
                    "type": "String",
                    "description": "The last name of client"
                  }
                }
              },
              "assignedProvider": {
                "type": "Object",
                "optional": true,
                "description": "Provider object",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "optional": true,
                    "description": "The id of provider"
                  },
                  "firstName": {
                    "type": "String",
                    "optional": true,
                    "description": "The first name of provider"
                  },
                  "lastName": {
                    "type": "String",
                    "optional": true,
                    "description": "The last name of provider"
                  }
                }
              },
              "startDate": {
                "type": "String",
                "description": "Client association date"
              },
              "length": {
                "type": "Number",
                "description": "Difference in weeks, fractional, between client's start date and selected endDate."
              }
            }
          },
          "pagination": {
            "type": "Pagination",
            "description": "Pagination object",
            "children": {
              "prev": {
                "type": "Integer",
                "optional": true,
                "description": "Previous page offset"
              },
              "next": {
                "type": "Integer",
                "optional": true,
                "description": "Next page offset"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetSignUps": {
        "description": "Fetches new sign-ups report divided into organizations",
        "src": "web-gateway/app/warehouse/organization/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/organization/sign-ups"
        },
        "version": "2.0",
        "permissions": [
          "Admin",
          "Provider",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The ID of an organization to run the report for"
          },
          "startDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "optional": true,
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "includeInactiveOrganizations": {
            "type": "Boolean",
            "optional": true,
            "description": "Generate report including inactive organizations."
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Object[]",
            "description": "Array of report results",
            "children": {
              "organization": {
                "type": "Object",
                "description": "Organization data",
                "children": {
                  "id": {
                    "type": "Bigint",
                    "description": "Organization ID"
                  },
                  "name": {
                    "type": "String",
                    "description": "Organization name"
                  }
                }
              },
              "signUps": {
                "type": "String",
                "description": "A number of new sign ups"
              }
            }
          }
        },
        "hasResponse": true
      },
      "GetProviderCount": {
        "description": "Returns JSON report with number of organization's providers that are active between specific dates.",
        "src": "web-gateway/app/warehouse/provider/route.ts",
        "api": {
          "method": "GET",
          "url": "/warehouse/provider/count"
        },
        "version": "2.0",
        "permissions": [
          "Provider",
          "Admin",
          "OrgAccess"
        ],
        "apiParam": {
          "organization": {
            "type": "Bigint",
            "description": "The id of the organization."
          },
          "startDate": {
            "type": "Timestamp",
            "description": "Report with data that start at or after this time, in ISO8601 format"
          },
          "endDate": {
            "type": "Timestamp",
            "description": "Report with data that end at or before this time, in ISO8601 format"
          },
          "unit": {
            "type": "String",
            "description": "A unit to aggregate the providers over",
            "values": "'day' | 'week' | 'month'"
          },
          "mode": {
            "type": "String",
            "optional": true,
            "default": "simple",
            "description": "Indicates whether the aggregates should be rolled up to parent organization (simple), or if all children organizations should be listed (detailed)",
            "values": "'simple' | 'detailed'"
          }
        },
        "apiSuccess": {
          "data": {
            "type": "Array",
            "description": "Array of report results",
            "children": {
              "date": {
                "type": "Timestamp",
                "description": "Date of the aggregation"
              },
              "aggregates": {
                "type": "Array",
                "description": "All aggregates for specific dates",
                "children": {
                  "organization": {
                    "type": "Object",
                    "description": "Organization object",
                    "children": {
                      "id": {
                        "type": "Bigint",
                        "description": "The id of organization"
                      },
                      "name": {
                        "type": "String",
                        "description": "The name of organization"
                      }
                    }
                  },
                  "count": {
                    "type": "String",
                    "description": "A number of active providers"
                  }
                }
              }
            }
          }
        },
        "hasResponse": true
      }
    }
  }
}